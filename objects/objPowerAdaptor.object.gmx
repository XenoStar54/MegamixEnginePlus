<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPowerAdaptor</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

maxAmmo = 28;
contactDamage = 0;
shiftVisible = 3;
image_speed = 0;
bulletLimitCost = 0;

canHit = false;
canDamage = false;

powerEnableSlide = 1;
// powerEnableSlide controls user's ability to slide
// 0 - user can't slide
// 1 - user can slide

powerEnableGroundPound = 1;
// powerEnableGroundPound controls user's ability to ground pound
// 0 - user can't ground pound
// 1 - user can ground pound when on the ground

groundPoundLatch = 0;
powerSlideLock = 0;
powerPunchLock = 0;
powerStandStillLock = 0;
hoverLock = 0;

despawnRange = -1;
respawnRange = -1;

timer = 0;
lockTimeMax = 11;

initCharge = 12;
charge = 30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(parent))
{
    if(powerSlideLock) powerSlideLock = lockPoolRelease(powerSlideLock);
    if(powerPunchLock) powerPunchLock = lockPoolRelease(powerPunchLock);
    if(powerStandStillLock) powerStandStillLock = lockPoolRelease(powerStandStillLock);
    if(hoverLock) hoverLock = lockPoolRelease(hoverLock);
    parent.spriteY = parent.isShoot;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!instance_exists(parent))
{
    instance_destroy();
    exit;
}

x = parent.x;
y = parent.y;

if(global.weapon[playerID] == global.weaponID[? self.object_index])
{
    var menuCheck = 0;
    with(objPauseMenu)
    {
        if(playerID == other.parent.playerID &amp;&amp; phase != 0 &amp;&amp; phase != 3) menuCheck = 1;
    }
    if(menuCheck) global.ammo[playerID, global.weapon[playerID]] = maxAmmo;
    else global.ammo[playerID, global.weapon[playerID]] = clamp(maxAmmo*parent.chargeTimer/charge,0,maxAmmo);
}

if(powerPunchLock)
{
    if(groundPoundLatch)
    {
        var spriteSelector = 0;
        if(timer &gt;= 14) spriteSelector = 4;
        else if(timer &gt;= 12) spriteSelector = 3;
        else if(timer &gt;= 10) spriteSelector = 2;
        else if(timer &gt;= 6) spriteSelector = 1;
        
        parent.spriteX = spriteSelector;
        parent.spriteY = 16;
    }
    else
    {
        var spriteSelector = 0;
        if(timer &gt;= 10) spriteSelector = 4;
        else if(timer &gt;= 8) spriteSelector = 3;
        else if(timer &gt;= 6) spriteSelector = 2;
        else if(timer &gt;= 4) spriteSelector = 1;
        
        if(parent.ground)
        {
            parent.xspeed = 0;
        }
        else if(parent.climbing)
        {
            parent.yspeed = 0;
            spriteSelector += 10;
        }
        else
        {
            spriteSelector += 5;
        }
        parent.spriteX = 3+spriteSelector;
        parent.spriteY = 15;
    }
}
else
{
    if(parent.isShoot &amp;&amp; !parent.isSlide)
    {
        var spriteSelector = 8;
        if(parent.ground) spriteSelector = 3;
        else if(parent.climbing) spriteSelector = 13;
        parent.spriteX = spriteSelector;
        parent.spriteY = 15;
    }
    else
    {
        parent.spriteY = 14;
    }
    
    if(groundPoundLatch) groundPoundLatch = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if(entityCanStep())
{
    global.ammo[playerID, global.weapon[playerID]] = maxAmmo;
    
    if(!powerEnableSlide &amp;&amp; !powerSlideLock &amp;&amp; !parent.isSlide)
    {
        with(parent)
        {
            other.powerSlideLock = lockPoolLock(PL_LOCK_SLIDE);
            other.powerSlideLock.targetInstance = self.id;
        }
    }
    
    if(powerPunchLock)
    {
        if(parent.ground) parent.xspeed = 0;
        else if(parent.climbing) parent.yspeed = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if (entityCanStep())
{
    depth = parent.depth - 1;
    
    if(powerPunchLock)
    {
        if(parent.ground) parent.xspeed = 0;
        else if(parent.climbing) parent.yspeed = 0;
        else if(groundPoundLatch &lt; 2)
        {
            if(powerStandStillLock) powerStandStillLock = lockPoolRelease(powerStandStillLock);
        }
        
        timer++;
        if(timer &gt; lockTimeMax + groundPoundLatch*6)
        {
            if(powerPunchLock) powerPunchLock = lockPoolRelease(powerPunchLock);
            if(powerStandStillLock) powerStandStillLock = lockPoolRelease(powerStandStillLock);
        }
        
        if(groundPoundLatch == 1)
        {
            if(!parent.ground) // jumpcancel the ground pound
            {
                groundPoundLatch = 0;
                
                // delete ground pound if it hasn't gone off yet
                var myBullet = noone;
                with(objPowerAdaptorPunch)
                {
                    if(type &gt;= 3 &amp;&amp; parent == other.parent) myBullet = self;
                }
                if(instance_exists(myBullet) &amp;&amp; myBullet.delay) with(myBullet) instance_destroy();
            }
        }
        else if(groundPoundLatch == 2)
        {
            if(!parent.ground)
            {
                if(timer &gt; 12)
                {
                    timer = 12;
                    parent.yspeed = 6*parent.gravDir;
                }
                else
                {
                    parent.xspeed = 0;
                    parent.yspeed = 0;
                }
            }
            else
            {
                groundPoundLatch = 1;
                if(hoverLock) hoverLock = lockPoolRelease(hoverLock);
            }
        }
    }
    else timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var existenceCheck = true;
var myObject = noone;

with(objPowerAdaptor)
{
    if(parent == other)
    {
        existenceCheck = false;
        myObject = self;
    }
}

if(existenceCheck) // Power Adaptor should now spawn itself
{
    var pow = fireWeapon(0,0,objPowerAdaptor,3,0,0,0);
    pow.powerSlideLock = 0;
    global.ammo[playerID, global.weapon[playerID]] = 0;
}
else  // when it exists, allow user to punch
{
    var chargeTime = myObject.charge;
    var initChargeTime = myObject.initCharge;
    
    if(!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; global.keyShootPressed[playerID] &amp;&amp; chargeTimer == 0)
    {
        i = fireWeapon(16,0,objPowerAdaptorPunch,3,0,0,0);
        i.spd = 4.5;
        
        if(!myObject.powerPunchLock)
        {
            myObject.powerPunchLock = lockPoolLock(PL_LOCK_SLIDE,PL_LOCK_SHOOT,PL_LOCK_CHARGE);
            myObject.powerPunchLock.targetInstance = self.id;
        }
        if(!myObject.powerStandStillLock)
        {
            myObject.powerStandStillLock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_CLIMB);
            myObject.powerStandStillLock.targetInstance = self.id;
        }
        if(ground) xspeed = 0;
        else if(climbing) yspeed = 0;
        
        playSFX(sfxBuster);
    }
    
    if(global.enableCharge)
    {
        if ((global.keyShoot[playerID] || (isSlide &amp;&amp; chargeTimer &gt; 0)) &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE))
        {
            if (!isShoot)
            {
                isCharge = true;
                
                if (!isSlide)
                {
                    initChargeTimer += 1;
                }
                
                if (initChargeTimer &gt;= initChargeTime)
                {
                    if (!chargeTimer)
                    {
                        playSFX(sfxCharging);
                    }
                    
                    chargeTimer++;
                    
                    if (chargeTimer &lt; chargeTime)
                    {
                        var chargeTimeDiv, chargeCol;
                        chargeTimeDiv = round(chargeTime / 3);
                        
                        if (chargeTimer &lt; chargeTimeDiv)
                        {
                            chargeCol = make_color_rgb(168, 0, 32); // Dark red
                        }
                        else if (chargeTimer &lt; chargeTimeDiv * 2)
                        {
                            chargeCol = make_color_rgb(228, 0, 88); // Red (dark pink)
                        }
                        else
                        {
                            chargeCol = make_color_rgb(248, 88, 152); // Light red (pink)
                        }
                        
                        if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                        {
                            global.outlineCol[playerID] = chargeCol;
                        }
                        else
                        {
                            global.outlineCol[playerID] = c_black;
                        }
                    }
                    else
                    {
                        if (chargeTimer == chargeTime)
                        {
                            audio_stop_sound(sfxCharging);
                            playSFX(sfxCharged);
                        }
                        if (!inked)
                        {
                            switch (floor(chargeTimer / 3 mod 3))
                            {
                                case 0: // Light blue helmet, black shirt, blue outline 
                                    global.primaryCol[playerID] = rushSecondaryCol;
                                    global.secondaryCol[playerID] = c_black;
                                    global.outlineCol[playerID] = rushPrimaryCol;
                                    break;
                                case 1: // Black helmet, blue shirt, light blue outline 
                                    global.primaryCol[playerID] = c_black;
                                    global.secondaryCol[playerID] = rushPrimaryCol;
                                    global.outlineCol[playerID] = rushSecondaryCol;
                                    break;
                                case 2: // Blue helmet, light blue shirt, blue outline 
                                    global.primaryCol[playerID] = rushPrimaryCol;
                                    global.secondaryCol[playerID] = rushSecondaryCol;
                                    global.outlineCol[playerID] = c_black;
                                    break;
                            }
                        }
                    }
                }
            }
        }
        else // Release the charge shot
        {
            if (!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer != 0 &amp;&amp; !isSlide)
            {
                /////////////////////
                // ACTUAL SHOOTING //
                /////////////////////
                
                if (chargeTimer &lt; chargeTime) // Half charge
                {
                    i = fireWeapon(16,0,objPowerAdaptorPunch,3,0,0,0);
                    i.spd = 4.5;
                    i.image_index = 2;
                    i.type = 1;
                    i.contactDamage = 3;
                    
                    if(!myObject.powerPunchLock)
                    {
                        myObject.powerPunchLock = lockPoolLock(PL_LOCK_SLIDE,PL_LOCK_SHOOT,PL_LOCK_CHARGE);
                        myObject.powerPunchLock.targetInstance = self.id;
                    }
                    if(!myObject.powerStandStillLock)
                    {
                        myObject.powerStandStillLock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_CLIMB);
                        myObject.powerStandStillLock.targetInstance = self.id;
                    }
                    if(ground) xspeed = 0;
                    else if(climbing) yspeed = 0;
                    
                    playSFX(sfxBuster);
                }
                else // Full charge
                {
                    i = fireWeapon(16,0,objPowerAdaptorPunch,3,0,0,0);
                    i.contactDamage = 4;
                    i.penetrate = 2;
                    i.pierces = 3;
                    if(myObject.powerEnableGroundPound &amp;&amp; yDir == gravDir &amp;&amp; !climbing)
                    {
                        if(ground)
                        {
                            i.spd = 0;
                            i.type = 3;
                            i.sprite_index = sprBigExplosion;
                            i.image_index = 0;
                            myObject.groundPoundLatch = 1;
                            i.delay = 12;
                            i.makeNew = 2;
                        }
                        else // hang in the air
                        {
                            if(!myObject.hoverLock)
                            {
                                myObject.hoverLock = lockPoolLock(PL_LOCK_GRAVITY,PL_LOCK_MOVE);
                                myObject.hoverLock.targetInstance = self.id;
                                xspeed = 0;
                                yspeed = 0;
                            }
                            i.spd = 0;
                            i.type = 4;
                            i.sprite_index = sprBigExplosion;
                            i.image_index = 0;
                            myObject.groundPoundLatch = 2;
                            i.delay = 1;
                            i.makeNew = 2;
                        }
                    }
                    else
                    {
                        i.spd = 4.5;
                        i.type = 2;
                        i.image_index = 4;
                        playSFX(sfxBusterCharged);
                    }
                    
                    if(!myObject.powerPunchLock)
                    {
                        myObject.powerPunchLock = lockPoolLock(PL_LOCK_SLIDE,PL_LOCK_SHOOT,PL_LOCK_CHARGE);
                        myObject.powerPunchLock.targetInstance = self.id;
                    }
                    if(!myObject.powerStandStillLock)
                    {
                        myObject.powerStandStillLock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_CLIMB);
                        myObject.powerStandStillLock.targetInstance = self.id;
                    }
                    if(ground) xspeed = 0;
                    else if(climbing) yspeed = 0;
                }
                
                // Reset all charging stuff
                chargeTimer = 0;
                initChargeTimer = 0;
                audio_stop_sound(sfxCharged);
                audio_stop_sound(sfxCharging);
                playerPalette(); // Reset the colors
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("POWER ADAPTOR", -2, -2, sprWeaponIconsPowerAdaptor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
