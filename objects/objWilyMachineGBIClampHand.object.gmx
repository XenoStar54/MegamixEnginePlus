<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWilyMachineGBIClampHand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 256;
healthpoints = healthpointsStart;

image_speed = 0;

blockCollision = 0;
contactDamage = 4;
respawn = 0;
itemDrop = -1;
despawnRange = -1;
grav = 0;

clampTimer = -120;
clampPhase = 0;
clampInterval = 186;
clampWait = 62;
clampSpd = 4;
clampPosX = -23;
clampPosY = -16;
clampDestX = xstart;
clampDestY = ystart;
clampDistX = 0;
clampDisty = 0;

motherObject = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(!instance_exists(motherObject) || motherObject.dead || motherObject == noone)
    {
        instance_destroy();
    }
    else
    {
        image_xscale = motherObject.image_xscale;
        image_yscale = motherObject.image_yscale;
        
        xstart = motherObject.x + image_xscale*clampPosX;
        ystart = motherObject.y + image_yscale*clampPosY;
        
        if(clampPhase == 0) // wait
        {
            xspeed = 0;
            yspeed = 0;
            clampTimer++;
            if(clampTimer &gt; clampInterval)
            {
                playSFX(sfxWanaan);
                clampTimer = 0;
                clampPhase++;
                if(target)
                {
                    clampDestX = bboxGetXCenterObject(target);
                    clampDestY = bboxGetYCenterObject(target);
                }
                else
                {
                    clampDestX = xstart + 128*image_xscale;
                    clampDestY = ystart;
                }
                clampDistX = clampDestX - x;
                clampDistY = clampDestY - y;
                xspeed = clampSpd*(clampDistX / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
                yspeed = clampSpd*(clampDistY / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
            }
            else if(clampTimer &gt; clampInterval - 24)
            {
                image_speed = 0.25;
            }
        }
        else if(clampPhase == 1) // go
        {
            if(abs(x - clampDestX) &lt; abs(xspeed) &amp;&amp; abs(y - clampDestY) &lt; abs(yspeed))
            {
                clampTimer = 0;
                clampPhase++;
                xspeed = 0;
                yspeed = 0;
            }
            else
            {
                xspeed = clampSpd*(clampDistX / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
                yspeed = clampSpd*(clampDistY / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
            }
        }
        else if(clampPhase == 2) // wait again
        {
            xspeed = 0;
            yspeed = 0;
            clampTimer++;
            if(clampTimer &gt; clampWait)
            {
                clampTimer = 0;
                clampPhase++;
                clampDestX = xstart;
                clampDestY = ystart;
                clampDistX = clampDestX - x;
                clampDistY = clampDestY - y;
                xspeed = clampSpd*(clampDistX / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
                yspeed = clampSpd*(clampDistY / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
            }
            else if(clampTimer &gt; clampWait - 24)
            {
                if(floor(image_index) == 0) image_speed = 0;
            }
        }
        else if(clampPhase == 3) // return
        {
            if(abs(x - clampDestX) &lt; abs(xspeed) &amp;&amp; abs(y - clampDestY) &lt; abs(yspeed))
            {
                clampTimer = 0;
                clampPhase = 0;
                xspeed = 0;
                yspeed = 0;
            }
            else
            {
                xspeed = clampSpd*(clampDistX / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
                yspeed = clampSpd*(clampDistY / sqrt((clampDistX*clampDistX)+(clampDistY*clampDistY)));
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 4;
healthpoints = healthpointsStart;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
