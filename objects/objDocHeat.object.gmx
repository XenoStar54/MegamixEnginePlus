<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDocHeat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskDocRobot</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 28;
healthpoints = healthpointsStart;

// though Doc Heat uses Heat Man's pattern, he has a unique intro.
introType = 0;
customPose = 1;
isFight = false;
introVar = 0;

contactDamage = 8;

ground = false;
attackTimer = 0;

phase = 0;
phaseTimer = 0;
targetX = 0;

// Health Bar
healthBarPrimaryColor[1] = 18;
healthBarSecondaryColor[1] = 34;

// Music
music = "Mega_Man_3.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 2);
enemyDamageValue(objBusterShotCharged, 4);
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 5);
enemyDamageValue(objTornadoBlow, 4);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 5);
enemyDamageValue(objBreakDash, 2);

// MaG48HMML
// Flame Mixer heals Heat Man
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objRainFlush, 6);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 0);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSakugarne, 4);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 2);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);

// Solar Blaze heals Heat Man
enemyDamageValue(objTopSpin, 5);
enemyDamageValue(objThunderWool, 1);

// Pharaoh Shot heals Heat Man
enemyDamageValue(objBlackHoleBomb, 2);
enemyDamageValue(objMagicCard, 2);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBlockDropper, 2);
enemyDamageValue(objIceSlasher, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xscl = image_xscale;
image_xscale=1;
event_inherited();
image_xscale=xscl;

if (entityCanStep())
{
    // this startIntro and isIntro stuff generates the little Doc Robot animation seen in MM3
    if (startIntro)
    {
        if(!instance_exists(objDocRobotIntro) &amp;&amp; introVar == 0)
        {
            a = instance_create(x, view_yview, objDocRobotIntro);
            a.docRobot = 6;
        }
        visible = true;
        isIntro = true;
    }
    if (isIntro)
    {
        if instance_exists(objDocRobotIntro)
        {
            if(abs(objDocRobotIntro.y - (y - 12)) &lt; 2)
            {
                introVar = 1;
                with(objDocRobotIntro)
                {
                    instance_destroy();
                }
            }
        }
        if(!instance_exists(objDocRobotIntro) &amp;&amp; introVar == 1)
        {
            isIntro = false;
            startIntro = false;
            canFillHealthBar = true;
            //isFight = true;
        }
    }
    // Fight Data
    if (isFight == true)
    {
        grav = 0.25;
        blockCollision = 1;
        sprite_index = sprDocHeat;
        
        var prevPhase = phase;
        
        if (!ground &amp;&amp; phase != 2)
            image_index = 13;
        else
            switch (phase)
            {
                // shooting
                case 0:
                    xspeed = 0;
                    image_index = 5;
                    if (phaseTimer &gt;= 8) // 16
                    {
                        image_index = 6;
                        if (phaseTimer &gt;= 16) // 32
                            image_index = 0;
                    }
                    if (phaseTimer == 8) // 16
                    {
                        // shoot
                        calibrateDirection();
                        var offset;
                        offset[0] = 0;
                        offset[1] = 32;
                        offset[2] = -20;
                        if (!instance_exists(target))
                            break;
                        for (var i = 0; i &lt; 3; i++)
                        {
                            with (instance_create(x + 8 * image_xscale, y, objHeatManFire))
                            {
                                isDoc = true;
                                var offs = other.image_xscale * (other.target.x - x) + offset[i];
                                var destX = x + offs * other.image_xscale;
                                var time = 50;
                                xspeed = (destX - x) / time;
                                yspeed = -(grav * time) / 2;
                            }
                        }
                    }
                    
                    // if time runs out, reset phase
                    if (phaseTimer &gt;= 120)
                    {
                        phaseTimer = 0;
                    }
                    
                    // if hit, switch phase
                    if (iFrames &gt; 0)
                    {
                        phase = 1;
                    }
                    break;
                // flame
                case 1:
                    xspeed = 0;
                    if (phaseTimer &lt;= 22)
                        image_index = 1;
                    else
                    {
                        image_index = 3 + (phaseTimer div 3) mod 2;
                        if (phaseTimer == 23)
                        {
                            playSFX(sfxHeatManTackle);
                        }
                    }
                    if (phaseTimer &gt;= 120)
                    {
                        phase = 2;
                    }
                    break;
                // atomic dash
                case 2:
                    if (phaseTimer == 0)
                    {
                        y -= 8;
                        grav = 0;
                    
                        if (instance_exists(target))
                            targetX = target.x;
                        else
                        {
                            // random destination
                            targetX = view_xview[0] + random(view_wview[0]);
                        }
                        
                        // no available space; pick target at random.
                        var i = 32;
                        while (checkSolid(targetX - x, 0) &amp;&amp; i &gt; 0)
                        {
                            targetX = view_xview[0] + random(view_wview[0]);
                            i--;
                        }
                        image_xscale = 1;
                        if (targetX &lt; x)
                            image_xscale = -1;
                        deTimer = 0;
                        
                        // give up
                        if (i == 0)
                            phase = 0;
                    }
                    image_index = 7 + (phaseTimer div 5);
                    
                    // Play tackle sound
                    if ((image_index == 7) &amp;&amp; (!audio_is_playing(sfxHeatManTackle)))
                    {
                        playSFX(sfxHeatManTackle);
                    }
                    
                    if (image_index &gt;= 10)
                    {
                        image_index = 10 + (phaseTimer div 4) mod 3;
                        xspeed = 5 * image_xscale;
                        grav = 0;
                    }
                    if (((x - targetX) * image_xscale &gt;= 0) || xcoll!=0)
                    {
                        // reached destination; stop
                        xspeed = 0;
                        
                        // grav = 0.25;
                        deTimer += 1;
                        image_index = 9 - (deTimer div 5); // 9 - (phaseTimer div 5);
                        if (image_index &lt; 7)
                        {
                            image_index = 13;
                            grav = 0.25;
                            y += 8;
                            calibrateDirection();
                            phase = 3;
                            yspeed = 8;
                        }
                    }
                    break;
                // Animation for turning back
                case 3:
                    if (ground)
                    {
                      
                        attackTimer++;
                        if (attackTimer == 4)
                        {
                            image_index = 1;
                            image_speed = 0.2;
                        }
                        if (image_index == 3)
                        {
                            image_index = 0;
                            image_speed = 0;
                        }
                        if (attackTimer &gt;= 20)
                        {
                            phase = 0;
                            attackTimer = 0;
                        }
                        
                        // if hit, switch phase
                        if (iFrames &gt; 0)
                        {
                            phase = 1;
                        }
                    }
                    break;
            }
        
        phaseTimer++;
        
        // new phase -- reset timer
        if (prevPhase != phase)
        {
            phaseTimer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// guard if on fire etc
if (phase == 2)
{
    other.guardCancel = 2;
}
if (phase == 1)
{
    other.guardCancel = 1;
}

if ((other.object_index == objFlameMixer) || (other.object_index == objSolarBlaze)
    || (other.object_index == objPharaohShot))
{
    iFrames = 0;
    with (other)
    {
        event_user(EV_DEATH);
    }
    other.guardCancel = 2;
    healthpoints += 28;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Destroy Atomic Fire on death
with (objHeatManFire)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
