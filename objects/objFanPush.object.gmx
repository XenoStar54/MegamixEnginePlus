<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWindUp</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

isSolid = 0;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

despawnRange = -1;
respawnRange = -1;

image_speed = 0;

dir = 0;
velocity = 0;
playSound = true;

range = 7*16;
blockedBySolid = 1;

overreachThreshold = 3*16;
oldBehavior = 1;

useSwitchFlag = 0;
myFlag = 999;

acceleration = 0.1;
maxSpd = 3;

active = 1;

ownerFan = noone;

for(var i = 0; i &lt; 4; i++) prevTouched[i] = 0;

image_alpha = 0.4;

waterFaction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // decide how long I should be
    switch(dir)
    {
        case 0: // up
            image_xscale = 1;
            image_yscale = 0;
            var keepExtending = 1;
            while(keepExtending &amp;&amp; -image_yscale &lt; range/16)
            {
                image_yscale--;
                if(blockedBySolid)
                {
                    if(checkSolid(0,-1)) keepExtending = 0;
                    /*if(waterFaction)
                    {
                        var water = instance_place(x,y,objWater);
                        if(!water || !rectangle_in_rectangle(bbox_left,bbox_top-1,bbox_right-1,bbox_bottom-1,water.bbox_left,water.bbox_top,water.bbox_right-1,water.bbox_bottom-1))
                        {
                            keepExtending = 0;
                        }
                    }
                    else
                    {
                        if(place_meeting(x,y-1,objWater)) keepExtending = 0;
                    }*/
                }
            }
            break;
        case 1: // down
            image_xscale = 1;
            image_yscale = 0;
            var keepExtending = 1;
            while(keepExtending &amp;&amp; image_yscale &lt; range/16)
            {
                image_yscale++;
                if(blockedBySolid)
                {
                    if(checkSolid(0,1)) keepExtending = 0;
                    /*if(waterFaction)
                    {
                        var water = instance_place(x,y,objWater);
                        if(!water || !rectangle_in_rectangle(bbox_left,bbox_top,bbox_right-1,bbox_bottom,water.bbox_left,water.bbox_top,water.bbox_right-1,water.bbox_bottom-1))
                        {
                            keepExtending = 0;
                        }
                    }
                    else
                    {
                        if(place_meeting(x,y+1,objWater)) keepExtending = 0;
                    }*/
                }
            }
            break;
        case 2: // right
            image_xscale = 0;
            image_yscale = 1;
            var keepExtending = 1;
            while(keepExtending &amp;&amp; image_xscale &lt; range/16)
            {
                image_xscale++;
                if(blockedBySolid)
                {
                    if(checkSolid(1,0)) keepExtending = 0;
                    /*if(waterFaction)
                    {
                        var water = instance_place(x,y,objWater);
                        if(!water || !rectangle_in_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom-1,water.bbox_left,water.bbox_top,water.bbox_right-1,water.bbox_bottom-1))
                        {
                            keepExtending = 0;
                        }
                    }
                    else
                    {
                        if(place_meeting(x+1,y,objWater)) keepExtending = 0;
                    }*/
                }
            }
            break;
        case 3: // left
            image_xscale = 0;
            image_yscale = 1;
            var keepExtending = 1;
            while(keepExtending &amp;&amp; -image_xscale &lt; range/16)
            {
                image_xscale--;
                if(blockedBySolid)
                {
                    if(checkSolid(-1,0)) keepExtending = 0;
                    /*if(waterFaction)
                    {
                        var water = instance_place(x,y,objWater);
                        if(!water || !rectangle_in_rectangle(bbox_left-1,bbox_top,bbox_right-1,bbox_bottom-1,water.bbox_left,water.bbox_top,water.bbox_right-1,water.bbox_bottom-1))
                        {
                            keepExtending = 0;
                        }
                    }
                    else
                    {
                        if(place_meeting(x-1,y,objWater)) keepExtending = 0;
                    }*/
                }
            }
            break;
    }
    
    // push
    var reset = 1;
    var canPush = false;
    with(ownerFan) if(insideSection(bboxGetXCenter(),bboxGetYCenter())) canPush = true;
    if(active &amp;&amp; canPush &amp;&amp; instance_exists(objMegaman))
    {
        switch (dir)
        {
            case 0: // up 
                with (instance_place(x,y,objMegaman))
                {
                    with (other)
                    {
                        reset = 0;
                        if(other.yspeed &lt; velocity) velocity = other.yspeed;
                        if (collision_rectangle(bbox_left, bbox_bottom,
                            bbox_right - 1, bbox_top + overreachThreshold, other, 0, 1)
                            || (velocity &lt;= 0) || overreachThreshold == 0)
                        {
                            if (velocity &gt; -maxSpd)
                            {
                                velocity -= acceleration;
                            }
                            if (other.yspeed &lt; velocity)
                            {
                                velocity = other.yspeed;
                            }
                        }
                        else if (velocity &lt; maxSpd)
                        {
                            velocity += 0.1;
                            if (other.yspeed &lt; velocity)
                            {
                                velocity = other.yspeed;
                            }
                        }
                        
                        var touchesMyFan = 0;
                        with(other)
                        {
                            if(other.ownerFan &amp;&amp; place_meeting(x,y+1,other.ownerFan)) touchesMyFan = 1;
                        }
                        if ((!other.ground || velocity &lt; 0)
                            || touchesMyFan
                            || other.yspeed &gt; velocity)
                        {
                            other.yspeed = velocity;
                        }
                        else if (velocity &gt; 0)
                        {
                            velocity = 0;
                        }
                        if (velocity &gt;= 0)
                        {
                            playSound = true;
                        }
                        else if (playSound)
                        {
                            playSFX(sfxFan);
                            playSound = false;
                        }
                    }
                }
                if(reset)
                {
                    velocity = maxSpd*oldBehavior;
                }
                break;
            case 1: // down 
                with (instance_place(x,y,objMegaman))
                {
                    with (other)
                    {
                        reset = 0;
                        if (!other.ground &amp;&amp; other.yspeed &lt; 7+maxSpd)
                        {
                            other.yspeed = other.yspeed + acceleration;
                        }
                        if (other.yspeed &gt;= 0)
                        {
                            playSound = true;
                        }
                        else if (playSound)
                        {
                            playSFX(sfxFan);
                            playSound = false;
                        }
                    }
                }
                if(reset) velocity = 0;
                break;
            case 2: // right 
                with (instance_place(x,y,objMegaman))
                {
                    with (other)
                    {
                        reset = 0;
                        if (collision_rectangle(bbox_left, bbox_top,
                            bbox_right - overreachThreshold, bbox_bottom - 1, other, 0, 1) 
                            || overreachThreshold == 0)
                        {
                            if (velocity &gt; -maxSpd)
                            {
                                velocity -= acceleration;
                            }
                            if (velocity &lt; -1)
                            {
                                playSound = true;
                            }
                            else if (playSound)
                            {
                                playSFX(sfxFan);
                                playSound = false;
                            }
                        }
                        else if (velocity &lt; 0)
                        {
                            velocity += 0.1;
                        }
                    }
                    
                    if (isSlide)
                    {
                        if (xspeed &lt; -1)
                        {
                            xspeed = xspeed / 2;
                        }
                        if (xspeed &gt; 0 &amp;&amp; xspeed &lt; other.maxSpd)
                        {
                            xspeed = other.maxSpd;
                        }
                    }
                    else
                    {
                        var realShiftAmount = -other.velocity/2;
                        shiftObject(realShiftAmount, 0, 1);
                    }
                }
                if(reset)
                {
                    if (velocity &lt; 0) velocity += 0.1;
                }
                break;
            case 3: // left 
                with (instance_place(x,y,objMegaman))
                {
                    with (other)
                    {
                        reset = 0;
                        if (collision_rectangle(bbox_left + overreachThreshold, bbox_top,
                            bbox_right, bbox_bottom - 1, other, 0, 1) 
                            || overreachThreshold == 0)
                        {
                            if (velocity &gt; -maxSpd)
                            {
                                velocity -= acceleration;
                            }
                            if (velocity &lt; -1)
                            {
                                playSound = true;
                            }
                            else if (playSound)
                            {
                                playSFX(sfxFan);
                                playSound = false;
                            }
                        }
                        else if (velocity &lt; 0)
                        {
                            velocity += 0.1;
                        }
                    }
                    
                    if (isSlide)
                    {
                        if (xspeed &gt; 1)
                        {
                            xspeed = xspeed / 2;
                        }
                        if (xspeed &lt; 0 &amp;&amp; xspeed &gt; -other.maxSpd)
                        {
                            xspeed = -other.maxSpd;
                        }
                    }
                    else
                    {
                        var realShiftAmount = other.velocity/2;
                        shiftObject(realShiftAmount, 0, 1);
                    }
                }
                if(reset)
                {
                    if (velocity &lt; 0) velocity += 0.1;
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
