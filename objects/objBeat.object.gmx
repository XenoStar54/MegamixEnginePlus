<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBeat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 0;
reflectable = 0;
pierces = 2;
penetrate = 1;
contactDamage = 0;
behaviorType = 1; // target nearest
attackDelay = 20;

// ai
isWeapon = true;
rescue = false;
phase = 0;
timer = 0;
targetX = x;
targetY = y;
angle = 0;
spd = 0;
playerLock = noone;
playerX = 0;
playerY = 0;

// constants
contactDmg = 2;
rescueTime = 240;
rescueFreakoutTime = rescueTime - 90;
moveSpd = 2;
catchMoveSpd = moveSpd * 2;
rescueMoveSpd = 0.5;
wpnID = global.weaponID[? object_index];
restXOffset = -16;
restYOffset = -24;
turnSpd = 12;

// animation
imgSpd = 0.125;
imgIndex = 0;
blinkCounter = 0;

// vehicle vars
weaponsAllowed = true;
shootYOffset = 0;
riderPhysicsAllowed = false;
physicsLock = false;

// sfx
playSFX(sfxBeat);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playerLock != noone)
{
    lockPoolRelease(playerLock);
    playerLock = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // do angled movement
    shiftObject(spd * cos(degtorad(angle)), spd * -sin(degtorad(angle)), blockCollision);
    
    // animation
    imgIndex += imgSpd + (rescue &amp;&amp; timer &gt;= rescueFreakoutTime) * imgSpd;
    if (blinkCounter &gt;= 3 &amp;&amp; !(rescue &amp;&amp; timer &gt;= rescueFreakoutTime))
    {
        // blink animation
        if (imgIndex &gt;= 4)
        {
            // reset
            imgIndex = 0;
            blinkCounter = 0;
        }
        else if (imgIndex &gt;= 2 &amp;&amp; imgIndex &lt; 3)
        {
            // go to blink frame instead of normal flap frame
            imgIndex++;
        }
    }
    else
    {
        if (!rescue || timer &lt; rescueFreakoutTime)
        {
            // normal animation
            if (imgIndex &gt;= 3)
            {
                imgIndex = 0;
                blinkCounter++;
            }
        }
        else
        {
            // freakout animation
            if (imgIndex &gt;= 7)
            {
                imgIndex = 4;
            }
        }
    }
    
    // change direction we're facing
    if (spd != 0)
    {
        if (withinDegreeRange(270, true, 90, true, angle))
        {
            image_xscale = 1;
        }
        else
        {
            image_xscale = -1;
        }
    }
    
    // behavior
    if (rescue)
    {
        // beat call behavior
        contactDamage = 0;
        
        switch (phase)
        {
            // fly down to catch player
            case 0:
                if (instance_exists(parent))
                {
                     with (parent)
                     {
                        other.targetX = bboxGetXCenter();
                        other.targetY = bbox_top - 8;
                        other.playerX = x;
                        other.playerY = y;
                     }
                }
                
                prevAngle = angle;
                angle = point_direction(x, y, targetX, targetY);
                if (spd != catchMoveSpd) { prevAngle = angle; } // setup
                spd = catchMoveSpd;
                
                // reached target
                if (!withinDegreeRange(prevAngle - 90, false, prevAngle + 90, false, angle))
                {
                    x = targetX;
                    y = targetY;
                    spd = 0;
                    phase++;
                }
                
                break;
            
            // fly up from pit
            case 1:
                if (instance_exists(parent))
                {
                    with (parent)
                    {
                        // don't stick to floors (hacky, I know)
                        if (other.playerX != 0 &amp;&amp; other.playerY != 0)
                        {
                            x = other.playerX;
                            y = other.playerY;
                        }
                        
                        // move
                        shiftObject(0, -image_yscale, blockCollision);
                        
                        other.x = bboxGetXCenter();
                        if (image_yscale &gt; 0)
                        {
                            other.y = bbox_top - 8;
                        }
                        else
                        {
                            other.y = bbox_bottom + 8;
                        }
                        
                        other.image_xscale = image_xscale;
                        other.image_yscale = image_yscale;
                        other.playerX = x;
                        other.playerY = y;
                        
                        vehicle = other.id; // the bird says: VROOM VROOM
                    }
                }
                
                timer++;
                if (timer &gt;= 40)
                {
                    //this was set to false in playerMovement() in the code that
                    // activates rescue mode
                    if (instance_exists(parent))
                    {
                        parent.canHit = true;
                    }
                    
                    timer = 0;
                    phase++;
                }
                
                break;
            
            // player controls
            case 2:
                timer++;
                
                // switch to freakout animation
                if (timer &gt;= rescueFreakoutTime)
                {
                    if (imgIndex &lt; 4)
                    {
                        if (imgIndex &gt;= 3)
                        {
                            imgIndex--; // account for blink frame
                        }
                        
                        imgIndex += 4;
                        blinkCounter = 0; // reset blink anim
                    }
                }
                
                // movement
                if (instance_exists(parent))
                {
                    with (parent)
                    {
                        // don't stick to floors (hacky, I know)
                        if (other.playerX != 0 &amp;&amp; other.playerY != 0)
                        {
                            x = other.playerX;
                            y = other.playerY;
                        }
                        
                        // move
                        var xDir = global.keyRight[playerID] - global.keyLeft[playerID];
                        var yDir = global.keyDown[playerID] - global.keyUp[playerID];
                        
                        shiftObject(xDir * other.rescueMoveSpd, yDir * other.rescueMoveSpd, true);
                        
                        // no freely exploring the everlasting darkness
                        if (image_yscale &gt; 0)
                        {
                            if (bbox_top &gt; view_yview[0] + view_hview[0])
                            {
                                y = view_yview[0] + view_hview[0] + (y - bbox_top)
                            }
                        }
                        else
                        {
                            if (bbox_bottom &lt; view_yview[0])
                            {
                                y = view_yview[0] - (bbox_bottom - y);
                            }
                        }
                        
                        // stick to player's head
                        other.x = bboxGetXCenter();
                        if (image_yscale &gt; 0)
                        {
                            other.y = bbox_top - 8;
                        }
                        else
                        {
                            other.y = bbox_bottom + 8;
                        }
                        
                        other.image_xscale = image_xscale;
                        other.image_yscale = image_yscale;
                        other.playerX = x;
                        other.playerY = y;
                        
                        vehicle = other.id; // the bird says: VROOM VROOM
                    }
                }
                
                // drop player
                if (timer &gt;= rescueTime || global.keyJumpPressed[playerID])
                {
                    // player lock is created in playerMovement() in the code that
                    // activates rescue mode
                    if (playerLock != noone)
                    {
                        lockPoolRelease(playerLock);
                        playerLock = noone;
                    }
                    
                    if (instance_exists(parent))
                    {
                        parent.vehicle = noone;
                    }
                    
                    // go back to normal animation
                    if (timer &gt;= rescueFreakoutTime)
                    {
                        imgIndex -= 4;
                    }
                    
                    // next
                    phase = 0;
                    timer = 0;
                    rescue = false;
                }
                
                break;
        }
    }
    else if (!isWeapon || global.ammo[playerID, wpnID] &lt;= 0)
    {
        // fly away
        contactDamage = 0;
        spd = 0;
        yspeed = -moveSpd * image_yscale;
        xspeed = 0;
        
        if (bbox_right &lt; view_xview[0] || bbox_left &gt; view_xview[0] + view_wview[0]
            || bbox_bottom &lt; view_yview[0] || bbox_top &gt; view_yview[0] + view_hview[0])
        {
            instance_destroy();
        }
    }
    else
    {
        // weapon behavior
        contactDamage = contactDmg;
        xspeed = 0;
        yspeed = 0;
        
        if (instance_exists(target))
        {
            with (target)
            {
                other.targetX = bboxGetXCenter();
                other.targetY = bboxGetYCenter();
            }
            
            // b-line if not moving currently
            if (spd == 0)
            {
                angle = point_direction(x, y, targetX, targetY);
            }
            
            spd = moveSpd;
        }
        else
        {
            // follow player
            if (instance_exists(parent))
            {
                with (parent)
                {
                    other.targetX = x + other.restXOffset * image_xscale;
                    other.targetY = y + other.restYOffset * image_yscale;
                }
                
                // reached rest position
                if (spd != 0)
                {
                    if (point_distance(x, y, targetX, targetY) &lt;= moveSpd + 1)
                    {
                        x = targetX;
                        y = targetY;
                        spd = 0; // stop moving
                        
                        if (instance_exists(parent))
                        {
                            image_xscale = parent.image_xscale;
                        }
                    }
                }
                else if (x != targetX || y != targetY)
                {
                    spd = moveSpd;
                }
            }
        }
            
        // tracking
        if (spd != 0)
        {
            var targAngle = point_direction(x, y, targetX, targetY);
            if (withinDegreeRange(angle, false, angle + 180, true, targAngle))
            {
                angle += turnSpd;
            }
            else
            {
                angle -= turnSpd;
            }
        }
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_WEAPON_CONTROL
var canSpawn = false;
var beat = noone;
var convertBeat = false; // tfw spanish inquisition
with (objBeat)
{
    if (playerID == other.playerID)
    {
        beat = id;
        
        if (!isWeapon)
        {
            convertBeat = true;
        }
    }
}

canSpawn = (!instance_exists(beat) || convertBeat) &amp;&amp; global.ammo[playerID, global.weapon[playerID]] &gt; 0;

if (canSpawn)
{
    // spawn beat
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
    {
        if (!convertBeat)
        {
            i = fireWeapon(0, (view_yview[0] - 8) - y, objBeat, 1, 0, 0, 0);
        }
        else
        {
            beat.isWeapon = true;
            playSFX(sfxBeat);
        }
    }
}

// normal firing
scrBusterControl(false, true, !canSpawn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_WEAPON_SETUP
weaponSetup("BEAT", make_color_rgb(0, 112, 236), make_color_rgb(56, 184, 248), sprWeaponIconsBeat);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_ATTACK
if (global.damage != 0 &amp;&amp; isWeapon
    &amp;&amp; global.weapon[playerID] == wpnID)
{
    // drain weapon energy    
    global.ammo[playerID, wpnID] = max(0, global.ammo[playerID, wpnID] - 2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
