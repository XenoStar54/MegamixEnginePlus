<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprScreenWrapVertical</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/// moves entities to the other edge of the screen
// warning: might cause clipping

// force self to be on screen edge
x = floor(x/view_wview)*view_wview;
y = floor(y/view_hview)*view_hview;
image_yscale = 1;
image_xscale = floor(image_xscale);

// don't ever screenwrap those
banList[0] = objMM2Conveyor;

// entities that can wrap around only a set amount of times
limitedWrapIndex[0] = prtPlayerProjectile;
limitedWrapIndex[1] = prtEnemyProjectile;

limitedWrapInstance[0] = noone;

limitedWrapCount[0] = 0;

limitedWrapMax = 2;

drawMe = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if((y mod view_hview == 0) &amp;&amp; x == global.sectionLeft &amp;&amp; y == global.sectionTop &amp;&amp; insideView() &amp;&amp; !instance_exists(objSectionSwitcher))
{
    for(var i = 0; i &lt; array_length_1d(limitedWrapInstance); i++)
    {
        if(!instance_exists(limitedWrapInstance[i]) || limitedWrapInstance[i].dead)
        {
            limitedWrapInstance[i] = noone;
        }
    }
    
    // check for entities touching it
    with(prtEntity) if(place_meeting(x,y-8,other) || place_meeting(x,y,other) || place_meeting(x,y+8,other))
    {
        // filter for banned entities
        var banCheck = false;
        for(var i = 0; i &lt; array_length_1d(other.banList); i++)
        {
            if(instance_exists(other.banList[i]) &amp;&amp; other.banList[i] != noone &amp;&amp; !other.banList[i].dead)
            {
                if(object_index == other.banList[i].object_index || object_get_parent(object_index) == other.banList[i].object_index)
                {
                    banCheck = true;
                }
            }
        }
        var limitedCheck = false;
        for(var i = 0; i &lt; array_length_1d(other.limitedWrapIndex); i++)
        {
            if(instance_exists(other.limitedWrapIndex[i]) &amp;&amp; other.limitedWrapIndex[i] != noone &amp;&amp; !other.limitedWrapIndex[i].dead)
            {
                if(object_index == other.limitedWrapIndex[i].object_index || object_get_parent(object_index) == other.limitedWrapIndex[i].object_index)
                {
                    limitedCheck = true;
                }
            }
        }
        if(!banCheck)
        {
            // eligible for wrapping: WRAP
            // sanitize your level layout before doing this, please
            var eligible = false;
            if(limitedCheck)
            {
                var onList = false;
                for(var i = 0; i &lt; array_length_1d(other.limitedWrapInstance); i++)
                {
                    if(other.limitedWrapInstance[i] != noone &amp;&amp; other.limitedWrapInstance[i] == id)
                    {
                        onList = true;
                        i = array_length_1d(other.limitedWrapInstance);
                    }
                }
                if(!onList)
                {
                    for(var i = 0; i &lt; array_length_1d(other.limitedWrapInstance); i++)
                    {
                        if(other.limitedWrapInstance[i] == noone)
                        {
                            other.limitedWrapInstance[i] = id;
                            other.limitedWrapCount[i] = 0;
                            onList = true;
                            i = array_length_1d(other.limitedWrapInstance);
                        }
                    }
                }
                if(!onList)
                {
                    other.limitedWrapInstance[array_length_1d(other.limitedWrapInstance)] = id;
                    other.limitedWrapCount[array_length_1d(other.limitedWrapInstance)] = 0;
                    onList = true;
                }
                if(array_length_1d(other.limitedWrapInstance) &gt; array_length_1d(other.limitedWrapCount))
                {
                    for(var i = array_length_1d(other.limitedWrapCount); i &lt; array_length_1d(other.limitedWrapInstance); i++) other.limitedWrapCount[i] = 0;
                }
                if(onList)
                {
                    for(var i = 0; i &lt; array_length_1d(other.limitedWrapInstance); i++)
                    {
                        if(other.limitedWrapInstance[i] != noone &amp;&amp; other.limitedWrapInstance[i] == id)
                        {
                            if(other.limitedWrapCount[i] &lt; other.limitedWrapMax)
                            {
                                eligible = true;
                                var deduce = false;
                                if(bboxGetYCenter() &lt; other.y) deduce = true;
                                else if(bboxGetYCenter() &gt; other.y + view_hview) deduce = true;
                                if(deduce) other.limitedWrapCount[i]++;
                                i = array_length_1d(other.limitedWrapInstance);
                            }
                        }
                    }
                }
            }
            else eligible = true;
            if(eligible)
            {
                if(bboxGetYCenter() &lt; other.y) y += view_hview;
                else if(bboxGetYCenter() &gt; other.y + view_hview) y -= view_hview;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawMe) drawSelf();

if((y mod view_hview == 0) &amp;&amp; x == global.sectionLeft &amp;&amp; y == global.sectionTop &amp;&amp; insideView() &amp;&amp; !instance_exists(objSectionSwitcher))
{
    // check for entities touching it
    with(prtEntity) if(place_meeting(x,y-8,other) || place_meeting(x,y,other) || place_meeting(x,y+8,other))
    {
        // filter for banned entities
        var banCheck = false;
        for(var i = 0; i &lt; array_length_1d(other.banList); i++)
        {
            if(instance_exists(other.banList[i]) &amp;&amp; other.banList[i] != noone &amp;&amp; !other.banList[i].dead)
            {
                if(object_index == other.banList[i].object_index || object_get_parent(object_index) == other.banList[i].object_index)
                {
                    banCheck = true;
                }
            }
        }
        var eligible = true;
        for(var i = 0; i &lt; array_length_1d(other.limitedWrapInstance); i++)
        {
            if(other.limitedWrapInstance[i] == id &amp;&amp; other.limitedWrapCount[i] &gt;= other.limitedWrapMax) eligible = false;
        }
        if(!banCheck &amp;&amp; eligible)
        {
            // eligible for wrapping: draw copypastes of self a screen height away
            y += view_hview;
            event_perform(ev_draw,0);
            y -= view_hview*2;
            event_perform(ev_draw,0);
            y += view_hview;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
