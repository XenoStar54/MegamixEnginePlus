<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM2ConveyorIcon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>sprMM2ConveyorIcon</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    Instructions:
    Change its xscale from the editor to set its direction and stretch it to the sides 
    until it has the size you want
*/
event_inherited();

//@cc Total amount of frames per sub image group, 2 by default
animFrames = 2;

animTime = 5;

canHit = false;
isSolid = 1;
hasBelt=false;

respawn = true;

grav = 0;
blockCollision = 0;

respawnRange = -1;
despawnRange = -1;
shiftVisible = 1;
bubbleTimer = -1;

dir = sign(image_xscale);

if (image_xscale &lt; 0)
{
    image_xscale = abs(image_xscale);
    x -= sprite_width;
    xstart = x;
}
if(image_yscale&lt;0)
{
    image_yscale=abs(image_yscale);
    y -= sprite_height;
    ystart = y;
}

spd = 1; // The speed the player moves at when standing on the conveyor belt

imgalarm = 0;
img = 0;

sprite_index = sprMM2Conveyor;

//@cc: when true, sprite frames on the bottom will be used for left-facing conveyor
// ONLY USE FOR 2-TILE CONVEYORS PLEASE
useBelowFramesForLeft = true;

// merge conveyor belt objects if this one is the leftmost object in the chain
if (dir == 1)
{
    if (!place_meeting(x - 16, y, object_index))
    {
        while (place_meeting(x + 16, y, object_index))
        {
            with (instance_place(x + 16, y, object_index))
            {
                instance_destroy();
            }
            image_xscale += 1;
        }
    }
}

// entities ignored by the conveyor
ignoreList[0] = objCrusher;
ignoreList[1] = objOshitsuOsarettsu;
ignoreList[2] = objMetalMan;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen &amp;&amp; !dead &amp;&amp; !global.timeStopped)
{
    var exspd = spd * dir;
    
    if (exspd != 0)
    {
        with(prtEntity)
        {
            var moveEntity = 1;
            with(other)
            {
                for(var i = 0; i &lt; array_length_1d(ignoreList); i++)
                {
                    if(instance_exists(ignoreList[i]) &amp;&amp; ignoreList[i] != noone)
                    {
                        if(other.object_index == ignoreList[i].object_index)
                        {
                            moveEntity = 0;
                        }
                    }
                }
            }
            exspd *= moveEntity;
            
            if (blockCollision &amp;&amp; !dead &amp;&amp; ground &amp;&amp; grav != 0)
            {
                if(place_meeting(x,y+2*sign(grav), other))
                {
                    if(!other.hasBelt)
                        shiftObject(exspd, 0, 1);    
                    else
                        shiftObject(exspd*sign(grav), 0, 1);  
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((!global.frozen &amp;&amp; !global.timeStopped) || instance_exists(objSectionSwitcher))
{
    imgalarm += 1;
    if (imgalarm &gt;= animTime)
    {
        imgalarm = 0;
        img = (img+1) mod animFrames;
    }
}

var imgadd;

for (var i = 0; i &lt; image_xscale; i += 1)
{
    var _dimg = 2;
    if(image_xscale == 1) _dimg = 0;
    else if(i == 0) _dimg = 1;
    else if(i == abs(image_xscale)-1) _dimg = 3;
    if(useBelowFramesForLeft &amp;&amp; dir &lt; 0) draw_sprite_part_ext(sprite_index,img,16*(_dimg),16,16,32,bbox_left+i*16,y,1,image_yscale,c_white,1);
    else draw_sprite_part_ext(sprite_index,img,16*(_dimg),0,16,16,bbox_left+i*dir*16+(dir&lt;0)*(abs(image_xscale)*16),y,dir,image_yscale,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
