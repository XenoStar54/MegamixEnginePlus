<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCountBombNEO</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

despawnRange = -1;
bubbleTimer = -1;
grav = 0;
storeGrav = 0.25;
isSolid = 1;
itemDrop = -1;

groundCheck = 0;

phase = 0;
timer = 0;
//@cc: set timerDisplayInit to the number you want the bomb to display
timerDisplayInit = 3;
timerDisplay = timerDisplayInit;
//@cc: set walkDirInit to whichever direction you want the bomb to walk; if 0, it won't walk
walkDirInit = 0;
walkDir = walkDirInit;

spriteNormal = sprCountBombNEO;
spriteWalk = sprCountBombNEOWalk;
spriteWalkPressed = sprCountBombNEOWalkPressed;
spriteNum = sprCountBombNEOFont;

runsIntoWall = 0;
keepsRunningWhenFalling = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    var stepCheck = false;
    
    if(groundCheck)
    {
        with(objMegaman) if(ground &amp;&amp; place_meeting(x,y+gravDir,other) &amp;&amp; !place_meeting(x,y,other))
        {
            with(other)
            {
                stepCheck = 1;
            }
        }
    }
    
    if(phase == 0) // wait to be stepped on
    {
        image_index = 0;
        
        if(stepCheck)
        {
            event_user(0);
            image_index = 1;
        }
    }
    else if(phase == 1) // got stepped on
    {
        xspeed = 0;
        yspeed = 0;
        if(walkDir == 0)
        {
            var prevTimerDisplay = timerDisplay;
            timer++;
            
            if(timer == 4) playSFX(sfxCountBomb);
            
            if(timer &gt;= 32)
            {
                timerDisplay--;
                timer = 0;
            }
            
            if(stepCheck)
            {
                image_index = 1;
                event_user(0);
                if(prevTimerDisplay == timerDisplay) timerDisplay--;
            }
        }
        else
        {
            timer++;
            if(image_index &lt; 3)
            {
                image_index = floor(3*timer/20);
            }
            else
            {
                grav = abs(storeGrav)*image_yscale;
                phase = 2;
                timer = 0;
            }
        }
    }
    else if(phase == 2) // recoil from hitting the ground
    {
        if(ground)
        {
            image_index = 4;
            timer++;
            if(timer == 4) playSFX(sfxCountBomb);
            
            if(stepCheck &amp;&amp; timer &gt;= 4)
            {
                image_index = 3;
                event_user(0);
                timerDisplay--;
            }
            
            if(timer &gt;= 32)
            {
                timerDisplay--;
                timer = 0;
                phase = 3;
            }
        }
    }
    else if(phase == 3) // now walk
    {
        if(checkSolid(walkDir,0) &amp;&amp; !runsIntoWall) walkDir = -walkDir;
        xspeed = 1.5*walkDir;
        timer++;
        
        if(timer == 4) playSFX(sfxCountBomb);
        
        if((!ground &amp;&amp; !keepsRunningWhenFalling) || stepCheck)
        {
            image_index = 3;
            event_user(0);
            timerDisplay--;
        }
        
        if(timer &gt;= 32)
        {
            timer = 0;
            timerDisplay--;
        }
        
        if(timer mod 32 &lt; 8) image_index = 5;
        else if(timer mod 32 &lt; 16) image_index = 4;
        else if(timer mod 32 &lt; 24) image_index = 6;
        else if(timer mod 32 &lt; 32) image_index = 4;
    }
    
    groundCheck = true;
    with(objMegaman) if(ground &amp;&amp; place_meeting(x,y+gravDir,other) &amp;&amp; !place_meeting(x,y,other))
    {
        other.groundCheck = false;
    }
    
    if(walkDir == 0) image_index = !groundCheck;
    else
    {
        if(groundCheck) sprite_index = spriteWalk;
        else sprite_index = spriteWalkPressed;
    }
    
    if(timerDisplay &lt; 0) event_user(EV_DEATH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(spawned)
{
    image_index = 0;
    timerDisplay = timerDisplayInit;
    phase = 0;
    grav = 0;
    xspeed = 0;
    yspeed = 0;
    walkDir = walkDirInit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playSFX(sfxMinorExplosion);

dead = 1;

var _ex = instance_create(bboxGetXCenter(), bboxGetYCenter(), objHarmfulExplosion);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer = 0;
phase = 1;
xspeed = 0;
yspeed = 0;
playSFX(sfxSidewayElevatorButton);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if((phase == 0 || timer &gt; 4) &amp;&amp; !dead) draw_sprite_ext(spriteNum,timerDisplay,round(x),round(y),image_xscale,image_yscale,image_angle,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
