<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBohuu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 8;
healthpoints = healthpointsStart;
contactDamage = 6;

facePlayerOnSpawn = true;

despawnRange = 32;

xspeed = 0
yspeed = 0

// Enemy specific code
phase = 0;
image_speed = 0;
animTimer = 0
img = 0
suckDistance = 0
suckSpeed = 1.1
suck = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    //suck
    if (suck)
        {
          if(suckDistance == 0){
            with (objMegaman)
                    {
                        if (id == other.id)
                            continue;
                        if (!dead)
                        {
                            if (climbing)
                            {
                                continue;
                            }
                            
                            
                            with (other)
                            {
                                if (collision_rectangle(x, view_yview, x + image_xscale * view_wview, view_yview + view_hview, other.id, false, false))
                                {
                                    with (other)
                                    {
                                        shiftObject(-other.suckSpeed * other.image_xscale, 0, 1);
                                    }
                                }
                            }
                        }
                    }
              }
              else{
              with (objMegaman)
                    {
                        if (id == other.id)
                            continue;
                        if (!dead)
                        {
                            if (climbing)
                            {
                                continue;
                            }
                            
                            
                            with (other)
                            {
                                if (collision_rectangle(x, view_yview, x + image_xscale * view_wview, view_yview + view_hview, other.id, false, false))
                                {
                                    with (other)
                                    {
                                        shiftObject(other.suckSpeed * other.image_xscale, 0, 1);
                                    }
                                }
                            }
                        }
                    }
              }
        }
        else
        {}
    
    
    switch (phase)
    {
        case 0: // suck Animation
            animTimer += 1;
            if (animTimer == 4)
            {
               animTimer = 0;
            if (image_index == 0)
            {
                image_index = 1;
                playSFX(sfxFan);
            }
            else if (image_index == 1)
            {
                image_index = 2;
            }
            else if (image_index == 2)
            {
                image_index = 1;
            }
             img += 1;
            if (img == 25)
            {
                phase = 1
                img = 0
                animTimer = 0
                image_index = 0
                suck = false
            }
          }
          break;
        
        case 1: // turn body
           animTimer += 1;
           if (animTimer == 4)
           image_index = 3
           if (animTimer == 15)
           image_index = 4
           if (animTimer == 20)
           image_index = 5
           if (animTimer == 25)
           image_index = 6
           if (animTimer == 30)
           image_index = 7
           if (animTimer == 35)
           image_index = 0
           
           if (animTimer == 50){
           if(suckDistance == 0)
           suckDistance = 1
           else
           suckDistance = 0
           
           animTimer = 0
           suck = true
           phase = 0
           }
           
           break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
