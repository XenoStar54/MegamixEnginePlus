<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSaveMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>250</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Todo:
Condense menu code
*/
controlsLocked = false; // controls are locked when switching menu modes

/// variables

option = 0;
option2 = 0;
option3 = 0;
fileCopyFrom = 0;
cursorTimer = 0;
selectionMode = 0;
weaponListDelay = 0;
weaponListScroll = 0;
/*
0: choose a file
1: what to do with file
2: where to copy file to
3: confirm deletion of file
*/
titleBar = "LOAD";

global.debugEnabled = false; // debug keys not allowed for now
global.livesEnabled = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// load list of files
isFile[0] = false;

for (var i = 1; i &lt;= 8; i++)
{
    // load file:
    fileName[i] = "save" + string(i) + ".sav";
    global.saveFile = fileName[i];
    var error = saveLoadGame(false);
    
    // if file doesn't exist, then that slot is a "new game".
    if (error)
    {
        isFile[i] = false;
    }
    else
    {
        //read file data from non-empty save files
        isFile[i] = true;
        energyElements[i] = global.energyElements;
        gameTimer[i] = global.gameTimer;
        fileDifficulty[i] = global.difficulty;
        fileBolts[i] = global.bolts;
        //weaponHotbar[i] = global.weaponHotbar;
        eTanks[i] = global.eTanks;
        mTanks[i] = global.mTanks;
        //read all visible weapons on hotbar(???)
        var wepCount = 0;
        for(var z = 0; z &lt; global.totalWeapons + 1; z++;)
        {
            if (global.weaponLocked[global.weaponHotbar[z]] != 2)
            {
                weaponHotbar[i, wepCount] = global.weaponHotbar[z];
                wepCount++
            }
        }
        weaponListLength[i] = array_length_2d(weaponHotbar, i);
        //weaponListLength[i] = 872; //temp while the debug text is in
    }
}

freshSaveFile();
objGlobalControl.saveTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//cursor animates
cursorTimer++;

//weapons animate
if (isFile[option])
{
    //scroll through the entire list of weapons, pausing at the start and end
    if (weaponListDelay &lt; 70)
        weaponListDelay++;
    else if weaponListScroll &lt; (ceil(weaponListLength[option] / 2) - 7) * 16
        weaponListScroll += 0.5;
    else if weaponListDelay &lt; 140
        weaponListDelay++;
    else
    {
        weaponListScroll = 0;
        weaponListDelay = 0;
    }
}

if (!controlsLocked)
{
    if (selectionMode &lt; 2)
        titleBar = "LOAD";
    
    var xDir = global.keyRightPressed[0] - global.keyLeftPressed[0];
    var use = (global.keyJumpPressed[0] || global.keyPausePressed[0]);
    
    switch(selectionMode)
    {
        case 0: //What file should we use?
            //choose which file to work with
            if(xDir != 0)
            {
                option += xDir;
                if option &gt; 8
                    option = 0;
                if option &lt; 0
                    option = 8;
                playSFX(sfxMenuMove);
                weaponListScroll = 0;
                weaponListDelay = 0;
            }
            //selecting a file
            if use &amp;&amp; option != 0
            {
                if !isFile[option]  //new game
                {
                    global.nextRoom = rmNewFile;
                    global.saveFile = fileName[option];
                    lockControls = true;
                    playSFX(sfxMenuSelect);
                }
                else    //existing file: what will you do?
                {
                    selectionMode = 1;
                }
            }
            //back out, or use "back" option
            if (global.keyShootPressed[0]) || (use &amp;&amp; option = 0)
            {
                global.nextRoom = rmTitleScreen;
                lockControls = true;
                global.debugEnabled = true;
                global.livesEnabled = false;
            }
            break;
        
        
        
        
        case 1: //what will you do with this file?
            //choose an operation
            if (xDir != 0)
            {
                option2 += xDir;
                if option2 &gt; 2
                    option2 = 0;
                if option2 &lt; 0
                    option2 = 2;
                playSFX(sfxMenuMove);
            }
            
            if (use)
            {
                switch(option2)
                {
                    case 0: //play
                        playSFX(sfxMenuSelect);
                        //mostly copied from old code, but it works fine
                        global.saveFile = fileName[option];
                        var error = saveLoadGame(false);
                        if (error)
                        {
                            freshSaveFile();
                            playSFX(sfxError);
                        }
                        else
                        {
                            global.nextRoom = rmStageSelect;
                            lockControls = true;
                            playSFX(sfxMenuSelect);
                        }
                        break;
                    
                    case 1: //copy
                        fileCopyFrom = option;
                        selectionMode = 2;
                        titleBar = "COPY";
                        break;
                        
                    case 2: //delete
                        selectionMode = 3;
                        titleBar = "DELETE";
                        break;
                }
            }
            
            //back out: return to picking a file
            if global.keyShootPressed[0]
            {
                selectionMode = 0;
                option2 = 0;
            }
            break;
        
        
        
        
        case 2: //Copy to what file?
            //choosing a file is identical to mode 0
            if(xDir != 0)
            {
                option += xDir;
                if option &gt; 8
                    option = 0;
                if option &lt; 0
                    option = 8;
                playSFX(sfxMenuMove);
                weaponListScroll = 0;
                weaponListDelay = 0;
            }
            //selecting a file
            if(use &amp;&amp; option != 0)
            {
                if (option == fileCopyFrom)
                {   //cannot copy to the file you are copying from
                    //i don't know if this is actually restricted, but w/e
                    playSFX(sfxError);
                }
                else if !isFile[option]
                {   //if file is blank, copy with no confirmation
                    event_user(0);
                    
                    playSFX(sfxUnlocked);
                }
                else
                {   //if file is not balnk, ask user if they're sure
                    selectionMode = 3;
                }
            }
            //back out, or use "back" option
            if (global.keyShootPressed[0]) || (use &amp;&amp; option = 0)
            {
                selectionMode = 1;
                option = fileCopyFrom;
            }
            break;
        
        
        
        
        case 3: //are you sure you want to delete this file?
            //alternate between yes and no regardless of direction
            if xDir != 0
            {
                option3 = !option3;
                playSFX(sfxMenuMove);
            }
            //make choice
            if (use) &amp;&amp; (option3)
            {
                if(option2 = 1)
                {   //if coming from copy menu, copy file
                    playSFX(sfxUnlocked);
                    event_user(0);
                    
                    //then return to copyto menu
                    selectionMode = 2;
                    option3 = 0;
                }
                else
                {   //if coming from delete menu, delete file
                    playSFX(sfxDeath);
                    //delete file
                    file_delete(fileName[option]);
                    isFile[option] = false;
                    objGlobalControl.saveTimer = 40;
                    
                    //return to file select menu
                    selectionMode = 0;
                    option3 = 0;
                    option2 = 0;
                }
            }
            //back out, or press "no"
            else if (global.keyShootPressed[0]) || (use &amp;&amp; !option3)
            {
                //just return to previous menu
                option3 = 0;
                if(option2 = 1) 
                    selectionMode = 2;//return to file select
                else
                    selectionMode = 1;//return to action select
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Copy a savefile

//copy the files
file_copy(fileName[fileCopyFrom], fileName[option]);
objGlobalControl.saveTimer = 40;

//the actual hard part: copy the displayed data
isFile[option] = true;
energyElements[option] = energyElements[fileCopyFrom];
gameTimer[option] = gameTimer[fileCopyFrom];
fileDifficulty[option] = fileDifficulty[fileCopyFrom];
fileBolts[option] = fileBolts[fileCopyFrom];
eTanks[option] = eTanks[fileCopyFrom];
mTanks[option] = mTanks[fileCopyFrom];
//copy weapon hotbar
for (var r = 0; r &lt; array_length_2d(weaponHotbar, fileCopyFrom); r++;)
{
    weaponHotbar[option, r] = weaponHotbar[fileCopyFrom, r];
}
weaponListLength[option] = weaponListLength[fileCopyFrom];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_alpha(1);
draw_set_valign(fa_top);

draw_sprite(sprSaveMenuBG, (option == 0) || (!isFile[option]), 0, 0);

draw_set_halign(fa_center);

//LOAD
draw_text_colour(128, 17, titleBar, global.nesPalette[27], global.nesPalette[27], global.nesPalette[27], global.nesPalette[27], 1);

//cursor movement
var coff = floor((cursorTimer / 7) mod 4);
coff -= 2 * (coff = 3); //3 turns to 1

switch(selectionMode)
{
    case 0: //choose a file
    case 2: //select a slot to copy to
        //File numbers
        draw_text(40, 40, "Back");
        for (var drawNum = 1; drawNum &lt; 9; drawNum++;)
        {
            if (selectionMode == 2) &amp;&amp; (drawNum == fileCopyFrom)
                draw_set_colour(global.nesPalette[34]);
            draw_text(51 + (22 * drawNum), 40, string(drawNum));
            draw_set_colour(c_white);
        }
        
        //Cursor
        if option == 0
        {
            draw_sprite(sprSaveMenuCursor, 0, 28 - coff, 52 + coff);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + coff, 52 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 28 - coff, 36 - coff, 1, -1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + coff, 36 - coff, -1, -1, 0, c_white, 1);
        }
        else
        {
            draw_sprite(sprSaveMenuCursor, 0, 49 + (22 * option) - coff, 52 + coff);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + (22 * option) + coff, 52 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 49 + (22 * option) - coff, 36 - coff, 1, -1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 53 + (22 * option) + coff, 36 - coff, -1, -1, 0, c_white, 1);
        }
        break;
    
    case 1: //what to do with this file?
        //cover up dividers
        draw_rectangle_colour(19, 27, 236, 60, c_black, c_black, c_black, c_black, 0);
        //options
        draw_text(128, 40, "Play    Copy    Delete");
        //cursor
        draw_sprite(sprSaveMenuCursor, 0, 36 + (64 * option2) - coff, 47 + coff);
        draw_sprite_ext(sprSaveMenuCursor, 0, 36 + (64 * option2) - coff, 40 - coff, 1, -1, 0, c_white, 1);
        //only the right half needs to be adjusted to fit "delete"
        if (option2 != 2)
        {
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * option2) + coff, 47 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * option2) + coff, 40 - coff, -1, -1, 0, c_white, 1);
        }
        else
        {
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * 2) + 16 + coff, 47 + coff, -1, 1, 0, c_white, 1);
            draw_sprite_ext(sprSaveMenuCursor, 0, 75 + (64 * 2) + 16 + coff, 40 - coff, -1, -1, 0, c_white, 1);
        }
        break;
        
    case 3: //confirm deletion
        //cover up dividers
        draw_rectangle_colour(19, 27, 236, 60, c_black, c_black, c_black, c_black, 0);
        if(option2 = 2)
            draw_text(128, 30,"Delete this file?");
        else
            draw_text(128, 30,"Overwrite this file?");
        //options
        draw_text(128, 46,"Yes    No");
        //cursor
        draw_sprite(sprSaveMenuCursor, 0, 89 + (56 * !option3) - coff, 53 + coff);
        draw_sprite_ext(sprSaveMenuCursor, 0, 89 + (56 * !option3) - coff, 46 - coff, 1, -1, 0, c_white, 1);
        draw_sprite_ext(sprSaveMenuCursor, 0, 119 + (48 * !option3) + coff, 53 + coff, -1, 1, 0, c_white, 1);
        draw_sprite_ext(sprSaveMenuCursor, 0, 119 + (48 * !option3) + coff, 46 - coff, -1, -1, 0, c_white, 1);
        break;
}

//if there's a save file, draw it's information
if !((option == 0) || (!isFile[option]))
{
    //difficulty
    var dif;
    switch(fileDifficulty[option])
    {
        case 0:
            var diff = "Easy Mode";
            break;
        case 1:
            var diff = "Normal Mode";
            break;
        case 2:
            var diff = "Hard Mode";
            break;
        default:
            var diff = "Invalid Mode";
            break;
    }
    draw_text(67, 80, diff);
    
    //play time
    var playHrs = floor(gameTimer[option] / (60 * 60 * 60));
    var playMns = floor(gameTimer[option] / (60 * 60)) - (playHrs * 60);
    var playScs = floor(gameTimer[option] / 60) - ((playHrs * (60 * 60)) + (playMns * 60));
    draw_text(67, 116, "Play time:#" + string(playHrs) + ":" + zeroPad(playMns, 2) + ":" + zeroPad(playScs, 2));
    
    draw_set_halign(fa_left);
    
    //your character
    //it's just megaman atm, since costume colors are hardcoded into objMegaman
    var costPrim = make_color_rgb(0, 112, 236);
    var costSec = make_color_rgb(56, 184, 248);
    drawCostume(0, 0, 0, 50, 184, 1, 1, c_white, costPrim, costSec, c_white);
    
    //bolts
    draw_sprite_ext(sprBoltBig, 0, 53, 156, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprBoltBig, 1, 53, 156, 1, 1, 0, costPrim, 1);
    draw_sprite_ext(sprBoltBig, 2, 53, 156, 1, 1, 0, costSec, 1);
    draw_text(52 + 20, 156 + 8, zeroPad(fileBolts[option], 4));
    
    //energy elements
    draw_sprite_ext(sprEnergyElement, 0, 52, 178, 1, 1, 0, c_white, 1);
    draw_text(52 + 20, 179 + 4, zeroPad(energyElements[option], 3));
    
    //weapons
    draw_text(122 + 8, 76, "Weapons");
    
    var surface = surface_create(16 * 7, 32);
    surface_set_target(surface);
    
    var hoff, voff;
    for (var i = 0; i &lt; weaponListLength[option]; i++;)
    {
        hoff = floor(i / 2) * 16;
        voff = (i mod 2) * 16;
        draw_sprite_ext(global.weaponIcon[weaponHotbar[option, i]], 0, hoff - weaponListScroll, voff, 1, 1, 0, make_color_rgb(255, 228, 164), 1);
        draw_sprite_ext(global.weaponIcon[weaponHotbar[option, i]], 3, hoff - weaponListScroll, voff, 1, 1, 0, c_white, 1);
        draw_sprite_ext(global.weaponIcon[weaponHotbar[option, i]], 1, hoff - weaponListScroll, voff, 1, 1, 0, costPrim, 1);//global.weaponPrimaryColor[i]
        draw_sprite_ext(global.weaponIcon[weaponHotbar[option, i]], 2, hoff - weaponListScroll, voff, 1, 1, 0, costSec, 1);//global.weaponSecondaryColor[i]
    }
    //draw_text(-weaponListScroll, 0, "This is an excessively long debug string used to test the scrolling functionality of the weapon icon display.");
    
    surface_reset_target();
    draw_surface(surface, 121, 92);
    surface_free(surface);
    
    //tanks
    draw_text(122 + 8, 132, "Items");
    
    draw_sprite_ext(sprETank, 2, 122, 148, 1, 1, 0, costPrim, 1);
    draw_sprite_ext(sprETank, 4, 122, 148, 1, 1, 0, costSec, 1); 
    draw_text(122, 148 + 18, zeroPad(eTanks[option], 2));
    
    //weapon tanks aren't currently saved?????
    draw_sprite_ext(sprWTank, 2, 122 + 32, 148, 1, 1, 0, costPrim, 1);
    draw_sprite_ext(sprWTank, 4, 122 + 32, 148, 1, 1, 0, costSec, 1);
    draw_text(122 + 32, 148 + 18, zeroPad(global.wTanks, 2));
    
    draw_sprite_ext(sprMTank, 2, 122 + 64, 148, 1, 1, 0, costPrim, 1);
    draw_sprite_ext(sprMTank, 4, 122 + 64, 148, 1, 1, 0, costSec, 1);
    draw_text(122 + 64, 148 + 18, zeroPad(mTanks[option], 2));
}
//no save file
else if (option != 0)
{
    draw_text(128, 132, "New game");
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
