<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCrystalJump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprCrystalMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
pose = sprCrystalPose
poseImgSpeed = 0.166666666666667
contactDamage = 5
spd = 0.675
ground = 0
phase = 1
subPhase = 0
timer = 0
startHighJump = 1
shouldShoot = 1
initDir = image_xscale
crystalID1 = 1203
crystalID2 = 1203
crystalID3 = 1203
crystalID4 = 1203
bulletID = 1203

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[27];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 4);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 2);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 4);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 4);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 0);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 0);

// MM11
enemyDamageValue(objBlockDropper, 0);

// MMI

// MMII
enemyDamageValue(objSakugarne, 1);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 0);
enemyDamageValue(objTenguDash, 0);
enemyDamageValue(objTenguDisk, 0);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 4);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 2);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if  (entityCanStep()) 
{
    if (isFight == 1)
    {
        if (!((phase == 1 || phase == 2) &amp;&amp; subPhase == 1))
        {
            grav = 0.25
        }
        switch phase
        {
            case 0:
                xspeed = 0
                sprite_index = sprCrystalStand
                timer += 1
                if (timer &gt;= 15)
                {
                    timer = 0
                    if (!(instance_exists(objMegaman) &amp;&amp; abs((sprite_get_xcenter() - sprite_get_xcenter_object(objMegaman))) &lt;= 64))
                    {
                        randomize()
                        phase = choose(1, 2)
                    }
                    else
                        phase = 2
                    subPhase = 0
                    calibrateDirection();
                    initDir = image_xscale
                }
                break
            case 1:
                switch subPhase
                {
                    case 0:
                        sprite_index = sprCrystalJump
                        calibrateDirection();
                        if (timer == 0)
                        {
                            yspeed = -7
                            if (place_meeting(x, (y + yspeed), objSolid))
                                yspeed = 0
                        }
                        timer += 1
                        xspeed = (initDir * spd)
                        if (place_meeting((x + xspeed), y, objSolid))
                            xspeed = 0
                        if (yspeed &gt;= 0)
                        {
                            if (!instance_exists(objCrystalManEye))
                            {
                                subPhase = 1
                                xspeed = 0
                                yspeed = 0
                            }
                            else
                                subPhase = 2
                            timer = 0
                        }
                        break
                    case 1:
                    grav = 0
                        sprite_index = sprCrystalShoot
                        if (timer == 0)
                            image_index = 0
                        timer += 1
                        image_speed = 0.166666666666667
                        if (image_index &gt;= (image_number - image_speed))
                        {
                            for (var i = 0; i &lt; 4; i++)
                            {
                                var ID = instance_create(sprite_get_xcenter(), sprite_get_ycenter(), objCrystalManEye);
                                ID.angle = (45 + (i * 90))
                                if (i == 1)
                                    crystalID1 = ID
                                else if (i == 2)
                                    crystalID2 = ID
                                else if (i == 3)
                                    crystalID3 = ID
                                else if (i == 4)
                                    crystalID4 = ID
                            }
                            timer = 0
                            subPhase = 2
                            sprite_index = sprCrystalJump
                        }
                        xspeed = 0
                        yspeed = 0
                        break
                    case 2:
                    grav = 0.25
                        sprite_index = sprCrystalJump
                        calibrateDirection();
                        xspeed = (initDir * spd)
                        if (place_meeting((x + xspeed), y, objSolid))
                            xspeed = 0
                        if (ground == 1)
                        {
                            xspeed = 0
                            sprite_index = sprCrystalStand
                            timer = 0
                            phase = 0
                            subPhase = 0
                        }
                        break
                }
                
                break
            case 2:
                switch subPhase
                {
                    case 0:
                        sprite_index = sprCrystalJump
                        calibrateDirection();
                        if (timer == 0)
                        {
                            yspeed = -5.75
                            if (place_meeting(x, (y + yspeed), objSolid))
                                yspeed = 0
                        }
                        timer += 1
                        xspeed = (initDir * spd)
                        if (place_meeting((x + xspeed), y, objSolid))
                            xspeed = 0
                        if (yspeed &gt;= 0)
                        {
                            randomize()
                            subPhase = choose(1, 2)
                            if (subPhase == 1)
                            {
                                xspeed = 0
                                yspeed = 0
                            }
                            timer = 0
                        }
                        break
                    case 1:
                        grav = 0
                        sprite_index = sprCrystalShoot
                        if (timer == 0)
                            image_index = 0
                        timer += 1
                        image_speed = 0.166666666666667
                        if (image_index &gt;= (image_number - image_speed))
                        {
                            ID = instance_create(sprite_get_xcenter(), sprite_get_ycenter(), objCrystalProjectile)
                            bulletID = ID
                            timer = 0
                            subPhase = 2
                            sprite_index = sprCrystalJump
                        }
                        xspeed = 0
                        yspeed = 0
                        break
                    case 2:
                    grav = 0.25
                        sprite_index = sprCrystalJump
                        calibrateDirection();
                        xspeed = (initDir * spd)
                        if (place_meeting((x + xspeed), y, objSolid))
                            xspeed = 0
                        if (ground == 1)
                        {
                            xspeed = 0
                            sprite_index = sprCrystalStand
                            timer = 0
                            phase = 0
                            subPhase = 0
                        }
                        break
                }
                
                break
        }
        
    }
    
}
else
    image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(objMegaman))
{
    i = instance_create(objMegaman.x - 8, objMegaman.y - 8, objGravityFlipDown);
    with (i)
    {
        event_perform(ev_step, ev_step_normal);
        instance_destroy();
    }
}

with (objCrystalManEye)
    instance_destroy();
    
with (objCrystalProjectile)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
