<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>mskLavaHover</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// swims over lava and carries entities through
event_inherited();

blockCollision = 1;
grav = 0.25;
saveGrav = 0.25;
isSolid = 2;
canHit = false;
canDamage = false;
itemDrop = -1;
shiftVisible = 3;

maxShiftDistance = 4;
lavaRiseSpd = 4;

hoverOnLava = 1;
hoverOnWater = 1;

myPassenger = noone;

passengerLoseTimerMax = 120;
passengerLoseTimer = 0;

passengerBlacklist[0] = objPhysicsBlock;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    // rise in lava
    var rise = false, standOnLava = false;
    if(hoverOnLava)
    {
        with(objLava)
        {
            if(!dead &amp;&amp; iceTimer &lt;= 0)
            {
                if(place_meeting(x,y+5*sign(other.saveGrav),other)) rise = true;
                else if(place_meeting(x,y+4*sign(other.saveGrav),other)) standOnLava = true;
            }
        }
        if(rise)
        {
            grav = 0;
            yspeed = -sign(saveGrav)*lavaRiseSpd;
        }
        else if(standOnLava)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = saveGrav;
            if(sign(yspeed) == -sign(saveGrav)) yspeed = 0;
        }
    }
    if(hoverOnWater)
    {
        with(objWater)
        {
            if(place_meeting(x,y+5*sign(other.saveGrav),other)) rise = true;
            else if(place_meeting(x,y+4*sign(other.saveGrav),other)) standOnLava = true;
        }
        if(rise)
        {
            grav = 0;
            yspeed = -sign(saveGrav)*lavaRiseSpd;
        }
        else if(standOnLava)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = saveGrav;
            if(sign(yspeed) == -sign(saveGrav)) yspeed = 0;
        }
    }
    
    if(myPassenger == noone) // find passenger
    {
        shiftVisible = 0;
        with(prtEntity) if(!dead &amp;&amp; blockCollision)
        {
            var valid = true;
            with(other)
            {
                for(var i = 0; i &lt; array_length_1d(passengerBlacklist); i++)
                {
                    if(passengerBlacklist[i] == other) valid = false;
                }
            }
            
            if(valid &amp;&amp; ground &amp;&amp; place_meeting(x,y+sign(grav),other) &amp;&amp; !place_meeting(x,y,other))
            {
                other.myPassenger = self;
                other.passengerLoseTimer = 0;
            }
        }
    }
    else // I have passenger
    {
        shiftVisible = 3;
        if(!instance_exists(myPassenger) || myPassenger.dead || myPassenger == noone) myPassenger = noone;
        else
        {
            // follow/carry passenger
            if(/*myPassenger.xspeed != 0 &amp;&amp; */!ground)
            {
                var dist = (bboxGetXCenterObject(myPassenger) - x);
                if(abs(dist) &gt; maxShiftDistance) dist = sign(dist)*maxShiftDistance;
                // real
                if(!checkSolid(dist,0))
                {
                    shiftObject(dist,0,blockCollision);
                    var newX = x;
                    shiftObject(-dist,0,blockCollision);
                    x = newX;
                }
            }
            
            // disown passenger if they broke contact
            if(myPassenger.ground &amp;&amp; place_meeting(x,y-4*sign(myPassenger.grav),myPassenger) &amp;&amp; !place_meeting(x,y,myPassenger))
            {
                passengerLoseTimer = 0;
            }
            else // I've been abandoned
            {
                passengerLoseTimer++;
                var closeTimer = passengerLoseTimerMax-passengerLoseTimer;
                if(closeTimer &lt; 60)
                {
                    if((closeTimer mod 20) == 19) playSFX(sfxBladeManSeeSawCart2);
                    if((closeTimer mod 20) &gt;= 10) iFrames = 2;
                    else iFrames = 0;
                }
                if(passengerLoseTimer &gt; passengerLoseTimerMax)
                {
                    myPassenger = noone;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
myPassenger = noone;
passengerLoseTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
