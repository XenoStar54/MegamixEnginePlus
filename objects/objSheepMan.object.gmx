<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSheepMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;

contactDamage = 4;
customPose = true;
ground = false;
attackTimer = 0;
hasTriggeredFall = false;
introType = 1;

// stopOnFlash = false;

phase = 0;
shotsFired = 0;
shotsFiredMax = choose(1, 2, 3);
hasJumped = 0;
prefXSpd = 0;
airtime = 0;
highShot = choose(1, -1);

for (i = 0; i &lt; 4; i++)
{
    dX[i] = x;
    dY[i] = y;
    numInd[i] = 0;
    cloudDir[i] = 0;
}

// Difficulty options
if (global.difficulty == DIFF_HARD)
{
    canWave = true;
}
else
{
    canWave = false;
}

// Health Bar
manualColors = true;
healthBarPrimaryColor[1] = make_colour_rgb(240, 184, 56); // Yellow
healthBarSecondaryColor[1] = make_colour_rgb(252, 252, 252); // White

// Music
music = "Mega_Man_10.nsf";
musicType = "VGM";
musicTrackNumber = 18;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 2);
enemyDamageValue(objGeminiLaser, 4);
enemyDamageValue(objHardKnuckle, 0);
enemyDamageValue(objTopSpin, 2);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 4);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objReboundStriker, 4);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 2);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objGrabBuster, 4);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 0);
enemyDamageValue(objMagicCard, 2);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // Commando Man's custom intro
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        calibrateDirection();
        grav = gravStart;
    }
    else if (isIntro)
    {
        // custom intro:
        if (y &lt;= ystart &amp;&amp; !hasTriggeredFall)
            y += 4 ;
        if (attackTimer == 0) &amp;&amp; (introType == 1)
        {
            image_index = 3;
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            hasTriggeredFall = true;
            y = ystart;
            image_speed = 0;
            attackTimer += 1;
            if (introType == 1)
            {
                if (attackTimer &lt; 8)
                    image_index = 1;
                if (attackTimer == 8)
                    image_index = 0;
            }
            if (attackTimer == 20 || attackTimer == 36)
                image_index = 1;
            if (attackTimer == 28 || attackTimer == 44 || attackTimer == 74)
                image_index = 0;
            if (attackTimer == 44)
                playSFX(sfxElectricShot);
            if (attackTimer &gt;= 44 &amp;&amp; attackTimer &lt; 74)
                image_index = 1 + (attackTimer/2.5) mod 2;
            if (attackTimer == 80)
            {
                image_index = 0;
                canFillHealthBar = true;
                isIntro = false;
                grav = gravStart;
                blockCollision = blockCollisionStart;
                attackTimer = 0;
                phase = 0;
            }
        }
    }
}
if (entityCanStep())
{
    if (isFight)
    {
        var lastTime;
        if (attackTimer == 8 &amp;&amp; ground &amp;&amp; phase &lt; 2)
        {
            calibrateDirection();
        }
        attackTimer+= ground;
        if (ycoll &gt; 0)
        {
            xspeed = 0;
            prefXSpd = 0;
            image_index = 1;
        }
        switch (phase)
        {
            // Sinewave spark
            case 0:
                if (attackTimer == 8)
                    image_index = 0;
                if (attackTimer &gt;= 40 &amp;&amp; attackTimer &lt; 60)
                    image_index = 1 + (attackTimer/2.5) mod 2;
                if (attackTimer == 60)
                {
                    image_index = 4;
                    var i = instance_create(x + 4 * image_xscale, y - 4, objSheepManSpark);
                    i.xspeed = (3 + (-0.75 * (highShot == 1))) * image_xscale;
                    i.isHigh = (highShot == 1);
                    i.yPoint = y - (26 * (highShot == 1));
                    i.yDistance = 12 + (26 * (highShot == 1));
                    i.ang = 135;
                    playSFX(sfxElectricShot);
                    highShot *= -1;
                }
                if (attackTimer == 84)
                {
                    attackTimer = 0;
                    if (checkSolid(-32 * sign(image_xscale), 0) || hasJumped)
                        phase = 1;
                    else
                        phase = choose(1, 1, 1, 2, 2);
                    if (phase == 2)
                    {
                        attackTimer = 7;
                        image_index = 3;
                        shotsFired = 0;
                        shotsFiredMax = choose(1, 1, 1, 1, 2, 2, 3);
                        image_xscale *= -1;
                    }
                    hasJumped = 0;
                }
                break;
            // Thunder Wool
            case 1:
                if (attackTimer == 1 &amp;&amp; !shotsFired)
                {
                    image_index = 3;
                    yspeed = -7;
                    grav = (yspeed * yspeed) / (2 * abs(y - (y - 112)));
                    shotsFired = 1;
                }
                if (yspeed &gt;= 0 &amp;&amp; shotsFired == 1)
                {
                    playSFX(sfxElectricShot);
                    yspeed = 0;
                    grav = 0;
                    shotsFired = 2;
                    attackTimer = 0;
                }
                if (shotsFired == 2)
                {
                    attackTimer++;
                    image_index = 5 + (attackTimer / 2.5) mod 2;
                    if (attackTimer == 21)
                    {
                        playSFX(sfxThunderWoolRise);
                        var xx = x,
                            yy = y,
                            ind = 0,
                            dir = 0,
                            dupe = false,
                            rand = 0;
                            
                        for (var i = 0; i &lt; 4; i++) 
                        {
                            do 
                            {
                                xx = view_xview + 32 + (24 * irandom(8));
                                yy = global.sectionTop + 48 + (32 * irandom(2));
                                ind = irandom(3);
                                dir = choose(40, 140, 220, 320);
                                    
                                dupe = false;
                                    
                                for (var j = i - 1; j &gt;= 0; j--) 
                                {
                                    if ((i == 3 &amp;&amp; (dX[j] == xx || numInd[j] == ind) 
                                    || cloudDir[j] == dir) || (i != 3 &amp;&amp; (dX[j] == xx 
                                    || dY[j] == yy) || numInd[j] == ind || cloudDir[j] == dir)) 
                                    {
                                        dupe = true;
                                        break;
                                    }
                                }
                            } 
                            until (!dupe);
            
                            if (i == 3) 
                            {
                                rand = irandom(2);
                                yy = dY[rand];
                            }
                            
                            dX[i] = xx;
                            dY[i] = yy;
                            numInd[i] = ind;
                            cloudDir[i] = dir;
                            
                            // 4th cloud has huge health so Sheep Man doesn't get stuck in a
                            // wall because it hasn't moved to its proper position
                            f = instance_create(x - 2 * image_xscale, y + 4, objSheepManThunderWool)
                            f.dX = xx;
                            f.dY = yy;
                            f.numInd = ind;
                            f.healthpointsStart = 2 + (256 * (ind == 3)); 
                            f.parent = id;
                            f.direction = dir;
                            f.speed = 0.75;
                            f.depth = depth - 5 - ind;
                        }
                    }
                }
                if (shotsFired = 3)
                {
                    attackTimer++
                    if (attackTimer == 3)
                    {
                        visible = 1;
                        mask_index = sprSheepMan;
                        image_index = 3;
                        y-= 14;
                        shotsFired = 4;
                    }
                }
                if (shotsFired == 4)
                {
                    xspeed = 0;
                    grav = 0.25;
                    if (attackTimer == 8)
                    {
                        image_index = 0;
                    }
                    if (attackTimer == 24)
                    {
                        hasJumped = 0;
                        shotsFired = 0;
                        attackTimer = 0;
                        phase = choose(0, 0, 1, 1, 1);
                        if (phase == 0)
                            attackTimer = 40;
                    }
                }
                break;
            // Jump
            case 2:
                xspeed = prefXSpd;
                if (xcoll != 0)
                    shotsFired = shotsFiredMax;
                if (attackTimer == 8)
                {
                    if (shotsFired &lt; shotsFiredMax)
                    {
                        image_index = 3;
                        attackTimer = 0;
    
                        var xEnd, xDis;
                        
                        yspeed = -sqrt(abs(2 * gravAccel * (32 + (16 * shotsFired))))
                        airtime = abs(2*yspeed/gravAccel)
    
                        xEnd = x + ((48 + (16 * shotsFired)) * image_xscale)                   
                        xDis = xEnd - x;
                        prefXSpd = xDis / airtime;
                        
                        shotsFired++;
                    }
                    else
                    {
                        hasJumped = 1;
                        image_index = 0;
                    }
                }
                if (attackTimer == 16)
                    calibrateDirection();
                if (attackTimer == 24)
                {
                    shotsFired = 0;
                    attackTimer = 0;
                    phase = choose(0, 1, 1);
                    if (phase == 0)
                        attackTimer = 40;
                }
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Destroy projectiles on death
with (objSheepManSpark)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objSheepManThunderWool)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objSheepThunderWoolThunder)
{
    instance_destroy();
}
with (objThunderWoolGroundThunder)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
