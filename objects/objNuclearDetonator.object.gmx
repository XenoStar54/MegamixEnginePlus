<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNuclearDetonator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 0;
blockCollision = 1;

image_speed = 0.3;

penetrate = 3;
pierces = 3;
state = 0;
timer = 0;
blastCount = 3;
selfDetonationTime = 60*60*3;

ys = yspeed;
xs = xspeed;
spd = 1;

dir = 1;

playSFX(sfxBuster);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(state == 0) // bounce on the ground and wait
    {
        if(ground)
        {
            if(yspeed == 0)
            {
                if(abs(ys/2) &gt; 0.5) yspeed = -ys/2;
                else timer++;
            }
            xspeed /= 1.5;
        }
        else
        {
            if(sign(xcoll) == sign(xs) &amp;&amp; xcoll != 0)
            {
                xspeed = -xs;
                if(sign(yspeed) == sign(grav))yspeed = -yspeed/2;
            }
        }
        if(timer &gt; selfDetonationTime &amp;&amp; selfDetonationTime &gt; 0)
        {
            state = 1;
            timer = 0;
            blockCollision = 0;
            grav = 0;
            xspeed = 0;
            yspeed = 0;
            sprite_index = sprNuclearDetonatorExploding;
        }
    }
    else if(state == 1) // explode
    {
        blockCollision = 0;
        grav = 0;
        xspeed = 0;
        yspeed = 0;
        sprite_index = sprNuclearDetonatorExploding;
        timer++;
        if(timer mod 5 == 0)
        {
            blastCount--;
            playSFX(sfxExplosion2);
            var angle = random(360);
            var radius = irandom_range(1,4);
            instance_create(x+cos(degtorad(angle))*radius,y-sin(degtorad(angle))*radius,objNuclearDetonatorExplosion);
        }
        if(blastCount &lt;= 0) event_user(10);
    }
    ys = yspeed;
    xs = xspeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// EV_WEAPON_CONTROL

var detonateMe = noone;
var canShoot = 1;
for(var j = 0; j &lt; instance_number(objNuclearDetonator); j++)
{
    var checkedDynamite = instance_find(objNuclearDetonator,j);
    if(checkedDynamite.parent == self)
    {
        canShoot = 0;
        if(checkedDynamite.state == 0) detonateMe = checkedDynamite;
        j = instance_number(objNuclearDetonator);
    }
}
if (!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; global.keyShootPressed[playerID])
{
    if(canShoot)
    {
        i = fireWeapon(16, 0, objNuclearDetonator, 1, 2, 2, 1);
        if (i)
        {
            i.image_xscale = image_xscale;
            i.image_yscale = image_yscale;
            i.xspeed = i.spd*i.image_xscale;
            i.yspeed = -3*i.image_yscale;
            i.ys = i.yspeed;
            i.xs = i.xspeed;
            i.grav = 0.25*i.image_yscale;
        }
    }
    else if(detonateMe)
    {
        with(detonateMe)
        {
            state = 1;
            timer = 0;
            blockCollision = 0;
            grav = 0;
            xspeed = 0;
            yspeed = 0;
            sprite_index = sprNuclearDetonatorExploding;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("NUCLEAR DETONATOR", global.nesPalette[6], global.nesPalette[19], sprWeaponIconsNuclearDetonator);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
