<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCyberSlider</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>objTopSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// jumping on this rail will let user dash jump
event_inherited();

for(var i = 0; i &lt; 4; i++) grindLock[i] = 0;

x = bbox_left;
image_xscale = abs(image_xscale);
image_yscale = 1;

timer = 0;
timerMax = 60;
timerFlash = 45;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!global.frozen)
{
    with(objMegaman)
    {
        if(other.grindLock[playerID]) // grinding
        {
            xspeed = image_xscale*slideSpeed;
            spriteX = 11;
            dashJumped = true;
            if(!(ground &amp;&amp; place_meeting(x,y+gravDir,other) &amp;&amp; !place_meeting(x,y,other) &amp;&amp; !climbing)) // unlock
            {
                other.grindLock[playerID] = lockPoolRelease(other.grindLock[playerID]);
            }
        }
        else // lock
        {
            if(ground &amp;&amp; place_meeting(x,y+gravDir,other) &amp;&amp; !place_meeting(x,y,other) &amp;&amp; !isSlide)
            {
                other.grindLock[playerID] = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_TURN,PL_LOCK_SLIDE);
                xspeed = image_xscale*slideSpeed;
                spriteX = 11;
                dashJumped = true;
            }
        }
    }
    
    timer++;
    if(timer &gt; timerFlash) image_index = 1;
    else image_index = 0;
    if(timer &gt; timerMax) timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; image_xscale; i++) draw_sprite(sprite_index,image_index,x+i*(sprite_width/image_xscale),y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
