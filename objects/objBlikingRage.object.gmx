<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBlikingRage</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 0;
blockCollision = 0;
grav = 0;

penetrate = 3;
pierces = 2;

shiftVisible = 3;
despawnRange = 32;

dashLock = 0;
dashTime = 30;
dashSpd = 3.5;

distX = 0;
distY = 0;

timer = 0;
phase = 0;

image_speed = 0;

selectedWeapon = 0;
// 0 - mine: no d-input;
// 1 - dash: horizontal d-input;
// 2 - missiles: vertical d-input;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dashLock)
{
    with(parent) other.dashLock = lockPoolRelease(other.dashLock);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(phase &lt;= 3)
{
    if(!instance_exists(parent))
    {
        instance_destroy();
        exit;
    }

    image_xscale = parent.image_xscale;
    x = parent.x + image_xscale*distX;
    y = parent.y + image_yscale*distY;
    
    if(dashLock)
    {
        parent.spriteX = 14;
        parent.spriteY = 10;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(phase &lt;= 3)
    {
        if(!instance_exists(parent))
        {
            instance_destroy();
            exit;
        }
        
        if(instance_exists(prtEnemyProjectile))
        {
            var enemyProjectile = instance_place(x,y,prtEnemyProjectile);
            with(enemyProjectile)
            {
                if(canDamage*contactDamage &amp;&amp; reflectable != 0)
                {
                    instance_create(bboxGetXCenter(),bboxGetYCenter(),objExplosion);
                    event_user(10);
                    playSFX(sfxEnemyHit);
                }
            }
        }
    }
    
    if(phase == 0) // shield
    {
        visible = 1;
        parent.shootTimer = 0;
        parent.isShoot = 1;
        timer++;
        image_index = floor(timer/5) mod 6;
        
        if(parent.xDir != 0) selectedWeapon = 1;
        else if(parent.yDir != 0) selectedWeapon = 2;
        else selectedWeapon = 0;
        
        if(!global.keyShoot[playerID])
        {
            timer = 0;
            phase = 1+selectedWeapon;
            
            switch(selectedWeapon)
            {
                case 0:
                    image_index = 11;
                    break;
                case 1:
                    image_index = 7;
                    with(parent)
                    {
                        xspeed = 0;
                        yspeed = 0;
                        playSFX(sfxCyberGabyoallBoost);
                        other.dashLock = lockPoolLock(PL_LOCK_MOVE,
                            PL_LOCK_TURN,
                            PL_LOCK_SHOOT,
                            PL_LOCK_SLIDE,
                            PL_LOCK_GRAVITY,
                            PL_LOCK_SPRITECHANGE);
                        other.dashLock.targetInstance = self;
                    }
                    break;
                case 2:
                    image_index = 10;
                    break;
            }
        }
        else if(parent.isHit)
        {
            instance_destroy();
        }
    }
    else if(phase == 1) // mines
    {
        image_index = 11;
        parent.shootTimer = 0;
        parent.isShoot = 1;
        if(timer mod 5 == 0)
        {
            var mine = instance_create(x+image_xscale*44,y,objBlikingRage);
            mine.phase = 4;
            mine.timer = choose(0,0.25,0.5,0.75)*30;
            mine.xspeed = image_xscale;
            mine.visible = true;
            mine.sprite_index = sprBlikingRageMine;
            playSFX(sfxGrenadeGrenade);
        }
        
        timer++;
        if(timer &gt; 10*5) instance_destroy();
    }
    else if(phase == 2) // dash forward
    {
        timer++;
        if(timer mod 3 == 0)
        {
            image_index++;
            if(image_index &gt;= 10) image_index = 6;
        }
        
        parent.xspeed = parent.image_xscale*dashSpd;
        if(global.keyJumpPressed[playerID] || parent.climbing) dashTime = 0;
        if(timer &gt; dashTime)
        {
            instance_destroy();
            parent.dashJumped = true;
        }
    }
    else if(phase == 3) // missiles
    {
        image_index = 10;
        parent.shootTimer = 0;
        parent.isShoot = 1;
        
        if(timer mod 10 == 0)
        {
            var missile = instance_create(x+image_xscale*36,y+56,objBlikingRage);
            missile.phase = 5;
            missile.image_xscale = image_xscale;
            missile.image_yscale = image_yscale;
            missile.parent = parent;
            missile.playerID = playerID;
            missile.sprite_index = sprBlikingRageMissile;
            missile.image_speed = 0.3;
            missile.xspeed = 6*image_xscale;
            missile.visible = true;
            var missile = instance_create(x+image_xscale*36,y+56+53,objBlikingRage);
            missile.phase = 5;
            missile.image_xscale = image_xscale;
            missile.image_yscale = image_yscale;
            missile.parent = parent;
            missile.playerID = playerID;
            missile.sprite_index = sprBlikingRageMissile;
            missile.image_speed = 0.3;
            missile.xspeed = 6*image_xscale;
            missile.visible = true;
            var missile = instance_create(x+image_xscale*36,y+56+53+53,objBlikingRage);
            missile.phase = 5;
            missile.image_xscale = image_xscale;
            missile.image_yscale = image_yscale;
            missile.parent = parent;
            missile.playerID = playerID;
            missile.sprite_index = sprBlikingRageMissile;
            missile.image_speed = 0.3;
            missile.xspeed = 6*image_xscale;
            missile.visible = true;
            var missile = instance_create(x+image_xscale*36,y-56,objBlikingRage);
            missile.phase = 5;
            missile.image_xscale = image_xscale;
            missile.image_yscale = image_yscale;
            missile.parent = parent;
            missile.playerID = playerID;
            missile.sprite_index = sprBlikingRageMissile;
            missile.image_speed = 0.3;
            missile.xspeed = 6*image_xscale;
            missile.visible = true;
            var missile = instance_create(x+image_xscale*36,y-56-53,objBlikingRage);
            missile.phase = 5;
            missile.image_xscale = image_xscale;
            missile.image_yscale = image_yscale;
            missile.parent = parent;
            missile.playerID = playerID;
            missile.sprite_index = sprBlikingRageMissile;
            missile.image_speed = 0.3;
            missile.xspeed = 6*image_xscale;
            missile.visible = true;
            var missile = instance_create(x+image_xscale*36,y-56-53-53,objBlikingRage);
            missile.phase = 5;
            missile.image_xscale = image_xscale;
            missile.image_yscale = image_yscale;
            missile.parent = parent;
            missile.playerID = playerID;
            missile.sprite_index = sprBlikingRageMissile;
            missile.image_speed = 0.3;
            missile.xspeed = 6*image_xscale;
            missile.visible = true;
            playSFX(sfxMissileLaunch);
        }
        timer++;
        if(timer &gt; 10*5) instance_destroy();
    }
    else if(phase == 4) // am mine
    {
        timer++;
        yspeed = cos(2*pi*timer/30)*2*pi*16/30;
    }
    else if(phase == 5) // am missile
    {
        // sorry nothing
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var myBliking = noone;
with(objBlikingRage)
{
    if(parent == other &amp;&amp; phase &lt;= 3) myBliking = self;
}

if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; !myBliking)
{
    var a = fireWeapon(0, 16, objBlikingRage, 99, 4, 1, 0);
    if(a)
    {
        a.x = x+16*image_xscale;
        a.y = y+4*image_yscale;
        a.distX = abs(a.x-x);
        a.distY = (a.y-y);
        a.despawnRange = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("BLIKING RAGE",global.nesPalette[3],global.nesPalette[43],sprWeaponIconsBlikingRage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(phase == 5)
{
    var blast = instance_create(x,y,objWeaponExplosion);
    blast.contactDamage = contactDamage;
}
else event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(phase &lt;= 3)
{
    var _x = (floor((x * global.screenScale) + .5) / global.screenScale);
    var _y = (floor((y * global.screenScale) + .5) / global.screenScale);
    draw_sprite_ext(sprBlikingRageEye,selectedWeapon,_x+image_xscale*47,_y,image_xscale,image_yscale,0,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
