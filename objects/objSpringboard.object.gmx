<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSpringboard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

isSolid = 1;

canHit = false;
contactDamage = 0;
bubbleTimer = -1;
grav = 0;
blockCollision = 0;

respawnRange = 0;

//@cc baseSpringSpd - The speed you bounce at the very base of the spring
baseSpringSpd = 5.5;

//@cc endSpringSpdAdd - The speed that's added to the base spring speed when ad the very end of the spring (speed will scale accordingly between the base and the end)
endSpringSpdAdd = 2;

//@cc
ignoreEnemies = false;

// variables
timer = 0;
animTimer = 0;
animStep = 0;
dir = 0;
canBounce = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // disable bouncing in end stage cutscenes
    with (objEndStageCutscene)
    {
        if (phase &gt; 0)
        {
            other.canBounce = false;
        }
    }
    
    with (objEnergyElement)
    {
        if (timer &gt; 0)
        {
            global.canBounce = false;
        }
    }
    
    // animation
    if (animStep &gt; 0)
    {
        animTimer++;
        if (animTimer &gt;= 2)
        {
            animTimer = 0;
            animStep++;
        }
    }
    
    if (dir &lt; 0)
    {
        // landed on top; bounce down first
        switch (animStep)
        {
            case 1:  image_index = 1; break;
            case 2:  image_index = 2; break;
            case 3:  image_index = 1; break;
            case 4:  image_index = 0; break;
            case 5:  image_index = 3; break;
            case 6:  image_index = 4; break;
            case 7:  image_index = 3; break;
            case 8:  image_index = 0; break;
            case 9:  image_index = 1; break;
            case 10: image_index = 0; break;
            case 11: image_index = 3; break;
            case 12: image_index = 0;
                animStep = 0;
                animTimer = 0;
                dir = 0;
                break;
        }
    }
    else
    {
        // landed on bottom; bounce up first
        switch (animStep)
        {
            case 1:  image_index = 3; break;
            case 2:  image_index = 4; break;
            case 3:  image_index = 3; break;
            case 4:  image_index = 0; break;
            case 5:  image_index = 1; break;
            case 6:  image_index = 2; break;
            case 7:  image_index = 1; break;
            case 8:  image_index = 0; break;
            case 9:  image_index = 3; break;
            case 10: image_index = 0; break;
            case 11: image_index = 1; break;
            case 12: image_index = 0;
                animStep = 0;
                animTimer = 0;
                dir = 0;
                break;
        }
    }
    
    // bouncing
    if (canBounce)
    {
        with (prtEntity)
        {
            if (!dead &amp;&amp; (!other.ignoreEnemies || faction != 3))
            {
                if (blockCollision &amp;&amp; grav != 0
                    // in front of the springboard
                    &amp;&amp; ((x &gt; other.x &amp;&amp; other.image_xscale &gt; 0)
                        || (x &lt; other.x &amp;&amp; other.image_xscale &lt; 0)))
                {
                    var g = grav;
                    if (inWater)
                    {
                        if (object_index != objMegaman)
                        {
                            g = grav * waterAccelMod;
                        }
                        else
                        {
                            g = (gravWater * gravfactor * gravDir) * !playerIsLocked(PL_LOCK_GRAVITY);
                        }
                    }
                    
                    if (abs(ycoll) &gt; g) // landed on it. Won't work if it's walked on from a surface
                    {
                        with (other)
                        {
                            if ((collision_rectangle(bbox_left, bbox_top - 1, bbox_right, bbox_top, other.id, false, false) 
                                    || collision_rectangle(bbox_left, bbox_bottom + 1, bbox_right, bbox_bottom, other.id, false, false))
                                &amp;&amp; sign(other.ycoll) == sign(((bbox_bottom + bbox_top) / 2) - other.y)) // fell towards the board
                            {
                                // start animation
                                animStep = 1;
                                animTimer = -1;
                                dir = -sign(other.ycoll);
                                
                                // spring higher the farther you are on the board
                                var w = abs(bbox_right - bbox_left) - 6;  // - 6 is to account for the player's mask
                                var d = max(abs(x - other.x) - 6, 0); // - 6 is to account for the player's mask
                                var s = baseSpringSpd;
                                s += (d / w) * endSpringSpdAdd;
                                
                                with (other)
                                {
                                    yspeed = other.dir * s;
                                    canMinJump = false; // can't cancel bounce by letting go of jump
                                    jumpCounter = 1; // resets jumps
                                    dashJumped = false;
                                    
                                    // make sure they don't stick to the ground if they manage to fully land on the spring
                                    y += other.dir; 
                                    ground = false;
                                    
                                    // sfx
                                    if (insideView())
                                    {
                                        playSFX(sfxSpring);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
