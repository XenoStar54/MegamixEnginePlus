<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM2SniperJoeMechEmpty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// An empty mech that nearby sniper joes will jump into
// Destroying the armor will cause the Joe in it to attack on foot
event_inherited();

healthpointsStart = 12;
healthpoints = healthpointsStart;
contactDamage = 0;
killOverride = false;

category = "bulky, joes";

// Enemy specific code
shoot = false;
moveTimer = 20;

repeatAmount = 0;
repeatIsHigh = true;

doThing = false;
myJoe = noone;
joeLock = false; //prevents multiple joes from jumping in the mech
joeHealth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (!myJoe)
    {
        with (prtEntity)
        {
            if (((object_index == objMM1SniperJoe) || (object_index == objMM2SniperJoe) || (object_index == objMM9MachineGunJoe) || (object_index == objReturningMachineGunJoe)) &amp;&amp; !dead)
            {
                switch (object_index)
                {
                    case (objMM1SniperJoe):
                        if (!other.joeLock)
                        {
                            with(other)
                            {
                                calibrateDirection();
                            }
                            xs = arcCalcXspeed(-6, 0.25, x, y, bboxGetXCenterObject(other), other.y + 32, 4);
                            yspeed = -6;
                            xspeed = arcCalcXspeed(-6, 0.25, x, y, bboxGetXCenterObject(other), other.y + 32, 4);
                            shootTimer = -1;
                            shooting = false;
                            shootAmount = -1;
                            shootTotal = -1;
                            jumpCount = -1;
                            sprite_index = sprMM1SniperJoeJump;
                            ground = false;
                            other.joeLock = true;
                        }
                        else if (other.joeLock)
                        {
                            with (other)
                            {
                                if place_meeting(bboxGetXCenter(), y + 32, other)
                                {
                                    playSFX(sfxTimeStopper);
                                    sprite_index = sprMM1SniperJoeMech;
                                    myJoe = objMM1SniperJoe;
                                    joeHealth = other.healthpoints;
                                    with (other)
                                    {
                                        instance_destroy();
                                    }
                                }
                                else if (dead)
                                {
                                    other.joeLock = false;
                                }
                            }
                        }
                        break;
                    case (objMM2SniperJoe):
                        if (!other.joeLock)
                        {
                            with(other)
                            {
                                calibrateDirection();
                            }
                            sprite_index = sprMM2SniperJoeJump;
                            image_index = 0;
                            ground = false;
                            shootTimer = -1;
                            shooting = false;
                            other.joeLock = true;
                            yspeed = -6;
                            xspeed = arcCalcXspeed(-6, 0.25, x, y, bboxGetXCenterObject(other), other.y + 32, 4)
                        }
                        else if (other.joeLock)
                        {
                            with (other)
                            {
                                if place_meeting(bboxGetXCenter(), y + 32, other)
                                {
                                    playSFX(sfxTimeStopper);
                                    sprite_index = sprMM2SniperJoeMech;
                                    myJoe = objMM2SniperJoe;
                                    joeHealth = other.healthpoints;
                                    with (other)
                                    {
                                        instance_destroy();
                                    }
                                }
                                else if (dead)
                                {
                                    other.joeLock = false;
                                }
                            }   
                        }   
                        break; 
                    case (objMM9MachineGunJoe):
                        if (!other.joeLock)
                        {
                            with(other)
                            {
                                calibrateDirection();
                            }
                            // debug code here
                            yspeed = -6;
                            xspeed = arcCalcXspeed(-6, 0.25, x, y, bboxGetXCenterObject(other), other.y + 32, 4);
                            sprite_index = sprMM9MachineGunJoeJump;
                            ground = false;
                            other.joeLock = true;
                        }
                        else if (other.joeLock)
                        {
                            with (other)
                            {
                                if place_meeting(bboxGetXCenter(), y + 32, other)
                                {
                                    playSFX(sfxTimeStopper);
                                    sprite_index = sprMM9MachineGunJoeMech;
                                    myJoe = objMM9MachineGunJoe;
                                    joeHealth = other.healthpoints;
                                    with (other)
                                    {
                                        instance_destroy();
                                    }
                                }
                                else if (dead)
                                {
                                    other.joeLock = false;
                                }
                            }
                        }
                        break;
                    case (objReturningMachineGunJoe):
                        if (!other.joeLock)
                        {
                            with(other)
                            {
                                calibrateDirection();
                            }
                            yspeed = -6;
                            xspeed = arcCalcXspeed(-6, 0.25, x, y, bboxGetXCenterObject(other), other.y + 32, 4)
                            phase = 0;
                            image_index = 3 + 13*color + 6*!hasShield;
                            timer = 0;
                            ground = false;
                            other.joeLock = true;
                        }
                        else if (other.joeLock)
                        {
                            /*
                            if (!dead)
                                phase = 0;
                                image_index = 3 + 13*color + 6*!hasShield;
                                timer = 0;
                                ground = false;*/
                            with (other)
                            {
                                if place_meeting(bboxGetXCenter(), y + 32, other)
                                {
                                    playSFX(sfxTimeStopper);
                                    if other.image_index == 3
                                    {
                                        sprite_index = sprMM10MachineGunJoeMechShield;
                                    }
                                    else if other.image_index == 9
                                        sprite_index = sprMM10MachineGunJoeMech;
                                    else if other.image_index == 16
                                    {
                                        sprite_index = sprMM10MachineGunJoeMechShieldAlt;
                                    }
                                    else if other.image_index == 22
                                        sprite_index = sprMM10MachineGunJoeMechAlt;
                                    myJoe = objReturningMachineGunJoe;
                                    joeHealth = other.healthpoints;
                                    with (other)
                                    {
                                        instance_destroy();
                                    }
                                }
                                else if (dead)
                                {
                                    other.joeLock = false;
                                }
                            }        
                        }
                        break;
                }
            }
            else if (dead)
            {
                joeLock = false;
            }    
        }
    }
    else if (myJoe) // If on ground...
    {
        contactDamage = 8;
        canHit = true;
        if (!ground)
            exit;
        moveTimer += 1; // Increase move timer.
        if (moveTimer == 10)
        {
            image_index = 0; // Set sprite to normal.
        }
        if (moveTimer == 1)
        {
            if (ycoll &gt; 0) // If landing after a jump...
            {
                playSFX(sfxTimeStopper);
            }
            if (image_index &gt; 1) // If sprite is set to jumping...
            {
                image_index = 1; // Set sprite to crouch/land.
            }
            
            calibrateDirection();
            xspeed = 0;
            yspeed = 0;
        }
        
        if (moveTimer == 30)
        {
            if (!doThing) // If not doing anything...
            {
                moveTimer = 0;
                doThing = true;
                shoot = true;
                if (instance_exists(target))
                {
                    if ((target.bbox_bottom != bbox_bottom) || (distance_to_point(target.x, y) &gt; 48))
                    {
                        shoot = false;
                    }
                }
            }
        }
        if (doThing)
        {
            if (!shoot)
            {
                if (moveTimer == 30)
                {
                    image_index = 1;
                }
                else if (moveTimer == 40)
                {
                    yspeed = -5;
                    xspeed = image_xscale * 1.5;
                    ground = 0;
                    image_index = 2;
                    
                    moveTimer = 0;
                    doThing = false;
                }
            }
            else
            {
                if (moveTimer == floor(moveTimer / 15) * 15 &amp;&amp; moveTimer &gt; 0)
                {
                    i = instance_create(x + image_xscale * 16, y, objEnemyBullet);
                    i.xspeed = 6 * image_xscale;
                    i.yspeed = 6 - (moveTimer / 15);
                    playSFX(sfxEnemyShootClassic);
                }
                else if (moveTimer &gt; 60) // If timer exceeds 60...
                {
                    moveTimer = 0;
                    shoot = false;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn
event_inherited();
realContactDamage = contactDamage;
contactDamage = 0;
canHit = false;
moveTimer = 0;
image_index = 0;
sprite_index = sprMM2SniperJoeMechEmpty;
myJoe = noone;
joeHealth = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (healthpoints - global.damage &lt;= 0)
    sprite_index = sprMM2SniperJoeMechEmpty;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>i = instance_create(x, y - 16, myJoe);
with (i)
{
    yspeed = -3;
    respawn = false;
    shootTimer = 0;
    shootAmount = 0;
    shooting = false;
    image_index = 0;
    healthpoints = other.joeHealth;
    if object_index == objReturningMachineGunJoe
    {
        switch(other.sprite_index)
        {
            case(sprMM10MachineGunJoeMechShieldAlt):
            {
                color = 1;
            }
            break;
            
            case(sprMM10MachineGunJoeMechAlt):
            {
                hasShield = false;
                color = 1;
            }
            break;
            
            case(sprMM10MachineGunJoeMech):
            {
                hasShield = false;
            }
            break;
        }
    }
}
sprite_index = sprMM2SniperJoeMechEmpty;
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
