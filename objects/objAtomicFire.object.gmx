<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAtomicFire1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 1;
extraDamage = 0;

fireGo = 0;
atomicFireTimer = 0;

image_speed = 1/4;

pierces = 1;
penetrate = 0;

xspeed = 0;
yspeed = 0;
grav = 0;
blockCollision = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

audio_stop_sound(sfxFireCharging1);
audio_stop_sound(sfxFireCharging2);
audio_stop_sound(sfxFireCharging3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!fireGo &amp;&amp; instance_exists(parent))
{
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!global.frozen)
{
    if(!instance_exists(objAtomicFire))
    {
        audio_stop_sound(sfxFireCharging1);
        audio_stop_sound(sfxFireCharging2);
        audio_stop_sound(sfxFireCharging3);
    }
    if(fireGo == 0)
    {
        atomicFireTimer++;
        if (atomicFireTimer &lt; 90)
        {
            if(!audio_is_playing(sfxFireCharging1))
            {
                playSFX(sfxFireCharging1);
            }
            
            var chargeTimeDiv, chargeCol, primCol, secCol;
            
            primCol = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
            secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
            chargeCol = global.nesPalette[44];
            
            if (atomicFireTimer mod 6 &gt;= 0 &amp;&amp; atomicFireTimer mod 6 &lt; 3)
            {
                global.primaryCol[playerID] = primCol;
                global.secondaryCol[playerID] = secCol;
                global.outlineCol[playerID] = chargeCol;
            }
            else
            {
                global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                global.outlineCol[playerID] = c_black;
            }
        }
        else if (atomicFireTimer &lt; 180)
        {
            if(audio_is_playing(sfxFireCharging1))
            {
                audio_stop_sound(sfxFireCharging1);
            }
            if(!audio_is_playing(sfxFireCharging2))
            {
                playSFX(sfxFireCharging2);
            }
        
            var chargeTimeDiv, chargeCol, primCol, secCol;
            
            primCol = global.nesPalette[38];
            secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
            chargeCol = global.nesPalette[44];
    
            if (atomicFireTimer mod 6 &gt;= 0 &amp;&amp; atomicFireTimer mod 6 &lt; 3)
            {
                global.primaryCol[playerID] = primCol;
                global.secondaryCol[playerID] = secCol;
                global.outlineCol[playerID] = chargeCol;
            }
            else
            {
                global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                global.outlineCol[playerID] = c_black;
            }
        }
        else
        {
            if(audio_is_playing(sfxFireCharging2))
            {
                audio_stop_sound(sfxFireCharging2);
            }
            if(!audio_is_playing(sfxFireCharging3) &amp;&amp; atomicFireTimer == 180)
            {
                playSFX(sfxFireCharging3);
            }
        
            var chargeTimeDiv, chargeCol, primCol, secCol;
            
            primCol = global.nesPalette[40];
            secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
            chargeCol = global.nesPalette[40];
            
            if (atomicFireTimer mod 6 &gt;= 0 &amp;&amp; atomicFireTimer mod 6 &lt; 3)
            {
                global.primaryCol[playerID] = primCol;
                global.secondaryCol[playerID] = secCol;
                global.outlineCol[playerID] = chargeCol;
            }
            else
            {
                global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                global.outlineCol[playerID] = c_black;
            }
        }
        
        if(instance_exists(parent))
        {
            if global.ammo[playerID, global.weapon[playerID]] &lt;= 0
            {
                fireGo = 1;
            }
            
            parent.shootTimer = 0;
            x = parent.x + 16 * parent.image_xscale + (parent.ground * 4 * parent.image_xscale);
            y = parent.y + (parent.ground * 4 * parent.image_yscale);
            image_xscale = parent.image_xscale;
            image_yscale = parent.image_yscale;
            if(atomicFireTimer &lt; 90)
            {
                sprite_index = sprAtomicFire1;
                contactDamage = 1;
            }
            else if(atomicFireTimer &lt; 180)
            {
                sprite_index = sprAtomicFire2;
                contactDamage = 3;
            }
            else
            {
                sprite_index = sprAtomicFire3;
                contactDamage = 6;
            }
        }
        else
        {
            fireGo = 1;
        }   
    }
    else if(fireGo == 1)
    {
        audio_stop_sound(sfxFireCharging1);
        audio_stop_sound(sfxFireCharging2);
        audio_stop_sound(sfxFireCharging3);
        if(sprite_index == sprAtomicFire1)
        {
            global.ammo[playerID, global.weapon[playerID]] = max(0,
            global.ammo[playerID, global.weapon[playerID]] - 1 / (global.energySaver + 1))
        }
        else if(sprite_index == sprAtomicFire2)
        {
            global.ammo[playerID, global.weapon[playerID]] = max(0,
            global.ammo[playerID, global.weapon[playerID]] - 2 / (global.energySaver + 1))
        }
        else if(sprite_index == sprAtomicFire3)
        {
            global.ammo[playerID, global.weapon[playerID]] = max(0,
            global.ammo[playerID, global.weapon[playerID]] - 4 / (global.energySaver + 1))
        }
        playSFX(sfxHeatManTackle);
        xspeed = image_xscale * 3;
        fireGo = 2;
    }
    else if(fireGo == 2)
    {
        fireGo = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var chargeTime = 180; // Set charge time for this weapon
var initChargeTime = 20;

if (instance_number(objAtomicFire) &lt; 2 &amp;&amp; global.ammo[playerID, global.weapon[playerID]])
{
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer == 0)
    {   
        a = fireWeapon(16, 0, objAtomicFire, 2, 0, 1, 0);
        if (a)
        {
            //a.xspeed = image_xscale * 3; 
            //a.yspeed = image_yscale * 0;
            a.image_xscale = image_xscale;
            a.image_yscale = image_yscale;
            //if (!audio_is_playing(sfxHeatManTackle))
            //{
                //audio_stop_sound(sfxHeatManTackle);
                //playSFX(sfxHeatManTackle);
            //}
        }
    }
    /*if (global.keyShoot[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer == 0)
    {   
        if (!atomicFireHeld)
        {
            a = fireWeapon(16, 0, objAtomicFire, 2, 0, 1, 0);
            if (a)
            {
                a.xspeed = image_xscale * 3; 
                a.yspeed = image_yscale * 0;
                a.image_xscale = image_xscale;
                a.image_yscale = image_yscale;
                if (!audio_is_playing(sfxHeatManTackle))
                {
                    audio_stop_sound(sfxHeatManTackle);
                    playSFX(sfxHeatManTackle);
                }
                atomicFireHeld = true;
                chargeTimer = 1;
            }
        }
    }*/
    
    //////////////
    // Charging //
    //////////////
    /*
    if (global.enableCharge)
    {
        if ((global.keyShoot[playerID] || (isSlide &amp;&amp; chargeTimer &gt; 0)) &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE))
        {
            if (!isShoot)
            {
                isCharge = true;
                
                if (!isSlide)
                {
                    initChargeTimer += 1;
                }
                
                if (initChargeTimer &gt;= initChargeTime)
                {
                    if (chargeTimer &lt; 90)
                    {
                        if(!audio_is_playing(sfxFireCharging1))
                        {
                            playSFX(sfxFireCharging1);
                        }
                    }
                    else if (chargeTimer &lt; 180)
                    {
                        if(audio_is_playing(sfxFireCharging1))
                        {
                            audio_stop_sound(sfxFireCharging1);
                        }
                        if(!audio_is_playing(sfxFireCharging2))
                        {
                            playSFX(sfxFireCharging2);
                        }
                    }
                    else if (chargeTimer == 180)
                    {
                        if(audio_is_playing(sfxFireCharging2))
                        {
                            audio_stop_sound(sfxFireCharging2);
                        }
                        if(!audio_is_playing(sfxFireCharging3))
                        {
                            playSFX(sfxFireCharging3);
                        }
                    }
                    
                    chargeTimer++;
                    
                    if (chargeTimer &lt; 90)
                    {
                        var chargeTimeDiv, chargeCol, primCol, secCol;
                        chargeTimeDiv = round(chargeTime / 3);
                        
                        primCol = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                        secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                        chargeCol = global.nesPalette[44];
                        
                        if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                        {
                            global.primaryCol[playerID] = primCol;
                            global.secondaryCol[playerID] = secCol;
                            global.outlineCol[playerID] = chargeCol;
                        }
                        else
                        {
                            global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                            global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                            global.outlineCol[playerID] = c_black;
                        }
                    }
                    else if (chargeTimer &lt; 180)
                    {
                        var chargeTimeDiv, chargeCol, primCol, secCol;
                        chargeTimeDiv = round(chargeTime / 3);
                        
                        primCol = global.nesPalette[38];
                        secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                        chargeCol = global.nesPalette[44];
                
                        if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                        {
                            global.primaryCol[playerID] = primCol;
                            global.secondaryCol[playerID] = secCol;
                            global.outlineCol[playerID] = chargeCol;
                        }
                        else
                        {
                            global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                            global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                            global.outlineCol[playerID] = c_black;
                        }
                    }
                    else
                    {
                        var chargeTimeDiv, chargeCol, primCol, secCol;
                        chargeTimeDiv = round(chargeTime / 3);
                        
                        primCol = global.nesPalette[40];
                        secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                        chargeCol = global.nesPalette[40];
                        
                        if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                        {
                            global.primaryCol[playerID] = primCol;
                            global.secondaryCol[playerID] = secCol;
                            global.outlineCol[playerID] = chargeCol;
                        }
                        else
                        {
                            global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFire]];
                            global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFire]];
                            global.outlineCol[playerID] = c_black;
                        }
                    }
                }
            }
        }
        else // Release the charge shot
        {
            if (!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer != 0 &amp;&amp; !isSlide)
            {
                /////////////////////
                // ACTUAL SHOOTING //
                /////////////////////
                
                if (chargeTimer &lt; 90) // not charged
                {
                    a = fireWeapon(16, 0, objAtomicFire, 2, 1, 1, 0);
                    if (a)
                    {
                        a.xspeed = image_xscale * 3; // zoom
                        a.yspeed = 0;
                        a.image_xscale = image_xscale;
                        a.image_yscale = image_yscale;
                        if (!audio_is_playing(sfxHeatManTackle))
                        {
                            playSFX(sfxHeatManTackle);
                        }
                    }
                }
                else if (chargeTimer &lt; 180) // half charge
                {
                    a = fireWeapon(16, 0, objAtomicFire, 2, 2, 1, 0);
                    if (a)
                    {
                        a.xspeed = image_xscale * 3; // zoom
                        a.yspeed = 0;
                        a.sprite_index = sprAtomicFire2;
                        a.extraDamage = 2;
                        a.contactDamage += a.extraDamage;
                        a.image_xscale = image_xscale;
                        a.image_yscale = image_yscale;
                        if (!audio_is_playing(sfxHeatManTackle))
                        {
                            playSFX(sfxHeatManTackle);
                        }
                    }
                }
                else
                {
                    a = fireWeapon(16, 0, objAtomicFire, 2, 4, 1, 0);
                    if (a)
                    {
                        a.xspeed = image_xscale * 3; // zoom
                        a.yspeed = 0;
                        a.sprite_index = sprAtomicFire3;
                        a.extraDamage = 5;
                        a.contactDamage += a.extraDamage;
                        a.image_xscale = image_xscale;
                        a.image_yscale = image_yscale;
                        if (!audio_is_playing(sfxHeatManTackle))
                        {
                            playSFX(sfxHeatManTackle);
                        }
                    }
                }
                
                // Reset all charging stuff
                chargeTimer = 0;
                initChargeTimer = 0;
                audio_stop_sound(sfxFireCharging1);
                audio_stop_sound(sfxFireCharging2);
                audio_stop_sound(sfxFireCharging3);
                playerPalette(); // Reset the colors
            }
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue("fire", 0);

if(sprite_index == sprAtomicFire1)
{
    specialDamageValue("nature", 3);
}
if(sprite_index == sprAtomicFire2)
{
    specialDamageValue("nature", 6);
}
if(sprite_index == sprAtomicFire3)
{
    specialDamageValue("nature", 12);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("ATOMIC FIRE", global.nesPalette[18], global.nesPalette[34], sprWeaponIconsAtomicFire);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

audio_stop_sound(sfxFireCharging1);
audio_stop_sound(sfxFireCharging2);
audio_stop_sound(sfxFireCharging3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (fireGo == 0)
{
    global.ammo[playerID, global.weapon[playerID]] = max(0,
    global.ammo[playerID, global.weapon[playerID]] - 1 / (global.energySaver + 1))
    if(other.healthpoints &gt; contactDamage)
    {
        audio_stop_sound(sfxFireCharging1);
        audio_stop_sound(sfxFireCharging2);
        audio_stop_sound(sfxFireCharging3);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

fireGo = 2;
contactDamage = 0;
if(sprite_index == sprAtomicFire1)
{
    global.ammo[playerID, global.weapon[playerID]] = max(0,
    global.ammo[playerID, global.weapon[playerID]] - 1 / (global.energySaver + 1))
}
else if(sprite_index == sprAtomicFire2)
{
    global.ammo[playerID, global.weapon[playerID]] = max(0,
    global.ammo[playerID, global.weapon[playerID]] - 2 / (global.energySaver + 1))
}
else if(sprite_index == sprAtomicFire3)
{
    global.ammo[playerID, global.weapon[playerID]] = max(0,
    global.ammo[playerID, global.weapon[playerID]] - 4 / (global.energySaver + 1))
}
audio_stop_sound(sfxFireCharging1);
audio_stop_sound(sfxFireCharging2);
audio_stop_sound(sfxFireCharging3);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var detach = !global.keyShoot[playerID];
if (global.playerHealth[playerID] &lt;= 0)
{
    detach = 1;
}

if (detach || parent.isSlide || parent.teleporting || parent.isHit || parent.climbing)
{
    fireGo = 1;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
