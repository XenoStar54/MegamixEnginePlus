<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSuperBassBossBeamBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canHit = false;
canDamage = true;
blockCollision = 0;
contactDamage = 4;

grav = 0;
timer = 0;
image_speed = 0.3;

parent = noone;

xOffset = 0;
yOffset = 8;

spriteTip = sprSuperBassBossBeamTip;
spriteBody = sprSuperBassBossBeamBody;
spriteOrigin = sprSuperBassBossBeamOrigin;

height = abs(bbox_top-bbox_bottom);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(instance_exists(parent) &amp;&amp; parent != noone &amp;&amp; !parent.dead)
    {
        x = parent.x + xOffset*sign(image_xscale);
        y = parent.y + yOffset*sign(image_yscale);
        xspeed = parent.xspeed;
        yspeed = parent.yspeed;
    }
    else instance_destroy();
    
    timer++;
    if(checkSolid(0,sign(image_yscale)) &amp;&amp; timer mod 5 == 0)
    {
        with(instance_create(x-image_xscale*8,y+image_yscale*height,objSlideDust))
        {
            image_xscale = other.image_xscale;
            image_yscale = sign(other.image_yscale);
            dieToSpikes = 0;
            while(checkSolid(0,0)) y -= image_yscale;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// recalculate beam length
image_yscale = sign(image_yscale);

var distanceToGround = 0;
while(!checkSolid(0,sign(image_yscale) + image_yscale*(distanceToGround-height)) &amp;&amp; y + distanceToGround &lt;= view_hview)
{
    distanceToGround++;
}

image_yscale = sign(image_yscale) * (distanceToGround/height);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; abs(image_yscale); i++)
{
    if(i + 1 &gt;= abs(image_yscale))
    {
        draw_sprite_ext(spriteTip,image_index,x,y+height*i + sign(image_yscale),sign(image_xscale),sign(image_yscale),0,c_white,1);
    }
    else if(i == 0)
    {
        draw_sprite_ext(spriteOrigin,image_index,x,y+height*i + sign(image_yscale),sign(image_xscale),sign(image_yscale),0,c_white,1);
    }
    else
    {
        draw_sprite_ext(spriteBody,image_index,x,y+height*i + sign(image_yscale),sign(image_xscale),sign(image_yscale),0,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
