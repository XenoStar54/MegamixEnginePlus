<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSwordMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprSwordMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

customPose = true;
hasTriggeredFall = false;
introType = 1;
contactDamage = 4;
ground = false;
attackTimer = 0;

//SwordManSpecialCode
xspeedCheck = 0
mm8Music = 0;
firstAttack = 1
imageChange = 0
dashStop = 0
spawnHead = 0
stoneX = 0
stoneBaseX = 0
waveID = noone
waveMax = 0
suck = 0
sucks = 0
suckSpeed = 1.8;
flameSword = 0
fireSlash = 0
fireWall = 0
fallStone = 0
firstAttack = 1
effectTimer = 0

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
attackTimerMax = 999;
phase = 0;
delay = 0;

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = make_color_rgb(231, 0, 91);
healthBarSecondaryColor[1] = make_color_rgb(199, 191, 145);

music = "Rockman8intro.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicLoop = true;
musicLoopSecondsStart = 2.930;
musicLoopSecondsEnd = 36.000;

enemyDamageValue(objWaterBalloon, 4);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{    
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = 0.15;
        calibrateDirection();
    }
    else if (isIntro)
    {
        // custom intro:
        if (attackTimer == 0) &amp;&amp; (introType == 1)
        {
            image_index = 0;
            sprite_index = sprSwordStone
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            // since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            y = ystart;
            attackTimer++;
            if (attackTimer &lt; 8)            
                image_index = 0;
            
            if (attackTimer == 8){}  
            if (attackTimer == 5){
            screenShake(64, 0, 2);
            playSFX(sfxFrostLand)
            }           
            
            if (attackTimer == 10 || attackTimer == 15 || attackTimer == 20 || attackTimer == 25 || attackTimer == 30 || attackTimer == 35) 
            playSFX(sfxFrostLand)
                        
            if (attackTimer == 75){           
                image_index = 1;
                playSFX(sfxSwordManSword)
            }
            
            if (attackTimer == 80)            
                image_index = 2;
            
            if (attackTimer == 85){          
                image_index = 3;
                playSFX(sfxSwordManSword)
            }
            
            if (attackTimer == 90)            
                image_index = 4;
                
            if (attackTimer == 95)            
                image_index = 5;
                
            if (attackTimer == 100)            
                image_index = 6;
                
            if (attackTimer == 150){         
                image_index = 0;
                sprite_index = sprSwordMan
               for (b = 0; b &lt; 4; b += 1)// 1
                  {
                   if (b == 0)
                   {
                     xx = 12;
                     yy = -12;
                     xs = 0;
                     ys = -5;
                   }
                  if (b == 1)
                  {
                     xx = 12;
                     yy = 4;
                     xs = 1;
                     ys = -3;
                  }
                  if (b == 2)
                  {
                     xx = -12;
                     yy = 4;
                     xs = -1;
                     ys = -1;
                  }
                  if (b == 3)
                  {
                     xx = -12;
                     yy = -12;
                     xs = -3;
                     ys = -4;
                  }
                    i = instance_create(bboxGetXCenter() + xx*image_xscale, bboxGetYCenter() + yy, objEnemyBullet);
                    i.sprite_index = sprSwordShards;
                    i.image_index = b;
                    i.image_xscale = image_xscale;
                    i.grav = 0.15;
                    i.xspeed = xs*image_xscale;
                    i.yspeed = ys;
                    i.reflectable = 0;
                  }
                  playSFX(sfxSwordStoneBreak);   
               for (b = 0; b &lt; 4; b += 1)// 2
                  {
                   if (b == 0)
                   {
                     xx = 9;
                     yy = -9;
                     xs = 0;
                     ys = -5;
                   }
                  if (b == 1)
                  {
                     xx = 9;
                     yy = 4;
                     xs = 1;
                     ys = -3;
                  }
                  if (b == 2)
                  {
                     xx = -9;
                     yy = 4;
                     xs = -1;
                     ys = -1;
                  }
                  if (b == 3)
                  {
                     xx = -9;
                     yy = -9;
                     xs = -3;
                     ys = -4;
                  }
                    i = instance_create(bboxGetXCenter() + xx*image_xscale, bboxGetYCenter() + yy, objEnemyBullet);
                    i.sprite_index = sprSwordShards2;
                    i.image_index = b;
                    i.image_xscale = image_xscale;
                    i.grav = 0.18;
                    i.xspeed = xs*image_xscale;
                    i.yspeed = ys;
                    i.reflectable = 0;
                  }
            }
            
            if (attackTimer == 200)
            image_index = 1
            
            if (attackTimer == 205)
            image_index = 2
            
            if (attackTimer == 210)
            image_index = 3
            
            if (attackTimer == 215)
            image_index = 4
            
            if (attackTimer == 230)
            image_index = 5
            
            if (attackTimer == 235)
            image_index = 6
            
            if (attackTimer == 240)
            image_index = 4
            
            if (attackTimer == 280){
                image_speed = 0;
                isIntro = false;
                attackTimer = 0;
                blockCollision = blockCollisionStart;
                canFillHealthBar = true;
            }
        }
    }
    if (isFight)
    {
        if (suck)
        {
            with (objMegaman)
                    {
                        if (id == other.id)
                            continue;
                        if (!dead)
                        {
                            if (climbing)
                            {
                                continue;
                            }
                            
                            
                            with (other)
                            {
                                if (collision_rectangle(x, view_yview, x + image_xscale * view_wview, view_yview + view_hview, other.id, false, false))
                                {
                                    with (other)
                                    {
                                        shiftObject(-other.suckSpeed * other.image_xscale, 0, 1);
                                    }
                                }
                            }
                        }
                    }
        }
        else
        {}
        
        attackTimer += 1;
        if(mm8Music == 0){
            mm8Music = 1;
            playMusic("MM8Boss.ogg", "OGG",0, 5.800, 26.000, 1, 0.8);
        }

        switch (phase)
        {
            case 0: 
                image_index = 0
                if (attackTimer == 1){}
      
                if (attackTimer &gt;= 30)
                {
                    if(firstAttack){
                    phase = choose(1,1,4,4,6,6,9,9) 
                    firstAttack = 0
                    }
                    
                    if(flameSword)
                    phase = choose(4,4,6,6,9,9) 
                    
                    if(fireSlash)
                    phase = choose(1,1,4,4,9,9)
                    
                    if(fallStone)
                    phase = choose(1,1,6,6,9,9)
                    
                    if(fireWall)
                    phase = choose(1,1,4,4,6,6)
                      
                    imageChange = false          
                    attackTimer = 0;
                }
                break;
                
           case 1: // Pose
           
           if (attackTimer == 1)
           image_index = 1
           
           if (attackTimer == 7)
           image_index = 2
           
           if (attackTimer == 20){
           phase = 2
           attackTimer = 0;
           spawnHead = true
           
           if(image_xscale = 1){
           xspeedCheck = 1
              }else{
                xspeedCheck = 0
              }
           }
           
           break;
           
           case 2: // Dash
           if(image_index == 16){
           effectTimer +=1
              if(effectTimer == 5){
                 xd = (x + (10 * -image_xscale))
                        if positionCollision(xd, (bbox_bottom + 1))
                        {
                            i = instance_create(xd, (bbox_bottom - 1), objSlideDust)
                            i.image_xscale = image_xscale
                            i.vspeed = 0
                            i.hspeed = ((-xspeed) / 8)
                        }
                 effectTimer = 0
                 }     
           }
           
           if(!dashStop){
              if(xspeedCheck){
                  xspeed = 2.2;
                    }else{
                      xspeed = -2.2
                    }
              }
           
           if (attackTimer == 10)
           image_index = 12
           if (attackTimer == 15)
           image_index = 13
           if (attackTimer == 20)
           image_index = 14
           
           if (attackTimer == 40){
           image_index = 15
           image_xscale *= -1;
           }
           
           if (attackTimer == 45)
           image_index = 16
           
           if (instance_exists(objSwordBody) &amp;&amp; !imageChange){
           image_index = 11
           imageChange = true
           mask_index = sprSwordNoBodyMask;
           }
           
           if (attackTimer &gt;= 30){
                if ((bbox_left &lt;= view_xview + 8 &amp;&amp; /* image_xscale */ -image_xscale == -1)
                    || (bbox_right &gt;= view_xview + view_wview - 8 &amp;&amp; /* image_xscale */ -image_xscale == 1)
                    || (checkSolid(/* image_xscale */ -image_xscale * 12, 0) || (xcoll * -image_xscale &gt; 0))){
                     dashStop = true
                     xspeed = 0
                }
           }
           
           if (spawnHead)
           {
             var inst;
             var headID;
             headID = id;
             inst = instance_create(x, y, objSwordBody);
             with (inst)
             {
                // attached head default values.
                 respawn = false;
                 bodyInstanceStore = headID;
                 image_xscale = objSwordMan.image_xscale;
             }
             spawnHead = false;
           }
           break;
           
           case 3: // Flame Sword!
           
           if (attackTimer == 1){
           image_index = 17
           playSFX(sfxSwordManFlameSword)
           }
           if (attackTimer == 5){
           image_index = 18
           for (i = 0; i &lt;= 15; i += 5)
                {
                    var fire = instance_create(x + 1*image_xscale, y, objSwordFire);
                    fire.x = objSwordMan.x + i*image_xscale;
                    fire.ID = i/5;
                    fire.xspeed = 0.5*image_xscale
                }
           for (i = 0; i &lt;= 15; i += 5)
                {
                    var fire = instance_create(x + 1*image_xscale, y - 2, objSwordFire);
                    fire.x = objSwordMan.x + i*image_xscale;
                    fire.y = objSwordMan.y + i;
                    fire.yspeed = -0.4
                    fire.ID = i/5;
                    fire.xspeed = 0.5*image_xscale
                }
           for (i = 0; i &lt;= 15; i += 5)
                {
                    var fire = instance_create(x + 1*image_xscale, y + 3, objSwordFire);
                    fire.x = objSwordMan.x + i*image_xscale;
                    fire.yspeed = 0.1
                    fire.ID = i/5;
                    fire.xspeed = 0.5*image_xscale
                }
           }
           
           if (attackTimer == 14)
           image_index = 19
           if (attackTimer == 19)
           image_index = 20
           if (attackTimer == 24)
           image_index = 21
           if (attackTimer == 115)
           image_index = 3
           if (attackTimer == 125)
           image_index = 2
           if (attackTimer == 130)
           image_index = 1
           if (attackTimer == 135){
           attackTimer = 0
           phase = 0
           firstAttack = 0
           dashStop = 0
           effectTimer = 0
           
           //Phase
           flameSword = 1
           fireSlash = 0
           fireWall = 0
           fallStone = 0
           }
           
           break;
           
           case 4: // go to Fall Stone
           
           if (attackTimer == 4){
           image_index = 7
           xspeed = (-0.5 * image_xscale)
           yspeed = -8
           }
           if(xcoll != 0){
           xspeed = 0
           yspeed = 0
           grav = 0
           attackTimer = 0
           phase = 5
           image_index = 8
           }
           
           break;
           
           case 5: // Fall Stone         
           
           if (attackTimer == 5){
           image_index = 9
           if (instance_exists(objMegaman))
                        stoneBaseX = sprite_get_xcenter_object(objMegaman)
                        else
                        stoneBaseX = round((view_xview + (view_wview / 2)))
                        stoneX = stoneBaseX
                        stoneX = min(max(stoneX, (view_xview + 64)), ((view_xview + view_wview) - 64));
                        instance_create(stoneX, view_yview - 16, objSwordStone)
           }
           if (attackTimer == 15){
           image_index = 7
           grav = 0.25
           xspeed = (0.5 * image_xscale)           
           }
           if (attackTimer &gt;= 15 &amp;&amp; ground){
           image_index = 0
           xspeed = 0           
           }
           if (attackTimer &gt;= 65 &amp;&amp; ground){
           phase = 0
           attackTimer = 0   
           //Phase
           flameSword = 0
           fireSlash = 0
           fireWall = 0  
           fallStone = 1    
           }
           break;
           
           case 6: // Fire Slash!
           
           if (attackTimer == 1)
           image_index = 1
           
           if (attackTimer == 7)
           image_index = 2
           
           if (attackTimer == 20){
           phase = 7
           attackTimer = 0;
           spawnHead = true
           }
           
           break;
           
           case 7: 
           if(spawnHead){
           proj = instance_create(x, y - 16, objSwordHead)
           proj.image_xscale = image_xscale;
           spawnHead = false
           }
           
           if (attackTimer == 20){
           with(objSwordHead)
           go = true
           }
           
           if (attackTimer == 30){
           with(objSwordHead)
           blockCol = true
           }
           
           if (attackTimer == 120){
           with(objSwordHead)
           back = true
           }

           if (instance_exists(objSwordHead) &amp;&amp; !imageChange){
           image_index = 10
           imageChange = true
           mask_index = sprSwordNoBodyMask;
           }
           
           break;
           
           case 8: //Pose
           
           if (attackTimer == 1)
           image_index = 3
           if (attackTimer == 5)
           image_index = 2
           if (attackTimer == 10)
           image_index = 1
           if (attackTimer == 15){
              attackTimer = 0
              phase = 0
              firstAttack = 0
              
              //Phase
              flameSword = 0
              fireSlash = 1
              fireWall = 0  
              fallStone = 0
           }
           
           break;
           
           case 9: //Sword Man Wall
           
           if (attackTimer == 1)
           image_index = 1
           if (attackTimer == 5)
           image_index = 2
           if (attackTimer == 10)
           image_index = 3
           if (attackTimer == 15)
           image_index = 4       
           
           if (attackTimer == 16){
              attackTimer = 7
              phase = 10
              suck = true
           }
           
           break;
           
           case 10:
           
           image_index = 4 + (attackTimer div 5) mod 3;
           
           if (attackTimer == 8 &amp;&amp; waveMax &lt;= 30){
           waveID = instance_create(x, y + 12, objSwordWave);
           waveID.image_xscale = image_xscale;
           waveMax++
           attackTimer = 0
           }

           if (waveMax &gt;= 30){
              attackTimer = 0
              phase = 11
              waveMax = 0
              suck = false
           }
           
           break;
           
           case 11: //Pose
           
           if (attackTimer == 1)
           image_index = 3
           if (attackTimer == 5)
           image_index = 2
           if (attackTimer == 10)
           image_index = 1
           if (attackTimer == 15){
              attackTimer = 0
              phase = 0
              firstAttack = 0
              
              //Phase
              flameSword = 0
              fireSlash = 0
              fireWall = 1
              fallStone = 0
           }
           
           break;

        }   
    }
}
else
{ }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!(collision_rectangle(x - 7  * image_xscale, y - 13 * image_yscale, x + 6 * image_xscale, y - 29 * image_yscale, other.id, false, false)))
{
    other.guardCancel = 3;
}

//x - 8
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Destroy projectiles on death
with (objSwordFire)
{
    instance_destroy();
}
with (objSwordStone)
{
    instance_destroy();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if ((iFrames mod 4) &lt; 2 || !iFrames)
        {
            event_user(2);
        }
        else // Hitspark
        {
            d3d_set_fog(true, c_white, 0, 0);
            event_user(2);
            d3d_set_fog(false, 0, 0, 0);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
