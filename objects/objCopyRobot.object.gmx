<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMegaman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprMegaman;
poseImgSpeed = 0.2;
contactDamage = 4;
grav = 0.25;
myGrav = 0.25;

pointSeparationA = 80;
pointSeparationB = 48;
spriteMain = sprCopyRobotSpriteBuffer;//sprElecMan;

stopOnFlash = true;
ground = false;
timer = 0;
phase = 0;
walkSpeed = 1.3;//Elec Man moves at 2 pixels per second.
airWalkSpeed = 2-.125;//With copy robot in the NES release, his air walk speed is *always* copied from Elec Man's, while his normal walking speed is inherited from mega man. This makes his jumping air speed faster!

//@cc Overrwrite the walk speed with whatever Mega Man's is (by default it's the same as Megamix's, but if you're using a burst chaser mode this allows for quick duplication).
doWalkOverwrite = true;
//@cc Probably the more important one: Replaces Copy Robot's airWalkSpeed with Mega Man's (see above for why you might want this to be the case). As Megamix does not have differing jump speeds for mega man, it will pull from walk speed.
doAirWalkOverwrite = false;


xSpeedStore = 0;

doesGetKnockback = 1;
hitInvul = 60;

storePrevLocation = -5000;

dir = 1;
pointPos[0] = x;
pointPos[1] = x;
pointPos[2] = x;
nextVantagePoint = 2;
realNextVantagePoint = 2;

// 0 - checks if player projectiles exist; 1 - checks if shot button has been pressed not held
shotDetectionMode = 1;

// 0 - updates checkpoint before shooting; 1 - updates checkpoint after shooting
checkpointUpdateMode = 1;

shotProjectile = objElecManBullet;


projectileTimer = 0;

shotSound = sfxThunderBeam;

// Health Bar
healthBarPrimaryColor[1] = 18;
healthBarSecondaryColor[1] = 33;

// Music
music = "Mega_Man_1.nsf";
musicType = "VGM";
musicTrackNumber = 13;

sprite_index = sprCopyRobotSpriteBuffer;
mask_index = mskMegaman;

// weak to metal, mildly weak to explosions and rocks, resistant to ice

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objIceWall, 0);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 4);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 4);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 2);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 1);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 2);
enemyDamageValue(objIceSlasher, 0);



doPlayerExplosion = false;//Handled by copybot to simulate the player's.
multiplayerMax = 8;//Up this value if you need more players in multiplayer.
//WEAPON-REQUIRED VALUES. In the event he crashes from some new weapon or setup for actual Mega Man, adding its default value here will generally fix most problems.
gravfactor = 1;
isHit = false;
climbing = false;
isSlide = false;
teleporting = false;
xDir = 0;
yDir = 1;
costumeID = 0;
playerID = 0;//Always inherit from 0.
currentWeapon = 0;

copyAnimCounter = 0;
//shootWaitTimer = 0;//Needed as the player will be firing the same weapon.

shootType = 0;

copyBotCharge = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objFlashmanTimeStop)
{
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(isIntro)
    {
        dir = image_xscale;
        pointPos[0] = view_xview+view_wview/2 + pointSeparationA*image_xscale;
        pointPos[1] = view_xview+view_wview/2;
        pointPos[2] = view_xview+view_wview/2 - pointSeparationB*image_xscale;
        realNextVantagePoint = nextVantagePoint;
        grav = myGrav;
        storePrevLocation = -5000;
    }
    else if (isFight)
    {
        if(sprite_index != spriteMain)
        {
            sprite_index = spriteMain;
        }
        
        if(!instance_exists(objMegaman)) // if Mega is ded, freeze in place like in 1
        {
            xspeed = 0;
            yspeed = 0;
            xSpeedStore = 0;
            grav = 0;
            phase = -1;
        }
        
        if(phase == 0) // run to a vantage point
        {
            if(ground)
            {
                // ok gotta start caring for being on the ground
                var nextPoint = realNextVantagePoint;
                if(nextPoint &gt; 2) nextPoint = 1;
                
                
                if(abs(x - pointPos[nextPoint]) &lt; abs(xSpeedStore))
                {
                    // shoot
                    timer = 0;
                    phase = 1;
                    xspeed = 0;
                    xSpeedStore = 0;
                    image_xscale = dir;
                    if(!checkpointUpdateMode) // update vantage point
                    {
                        realNextVantagePoint++;
                        if(realNextVantagePoint &gt; 3) realNextVantagePoint = 0;
                    }
                }
                else
                {
                    dir = sign(pointPos[nextPoint] - x) + (sign(pointPos[nextPoint] - x) == 0);
                    image_xscale = dir;
                    xSpeedStore = walkSpeed*dir;
                }
                if(timer mod 7 == 0)
                {
                    
                    image_index = max(2,image_index+1);
                    if (image_index &gt; 5)
                    {
                        image_index = 2;
                    }
                    
                }
                timer++;
                
                if(checkSolid(xSpeedStore,0)) // obstacle detected, try jumping over
                {
                    if(storePrevLocation == x) // I failed to jump over, establish new vantage point here
                    {
                        if(abs(x - pointPos[0]) &lt; abs(x - pointPos[2]))
                        {
                            //pointPos[0] = x;
                            dir = 1;
                        }
                        else
                        {
                            //pointPos[2] = x;
                            dir = -1;
                        }
                        timer = 0;
                        phase = 0;
                        storePrevLocation = -5000;
                    }
                    else // jump and save previous location
                    {
                        yspeed = -4;//ySpeedAim(y,y-34*sign(grav),grav);
                        image_index = 1;
                        storePrevLocation = x;
                    }
                }
                var shotCheck = 0;
                if(shotDetectionMode)
                {
                    for(var i = 0; i &lt; global.playerCount; i++)
                        if(global.keyShootPressed[i])
                            shotCheck = 1;
                }
                else
                {
                    if(instance_exists(prtPlayerProjectile)) shotCheck = 1;
                }
                if(shotCheck) // jump on shot
                {
                    timer = 0;
                    phase = 4;
                    yspeed = -4;//ySpeedAim(y,y-34*sign(grav),grav);
                    image_index = 1;
                    var rng = choose(-1,1);
                    xSpeedStore = (airWalkSpeed)*rng;
                }
            }
            else
            {
                calibrateDirection();
                image_index = 1;
                timer = 0;
            }
        }
        else if(phase == 1 &amp;&amp; projectileTimer &lt;= 0) // shoot
        {
            calibrateDirection();
            if(ground &amp;&amp; xSpeedStore != 0)
            {
                xSpeedStore = 0;
            }
            
            
               
            //image_index = 7;
            //myProjectile = instance_create(x,y,shotProjectile);
            //myProjectile.image_xscale = image_xscale;
            //projectileTimer = 16;
                
                
            with (objMegaman)
            {
                with (prtPlayerProjectile)//In a boss fight, no projectile should ever respawn.
                {
                    if (respawn == 0)
                    {
                        respawn = 7;
                    }
                    bulletLimitCost *= -1;//We'll switch all these back at the end.
                }
                
                var keepStandStill = shootStandStillLock == true;//Need this here.
                
                lockHold = shootStandStillLock == true;//isLocked(PL_LOCK_SHOOT);
                
                if (lockHold)//If the player is currently shooting, release sssl.
                {
                    shootStandStillLock = lockPoolRelease(PL_LOCK_SHOOT);
                }
            
                var tempPress = global.keyShootPressed[playerID];
                global.keyShootPressed[playerID] = true;
                
                var tX = x;
                var tY = y;
                var tXS = image_xscale;
                var tYS = image_yscale;
                
                
                
                var tAmmo = global.ammo[0, global.weapon[0]];
                global.ammo[0,global.weapon[0]] = 255;
                var tShootTimer = shootTimer;
                var tIsShoot = isShoot;
                
                var tXspeed = xspeed;
                
                var tGround = ground;
                var tClimbing = climbing;
                var tVehicle = vehicle;
                var tCharge = chargeTimer;
                var tXDir = xDir;
                var tYDir = yDir;
                
                
                //var tPID = playerID;
                //playerID = other.multiplayerMax;//In the event that multiplayer goes beyond 8 players, change this to the max.
                xDir = other.image_xscale;
                if (!other.ground || ground)
                {
                    yDir = 0;
                }
                else if (distance_to_point(other.x,y) &lt; 48)
                {
                    if (distance_to_point(other.x,y) &lt; 8)
                    {
                        xDir = 0;
                    }
                    if (y &gt; other.y)
                    {
                        yDir = 1;
                    }
                    else
                    {
                        yDir = -1;
                    }
                }
                x = other.x;
                y = other.y;
                image_xscale = other.image_xscale;
                image_yscale = other.image_yscale;
                ground = other.ground;
                climbing = false;
                vehicle = noone;
                chargeTimer = 0;
                
                
                
                //var weapon = indexOf(global.weaponID,);
                var bossWeapon = false;//Use for when you're using a non-player weapon as your firing instance.
                if (global.weapon[0] &gt;= 0)
                {
                    var wep = global.weaponObject[global.weapon[0]];
                    
                    
                    /*List of weapons currently with problems:
                        Hard Knuckle
                        Atomic Fire
                        Skull Barrier (Needs to be renerfed)
                        Gravity Hold (Just make damage + gravity flip?)
                        Water Wave 
                        Charge Kick
                        Dark Stasis
                        
                        
                        Any directional weapon (need a full input array).
                        Any weapon with an after-effect.
                    */
                    switch (wep)
                    {
                        case objLeafShield:
                        case objJewelSatellite:
                            with (wep)
                            {
                                if (faction == 3 &amp;&amp; (object_index == objLeafShield &amp;&amp; isShield) || (object_index == objJewelSatellite &amp;&amp; followPlayer))// &amp;&amp; xspeed == yspeed)
                                {
                                    printErr("STOP");
                                    var xD = parent.xDir;
                                    if (xD == 0)
                                    {
                                        xD = parent.image_xscale;
                                    }
                                    xspeed = xD*4;
                                    if (xspeed == 0 &amp;&amp; wep == objLeafShield)
                                    {
                                        yspeed = parent.yDir*4;
                                    }
                                    if (wep == objJewelSatellite)
                                    {
                                        xspeed *= 3/4;
                                        yspeed *= 3/4;
                                    }
                                    isShield = false;
                                    followPlayer = false;
                                    parent = noone;
                                    //event_perform(ev_step,ev_step_normal);
                                    wep = -1;
                                }
                            }
                            
                                
                            
                        break;
                        
                    }
                    switch (wep)
                    {
                        case objRushCoil:
                        case objRushJet:
                        case objRushCycle:
                        case objTrebleBoost:
                        //case objSuperArm:
                        
                        case objSlashClaw://Self-calls locks to the parent, which isn't megaman here.
                        case objSakugarne://Too much complexity to set up for this thing.
                        case objWireAdapter://See Slash Claw.
                        case objTenguBlade://See Slash Claw.
                        case objTopSpin://See Slash Claw.
                        case objWaterShield://Can be workable, but will need a modified variant.
                        case objOilSlider:
                        case objHardKnuckle:
                            wep = objBusterShot;
                        break;
                        case objPharaohShot://Needs some fixes.
                            wep = objBusterShot;
                        break;
                        case objTimeStopper:
                        case objFlashStopper://Temporary until we get actual flash stopper.
                            if (instance_exists(objFlashmanTimeStop))//Fire if already in play.
                            {
                                if (wep == objFlashStopper)
                                {
                                    wep = objBusterShot;   
                                }
                                else
                                {
                                    wep = noone;
                                }
                            }
                            else
                            {
                                playSFX(sfxTimeStopper);
                                wep = objFlashmanTimeStop;
                                other.alarm[0] = 180;
                                tXspeed = 0;//Cancel out the speed return we'll get from the revert.
                            }
                            bossWeapon = true;
                        break;
                        
                        case objTimeSlow:
                            /*if (instance_exists(objTimeMan))//Fire if already in play.
                            {
                                if (wep == objFlashStopper)
                                {
                                    wep = objBusterShot;   
                                }
                                else
                                {
                                    wep = noone;
                                }
                            }
                            else
                            {
                                playSFX(sfxTimeStopper);
                                wep = objFlashmanTimeStop;
                                other.alarm[0] = 180;
                                tXspeed = 0;//Cancel out the speed return we'll get from the revert.
                            }
                            bossWeapon = true;*/
                            wep = objBusterShot;
                        break;
                        case objCentaurFlash:
                            tXspeed = 0;//Cancel out the speed return we'll get from the revert.
                        break;
                        /*case objGravityHold:
                            bossWeapon = true;
                            wep = 
                        break;*/
                        case objLeafShield:
                        //case objJewelSatellite:Will need some kind of special case.
                        case objSkullBarrier:
                        case objPlantBarrier:
                        case objStarCrash:
                            bossWeapon = true;
                        break;
                        
                       
                    }
                    if (wep &gt;= 0)
                    {
                        if (!bossWeapon)
                        { 
                             event_perform_object(wep,ev_other,ev_user14);
                             other.shootType = isShoot;
                        }
                        else
                        {
                            instance_create(x,y,wep);
                        }
                    }
                   
                }
                
                x = tX;
                y = tY;
                image_xscale = tXS;
                image_yscale = tYS;
                xspeed = tXspeed;
                //printErr(object_get_name(global.weaponObject[global.weapon[0]]));
                global.ammo[0,global.weapon[0]] = tAmmo;
                shootTimer = tShootTimer;
                isShoot = tIsShoot;
                
                ground = tGround;
                climbing = tClimbing;
                vehicle = tVehicle;
                chargeTimer = tCharge;
                xDir = tXDir;
                yDir = tYDir;
                //playerID = tPID;
                
                if (!keepStandStill)//Lock pool releases it before relocking it in firing script.
                {   
                    shootStandStillLock = lockPoolRelease(shootStandStillLock);
                }
                
                
                global.keyShootPressed[playerID] = tempPress;
            
                if (lockHold)
                {
                    lockPoolLock(PL_LOCK_SHOOT);
                }
                var copyBotID = other.id;
                var newProj = false;
                var mMax = other.multiplayerMax;
                with (prtPlayerProjectile)
                {
                    bulletLimitCost *= -1;
                    if (respawn == false)
                    {
                        parent = copyBotID;
                        faction = 3;
                        newProj = true;
                        //playerID = mMax;
                        bulletLimitCost = 0;//Do not affect the player's bullet count.
                        persists = true;
                    }
                    if (respawn == 7)
                    {
                        respawn = false;
                    }
                }
                if (newProj)
                {
                    other.projectileTimer = 16;
                    other.image_index = 7;
                }
            }
            
            
            
            
            //if(code != "")with(myProjectile)stringExecutePartial(other.code);
            //playSFX(shotSound);
            timer = 0;
            phase = 2;
            storePrevLocation = -5000; // I sure hope this won't break anything
            if(checkpointUpdateMode) // update vantage point
            {
                realNextVantagePoint++;
                if(realNextVantagePoint &gt; 3) realNextVantagePoint = 0;
            }
        
        }
        else if(phase == 2) // wait for your shot to disappear lol
        {
            image_index = 7;
            if(ground &amp;&amp; xSpeedStore != 0)
            {
                xSpeedStore = 0;
            }
            
            if(projectileTimer &lt;= 0)
            {
                timer = 0;
                phase = 0;
                
                if(abs(x - pointPos[1]) &gt; abs(xSpeedStore))
                {
                    if(x &gt; pointPos[1]) dir = -1;
                    else dir = 1;
                }
            }
        }
        else if(phase == 3) // get knocked back
        {
            xSpeedStore = -1.125*image_xscale;
            image_index = 8;
            if(timer == 0)
            {
                yspeed = -2*sign(myGrav);
            }
            timer++;
            if(timer &gt; 32)
            {
                if(projectileTimer &lt;= 0)
                {
                    timer = 0;
                    phase = 0;
                }
                else
                {
                    timer = 0;
                    phase = 2;
                }
            }
        }
        else if(phase == 4) // all I gotta do in the air is detect shots, right
        {
            timer = 0;
            image_index = 1;
            if(ground)
            {
                phase = 0;
            }
            else if(global.keyShootPressed[0])
            {
                phase = 1;
            }
            storePrevLocation = -5000; // I sure hope this won't break anything
        }
        
        xspeed = xSpeedStore;
        
        var isBarrier = (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,objGenericStopper,true,true));
        if (isBarrier)
        {
            if (sign(dir) != sign(isBarrier.image_xscale) || (!ground &amp;&amp; sign(xspeed) != sign(isBarrier.image_xscale)))
            {
                xspeed = 0;
                realNextVantagePoint = (realNextVantagePoint+1)%3
                dir *= -1;
            }
        }
    }
    if (projectileTimer &gt; 0)
    {
        projectileTimer--;
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
with (objMegaman)
{
    other.costumeID = costumeID;
    if (other.doWalkOverwrite)
    {
        other.walkSpeed = walkSpeed;
    }
    if (other.doAirWalkOverwrite)
    {
        other.airWalkSpeed = walkSpeed;
    }
}
switch (global.playerSprite[costumeID])
{
    default: // default is mega man colors
    // TODO: these should not be implemented in code :P
    case sprRockman:
        if (global.mmColor)
        {
            rockPrimaryCol = make_color_rgb(0, 112, 236);
            rockSecondaryCol = make_color_rgb(56, 184, 248);
        }
        else
        {
            rockPrimaryCol = make_color_rgb(0, 120, 248);
            rockSecondaryCol = make_color_rgb(0, 232, 216);
        }
        
        rushPrimaryCol = make_color_rgb(216, 40, 0);
        rushSecondaryCol = make_color_rgb(255, 255, 255);
        
        sakugarnePrimaryCol = rockPrimaryCol; // make_color_rgb(0, 184, 0);
        sakugarneSecondaryCol = rockSecondaryCol; // make_color_rgb(184, 248, 120);
        
        break;
    case sprProtoman:
        rockPrimaryCol = make_color_rgb(220, 40, 0);
        rockSecondaryCol = make_color_rgb(188, 188, 188);
        
        rushPrimaryCol = make_color_rgb(216, 40, 0);
        rushSecondaryCol = make_color_rgb(255, 255, 255);
        
        sakugarnePrimaryCol = rockPrimaryCol; // make_color_rgb(0, 184, 0);
        sakugarneSecondaryCol = rockSecondaryCol; // make_color_rgb(184, 248, 120);
        
        break;
    case sprBass:
        rockPrimaryCol = make_color_rgb(112, 112, 112);
        rockSecondaryCol = make_color_rgb(248, 152, 56);
        
        rushPrimaryCol = make_color_rgb(112, 112, 112);
        rushSecondaryCol = make_color_rgb(128, 0, 240);
        
        sakugarnePrimaryCol = rockPrimaryCol; // make_color_rgb(0, 184, 0);
        sakugarneSecondaryCol = rockSecondaryCol; // make_color_rgb(184, 248, 120);
        
        break;
    case sprRoll:
        rockPrimaryCol = make_color_rgb(248, 56, 0);
        rockSecondaryCol = make_color_rgb(0, 168, 0);
        
        rushPrimaryCol = make_color_rgb(0, 160, 0);
        rushSecondaryCol = make_color_rgb(168, 224, 248);
        
        sakugarnePrimaryCol = rockPrimaryCol; // make_color_rgb(0, 184, 0);
        sakugarneSecondaryCol = rockSecondaryCol; // make_color_rgb(184, 248, 120);
        break;
}
global.playerSprite[multiplayerMax] = costumeID;
global.primaryCol[multiplayerMax] = global.primaryCol[0];
global.secondaryCol[multiplayerMax] = global.secondaryCol[0];
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var deathSFX;

if (global.deathEffect)
{
    deathSFX = sfxDeathClassic;
}
else
{
    deathSFX = sfxDeath;
}
playSFX(deathSFX);
for (i = 0; i &lt; 16; i += 1)
{
    var explosionID = instance_create(x, y, objMegamanExplosion);
    explosionID.dir = i * 45;
    explosionID.spd = 0.75 * (1 + floor(i / 8));
    with (explosionID)
    {
        if (global.deathEffect)
        {
            sprite_index = sprExplosionClassic;
        }
        else
        {
            sprite_index = sprExplosion;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(doesGetKnockback)
{
    timer = 0;
    phase = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//event_inherited();
if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if ((iFrames mod 4) &lt; 2 || !iFrames)
        {
            var sX = 0;
            var sY = 0;
            switch (floor(image_index))
            {
                /*case 0:
                case 1:
                case 2:
                    //idle.
                break;*/
                case 2:
                case 3:
                case 4:
                case 5:
                    sX = floor(image_index)+1;
                    //Walk
                break;
                case 6://Fire
                case 7:
                    sY = shootType;
                break;
                case 8://Damage.
                    sX = 13;
                break;
                
            
            }
            if (!ground &amp;&amp; sX != 13)
            {
                sX = 7+((copyAnimCounter/4) % 2);
                if (yspeed &gt; 0)
                {
                    sX += 2;
                }
            }
            /*if (knockbackTimer &gt; 0)
            {
                sX = 13;// + ground;
            }*/
            
            var prim = global.weaponPrimaryColor[global.weapon[0]];
            var sec = global.weaponSecondaryColor[global.weapon[0]];
            
            if (prim &lt; 0 || sec &lt; 0)
            {
            // Setting weapon colors.
                switch (prim)
                {
                    case -1:
                    // base form colors
                        prim = rockPrimaryCol;
                        sec = rockSecondaryCol;
                    break;
                    case -2:
                    // rush colors
                        prim = rushPrimaryCol;
                        sec = rushSecondaryCol;
                    break;
                    case -3:
                    // sakugarne colors
                        prim = sakugarnePrimaryCol;
                        sec = sakugarneSecondaryCol;
                    break;
                }
            }
            
            drawCostume(global.playerSprite[costumeID],sX,sY,x,y,image_xscale,image_yscale,c_white,prim,sec, c_black);//drawSelf();
            //drawPlayer(0,costumeID,sX,sY,x,y,image_xscale,image_yscale);//drawSelf();
        }
        else // Hitspark
        {
            draw_sprite_ext(sprHitspark, 0, spriteGetXCenter(), spriteGetYCenter(), 1, 1, 0, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
