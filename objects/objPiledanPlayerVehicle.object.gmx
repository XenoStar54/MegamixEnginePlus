<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPiledanPlayerVehicle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player can activate this by walking up to it and pressing ^
event_inherited();

blockCollision = 0;
grav = 0;
bubbleTimer = -1;
canHit = false;
canDamage = false;
faction = 1;
itemDrop = -1;
despawnRange = -1;

phase = 0;
timer = 0;
drawPoint = 13;
drawPointMin = 13;
drawPointMax = 24;
shotTimeout = 0;
shotTimeoutMax = 30;

angle = 0;
angleSpd = 5;
spd = 1.5;

qualifiedForUse = false;

passenger = noone;
passengerLock = 0;

image_speed = 0.15;

drawColor1 = global.primaryCol[0];
drawColor2 = global.secondaryCol[0];
drawColorOutline = global.outlineCol[0];

spawnXscale = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(instance_exists(passenger) &amp;&amp; phase &lt; 3)
{
    x = passenger.x;
    y = passenger.y;
    image_xscale = passenger.image_xscale;
    image_yscale = passenger.image_yscale;
    passenger.spriteX = 11;
    passenger.spriteY = 16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    qualifiedForUse = false;
    if(phase == 0) // waiting for passenger
    {
        with(objMegaman)
        {
            with(other) if(collision_line(x,y,x+1,y-image_yscale,other,0,1) &amp;&amp; other.ground &amp;&amp; image_yscale == other.image_yscale)
            {
                qualifiedForUse = 1;
                drawColor1 = global.primaryCol[other.playerID];
                drawColor2 = global.secondaryCol[other.playerID];
                drawColorOutline = global.outlineCol[other.playerID];
                if(qualifiedForUse &amp;&amp; other.yDir == -other.gravDir)
                {
                    passenger = other;
                    passengerLock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_JUMP,PL_LOCK_SHOOT,PL_LOCK_CHARGE,PL_LOCK_SLIDE,PL_LOCK_CLIMB,PL_LOCK_GRAVITY);
                    passengerLock.targetInstance = other.id;
                    passenger.blockCollision = 0;
                    passenger.x = x;
                    passenger.image_xscale = image_xscale;
                    passenger.y += 3*image_yscale;
                    passenger.xspeed = 0;
                    passenger.yspeed = 0;
                    phase = 1;
                    playSFX(sfxPiledan);
                }
            }
        }
    }
    else if(phase == 1) // startup
    {
        if(instance_exists(passenger))
        {
            passenger.image_xscale = image_xscale;
            if(drawPoint &lt; drawPointMax)
            {
                drawPoint++;
                passenger.yspeed = -image_yscale;
            }
            else
            {
                passenger.yspeed = 0;
                phase = 2;
                passenger.blockCollision = 1;
            }
        }
        else
        {
            y = ystart;
            drawPoint = drawPointMin;
            phase = 0;
        }
    }
    else if(phase == 2) // control
    {
        if(instance_exists(passenger))
        {
            image_xscale = passenger.image_xscale;
            var xs = 0, ys = 0, desiredAngle = 90-90*image_xscale;
            if(passenger.xDir != 0 || passenger.yDir != 0)
            {
                desiredAngle = point_direction(0,0,passenger.xDir,passenger.yDir);
                angle += min(angleSpd,abs(angle_difference(desiredAngle,angle)))*sign(angle_difference(desiredAngle,angle));
                xs = cos(degtorad(angle))*spd;
                ys = -sin(degtorad(angle))*spd;
            }
            passenger.xspeed = xs;
            passenger.yspeed = ys;
            
            if(shotTimeout) shotTimeout--;
            else
            {
                if(global.keyShootPressed[passenger.playerID])
                {
                    var bomb = instance_create(x,y+16*image_yscale,objPiledanPlayerBullet);
                    bomb.image_yscale = image_yscale;
                    bomb.grav = image_yscale*gravAccel;
                    bomb.playerID = passenger.playerID;
                    bomb.yspeed = 7*image_yscale;
                    shotTimeout = shotTimeoutMax;
                }
            }
            
            if(global.keyJumpPressed[passenger.playerID])
            {
                passengerLock = lockPoolRelease(passengerLock);
                with(passenger)
                {
                    jumpCounter = 0;
                    playerJump();
                    playLandSound = 1;
                }
                phase = 3;
                passenger = noone;
            }
        }
        else
        {
            phase = 3;
        }
    }
    else if(phase == 3) // explode
    {
        grav = image_yscale*gravAccel;
        // the story behind that line is not something you'd understand
        if(instance_exists(self) &amp;&amp; checkSolid(0,0,1,1)) event_user(10);
    }
    
    if(instance_exists(passenger))
    {
        drawColor1 = global.primaryCol[passenger.playerID];
        drawColor2 = global.secondaryCol[passenger.playerID];
        drawColorOutline = global.outlineCol[passenger.playerID];
        passenger.playLandSound = -999;
    }
    
    // reflect bullets
    with(prtEnemyProjectile) if(reflectable != 0) with(other)
    {
        if(collision_rectangle(x+2*image_xscale,bbox_top,x+12*image_xscale,bbox_bottom,other,0,1)) with(other)
        {
            event_user(10);
            playSFX(sfxReflect);
            instance_create(bboxGetXCenter(),bboxGetYCenter(),objExplosion);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

grav = 0;
phase = 0;
timer = 0;
drawPoint = drawPointMin;
shotTimeout = 0;
image_xscale = spawnXscale;
angle = 90-90*image_xscale;

drawColor1 = global.primaryCol[0];
drawColor2 = global.secondaryCol[0];
drawColorOutline = global.outlineCol[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

instance_create(x,y,objWeaponExplosion);
if(passengerLock) passengerLock = lockPoolRelease(passengerLock);
if(instance_exists(passenger))
{
    passenger.blockCollision = 1;
    passenger = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dead)
{
    var drawYplus = 0;
    if(phase == 0) drawYplus = -12;
    draw_sprite_part_ext(sprite_index,image_index mod 2,0,0,sprite_width/image_xscale,drawPoint,x-(sprite_width)/2,y+(drawYplus)*image_yscale,image_xscale,image_yscale,c_white,1);
    draw_sprite_part_ext(sprite_index,2+(image_index mod 2),0,0,sprite_width/image_xscale,drawPoint,x-(sprite_width)/2,y+(drawYplus)*image_yscale,image_xscale,image_yscale,drawColor1,1);
    draw_sprite_part_ext(sprite_index,4+(image_index mod 2),0,0,sprite_width/image_xscale,drawPoint,x-(sprite_width)/2,y+(drawYplus)*image_yscale,image_xscale,image_yscale,drawColor2,1);
    draw_sprite_part_ext(sprite_index,6+(image_index mod 2),0,0,sprite_width/image_xscale,drawPoint,x-(sprite_width)/2,y+(drawYplus)*image_yscale,image_xscale,image_yscale,drawColorOutline,1);
    
    if(qualifiedForUse &amp;&amp; phase == 0)
    {
        draw_sprite(sprPressUp, (image_yscale == -1), x, y - 38 * image_yscale);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
