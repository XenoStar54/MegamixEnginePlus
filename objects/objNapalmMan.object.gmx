<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNapalmJump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprNapalmMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
pose = sprNapalmPose;
poseImgSpeed = 0.133333333333333;
contactDamage = 5;
ground = 0;
phase = 2;
timer = 0;
canJump = 1;
shootAmount = 0;
canShoot = 1;
canStand = 0;
startXspeed = 0;
rocketID1 = 1203;
rocketID2 = 1203;
rocketID3 = 1203;
pillID1 = 1203;
pillID2 = 1203;
manualColors = true;

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[15];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objFireStorm, 4);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 2);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 0);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 4);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 2);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if entityCanStep()
{   
    if (isFight == 1)
    {
        canFillHealthBar = true;
        grav = 0.25;
        switch(phase)
        {
            case 0:
                if (canJump == 1)
                {
                    timer += 1
                    if (timer == 1)
                    {
                        calibrateDirection();
                        sprite_index = sprNapalmPrepareJump
                    }
                    else if (timer == 4)
                    {
                        calibrateDirection();
                        sprite_index = sprNapalmJump
                        yspeed = -6
                        if instance_exists(objMegaman)
                            startXspeed = arcCalcXspeed(yspeed, 0.25, x, y, sprite_get_xcenter_object(objMegaman), sprite_get_ycenter_object(objMegaman))
                        else
                            startXspeed = (image_xscale * 1)
                        if (place_meeting(x, (y + yspeed), objSolid))
                            yspeed = 0
                    }
                    if (timer &gt;= 4)
                    {
                        if (!place_meeting((x + startXspeed), y, objSolid))
                            xspeed = startXspeed
                        else
                            xspeed = 0
                    }
                    if (ground == 1 &amp;&amp; yspeed &gt;= 0 &amp;&amp; sprite_index == sprNapalmJump)
                    {
                        canJump = 0
                        timer = 0
                        sprite_index = sprNapalmPrepareJump
                        xspeed = 0
                    }
                }
                else
                {
                    timer += 1
                    if (timer &gt;= 4)
                    {
                        timer = 0
                        canJump = 1
                        randomize()
                        phase = choose(1, 1, 2)
                    }
                }
                break
            case 1:
                xspeed = 0
                calibrateDirection();
                image_speed = 0.125
                timer += 1
                if (timer == 1)
                {
                    sprite_index = sprNapalmShootGrenade
                    image_index = 0
                }
                else if (timer == 9)
                {
                    if (instance_exists(target))
                    {
                    var ID = instance_create((x + (image_xscale * ((-sprite_get_xoffset(sprite_index)) + 19))), (y - sprite_get_yoffset(sprite_index)), objNapalmGrenade);
                    ID.xspeed = xSpeedAim(ID.x-20*image_xscale, ID.y, target.x, y, ID.yspeed, ID.grav, 5.65);
                    ID.yspeed = -5
                    ID.targetX = target.x
                    ID.targetY = y                    
                    pillID1 = ID
                    ID = instance_create((x + (image_xscale * ((-sprite_get_xoffset(sprite_index)) + 32))), (y - sprite_get_yoffset(sprite_index)), objNapalmGrenade)
                    ID.xspeed = xSpeedAim(ID.x+20*image_xscale, ID.y, target.x, y, ID.yspeed, ID.grav, 5.65);
                    ID.yspeed = -5
                    ID.targetX = target.x + 10
                    ID.targetY = y
                    pillID2 = ID
                    }
                }
                else if (timer == 23)
                    sprite_index = sprNapalmStand
                else if (timer == 60)
                {
                    timer = 0
                    phase = 0
                }
                break
            case 2:
                calibrateDirection();
                xspeed = 0
                image_speed = 0.225
                if (canStand == 0)
                {
                    timer += 1
                    if (timer == 1)
                    {
                        sprite_index = sprNapalmShoot
                        image_index = 0
                    }
                    if (shootAmount &lt; 3)
                    {
                        if (floor(image_index) == 5 &amp;&amp; canShoot == 1)
                        {
                            canShoot = 0
                            shootAmount++
                            ID = instance_create((x + (image_xscale * ((-sprite_get_xoffset(sprite_index)) + 24))), ((y - sprite_get_yoffset(sprite_index)) + 9), objNapalmProjectile)
                            ID.image_xscale = image_xscale
                            if (!instance_exists(rocketID1))
                                rocketID1 = ID
                            else if (!instance_exists(rocketID2))
                                rocketID2 = ID
                            else if (!instance_exists(rocketID3))
                                rocketID3 = ID
                        }
                        else if (floor(image_index) != 5)
                            canShoot = 1
                    }
                    else
                    {
                        canShoot = 1
                        if (floor(image_index) == 3)
                        {
                            canStand = 1
                            timer = 0
                        }
                    }
                }
                else
                {
                    sprite_index = sprNapalmStand
                    timer += 1
                    if (timer &gt;= 12)
                    {
                        timer = 0
                        phase = 0
                        canShoot = 1
                        canStand = 0
                        shootAmount = 0
                    }
                }
                break;
        }
    }
}
else
    image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(objMegaman))
{
    i = instance_create(objMegaman.x - 8, objMegaman.y - 8, objGravityFlipDown);
    with (i)
    {
        event_perform(ev_step, ev_step_normal);
        instance_destroy();
    }
}

with (objNapalmGrenade)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objNapalmProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
