<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWaveMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprChillMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

customPose = true;
hasTriggeredFall = false;
introType = 1;
contactDamage = 4;
ground = false;
attackTimer = 0;
shotGrenade = 0

// wave man has no randomised shenangians going on. this variable does something.
randomiser = -1;

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of wave man for any given animation. imageNoMin is what the image_index is set to when wave man has finished an animation.
imageNoMin = 0;
attackTimerMax = 999;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[14];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objThunderBeam, 4);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 0);
enemyDamageValue(objGeminiLaser, 0);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 4);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 4);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objPharaohShot, 0); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objChargeKicking, 4);

// MM6
enemyDamageValue(objPlantBarrier, 2);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 0);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 0);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 4);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 0);

// MM&amp;B
enemyDamageValue(objTenguBlade, 3);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objIceWall, 0);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 0);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1.5, 1.5);
}
if (entityCanStep())
{
    // Wave Man's custom intro
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravAccel;
        calibrateDirection();
    }
    else if (isIntro)
    {
        // custom intro:
        if (attackTimer == 0) &amp;&amp; (introType == 1)
        {
            image_index = 8;
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            // since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            y = ystart;
            attackTimer++;
            if (attackTimer &lt; 8)
            {
                image_index = 0;
            }
            if (attackTimer == 8)
            {
            }
            if (attackTimer == 15)
            {
                image_index = 1;
            }
            if (attackTimer == 25)
            {
                image_index = 2;
            }
            if (attackTimer == 35)
            {
                image_index = 3;
            }
            if (attackTimer == 40)
            {
                image_index = 4;
            }
            if (attackTimer == 45)
            {
                image_index = 5;
            }
            if (attackTimer == 50)
            {
                image_index = 4;
            }
            if (attackTimer == 55)
            {
                hasFire = 0
                image_index = 3;
            }
            if (attackTimer == 60)
            {
                image_index = 1;
            }
            if (attackTimer == 75)
            {
                image_speed = 0;
                isIntro = false;
                attackTimer = 0;
                blockCollision = blockCollisionStart;
                canFillHealthBar = true;
            }
        }
    }
    if (isFight)
    {
        // this sets up wave man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.25;
        }
        
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(1,1.5,3, 4);
        }
        
        switch (phase)
        {
            case 0: // idle 
                image_index = 1
                
                if (attackTimer &gt;= 15)
                {
                    phase = 1
                    attackTimer = 0;
                }
                break;
                
           case 1: // Water Wave       
           
                if (attackTimer == 1)
                { 
                image_index = 2
                calibrateDirection();
                }
                if (attackTimer == 10)
                { 
                image_index = 7;
                            
                    if (instance_exists(objMegaman))
                        debrisBaseX = sprite_get_xcenter_object(objMegaman);
                    else
                        debrisBaseX = round((view_xview + (view_wview / 2)));
                    
                    debrisOffset = irandom_range(-64, 64)
                    debrisX = (debrisBaseX + debrisOffset)
                    debrisX = min(max(debrisX, (view_xview + 32)), ((view_xview + view_wview) - 32));
                    
                    // this prevents the wave from spawning on Mega Man
                    if (instance_exists(objMegaman))
                    {
                        if debrisX &lt; objMegaman.x + 8 and debrisX &gt; objMegaman.x - 8
                        {
                            if x &gt; objMegaman.x
                            {
                                debrisX = objMegaman.x + 24;
                            }
                            else
                            {
                                debrisX = objMegaman.x - 24;
                            }
                        } 
                    }
                    instance_create(debrisX, y, objWaterWaveProjectile)
                }
                break;
            
            case 2: // shoot      
           
                if (attackTimer == 1)
                { 
                    calibrateDirection();
                    image_index = 1;
                }
                if (attackTimer == 5)
                { 
                    image_index = 6
                    shootID = instance_create(x+13*image_xscale, y, objEnemyBullet);
                    shootID.xspeed = image_xscale * 3;
                    shootID.image_xscale = image_xscale;
                    shootID.sprite_index = sprWaveProjectile;
                }
                if (attackTimer == 10)
                { 
                    image_index = 1;
                }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 15)
                {
                        phase = 3;
                        attackTimer = 0;
                }
                break;
            
            case 3: //jump
                image_index = 8;
                if (attackTimer == 1)
                {
                    calibrateDirection();
                    randomize()
                    yspeed = choose(-5, -6)
                    
                    if instance_exists(objMegaman)
                        xspeed = arcCalcXspeed(yspeed, grav, x, y, target.x, y)
                    else
                        xspeed = (image_xscale * 2)
                }
                if (ground &amp;&amp; yspeed &gt;= 0)
                {
                    attackTimer = 0                            
                    phase = 0
                    xspeed = 0
                    yspeed = 0
                }
                break; 
        }             
    }
}
else
{ 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Destroy projectiles on death
with (objWaterWaveProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objEnemyBullet)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
