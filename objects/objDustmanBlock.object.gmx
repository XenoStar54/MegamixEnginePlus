<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDustBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// A simple destructible block
event_inherited();

isSolid = 1;

grav = 0;
blockCollision = 1;
bubbleTimer = -1;

healthpoints = 1;
healthpointsStart = healthpoints;
contactDamage = 0;

shiftVisible = 1;

useTileMasking = 0;
tileN = 0;

// super arm interaction
category = "superArmTarget";
superArmFlashTimer = 0;
superArmFlashInterval = 1;
superArmFlashOwner = noone;
superArmHoldOwner = noone;
superArmDeathOnDrop = true;
superArmThrown = false;

// arrays of stuff that can destroy dust blocks other than player attacks
// set destroyByAnything to false to disable that behavior to save on resources
destroyByAnything = false;

destroysAndDies[0] = noone;

destroysAndLives[0] = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep() &amp;&amp; destroyByAnything)
{
    for(var i = 0; i &lt; array_length_1d(destroysAndDies); i++)
    {
        if(instance_exists(destroysAndDies[i]) &amp;&amp; destroysAndDies[i] != noone &amp;&amp; !destroysAndDies[i].dead)
        {
            with(destroysAndDies[i])
            {
                if(collision_rectangle(bbox_left-1,bbox_top-1,bbox_right+1,bbox_bottom+1,other,0,1))
                {
                    event_user(10);
                    with(other)
                    {
                        event_user(9);
                        event_user(10);
                    }
                }
            }
        }
    }
    
    for(var i = 0; i &lt; array_length_1d(destroysAndLives); i++)
    {
        if(instance_exists(destroysAndLives[i]) &amp;&amp; destroysAndLives[i] != noone &amp;&amp; !destroysAndLives[i].dead)
        {
            with(destroysAndLives[i])
            {
                if(collision_rectangle(bbox_left-1,bbox_top-1,bbox_right+1,bbox_bottom+1,other,0,1))
                {
                    with(other)
                    {
                        event_user(9);
                        event_user(10);
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.penetrate &lt; 2 &amp;&amp; other.pierces &lt; 2 &amp;&amp; other.object_index != objBusterShotCharged)
{
    other.penetrate = 0;
    other.pierces = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = 1;

instance_create(spriteGetXCenter(), spriteGetYCenter(), objExplosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tile masking
if(useTileMasking)
{
    // place pickups under the super arm block so they become Hidden Boys
    if (place_meeting(x, y, prtPickup))
    {
        with instance_place(x, y, prtPickup)
        {
            depth = other.layer + 1;
            blockCollision = 0;
            grav = 0;
        }
    }
    
    // find underlying tiles
    for (var ix = bbox_left + 8; ix &lt; bbox_right; ix += 16)
    {
        for (var iy = bbox_top + 8; iy &lt; bbox_bottom; iy += 16)
        {
            var tile = tile_layer_find(depth, ix, iy);
            if (tile != -1)
            {
                tileOffsetX[tileN] = tile_get_x(tile) - x;
                tileOffsetY[tileN] = tile_get_y(tile) - y;
                tileLeft[tileN] = tile_get_left(tile);
                tileTop[tileN] = tile_get_top(tile);
                tileWidth[tileN] = tile_get_width(tile);
                tileHeight[tileN] = tile_get_height(tile);
                tiles[tileN++] = tile_get_background(tile);
                tile_delete(tile);
            }
        }
    }
    
    if (tileN &lt;= 0)
    {
        printErr("Warning: a super arm block at " + string(x) + "," + string(y) + " had no underlying tiles. (Did you remember to set its layer to the tile layer?)");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

var _x = (floor((x * global.screenScale) + .5) / global.screenScale);
var _y = (floor((y * global.screenScale) + .5) / global.screenScale);

if(!dead)
{
    if(useTileMasking)
    {
        for (var i = 0; i &lt; tileN; i++)
        {
            draw_background_part(tiles[i], tileLeft[i], tileTop[i], tileWidth[i], tileHeight[i], _x + tileOffsetX[i], _y + tileOffsetY[i]);
        }
    }
    
    // super arm flash
    if (superArmFlashTimer mod (2 * superArmFlashInterval) &gt;= superArmFlashInterval || superArmThrown || superArmHoldOwner != noone)
    {
        draw_set_blend_mode(bm_add);
        if(useTileMasking)
        {
            for (var i = 0; i &lt; tileN; i++)
            {
                draw_background_part(tiles[i], tileLeft[i], tileTop[i], tileWidth[i], tileHeight[i], _x + tileOffsetX[i], _y + tileOffsetY[i]);
            }
        }
        else drawSelf(1);
        draw_set_blend_mode(bm_normal);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
