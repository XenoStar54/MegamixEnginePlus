<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTorchManDOS</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskTorchManDOS</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
introType = 0;
customPose = 1;
pose = sprTorchManDOSIntro;
poseImgSpeed = 10 / 60;
contactDamage = 4;
ground = false;
phase = 0;
timer = 0;
jumpsLeft = 3;
hasTriggeredFall = false;
emberTimer = 0;
animTimer = 0;
xSpeedStore = 0;

spriteIntro = sprTorchManDOSIntro;
spritePostintro = sprTorchManDOSPostintro;
spriteBurn[0] = sprTorchManDOS;
spriteBurn[1] = sprTorchManDOSBurn;

burnTracker = 0;
burnSpd = 0.25;

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 33;

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;


// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 3);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 0);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 3);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objSakugarne, 0);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 4);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 5);
enemyDamageValue(objRainFlush, 3);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 4);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);

// Misc.
enemyDamageValue(objPowerStone, 0);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (startIntro)
    {
        calibrateDirection();
        y = view_yview + (view_hview * (image_yscale &gt; 0)) + 64*image_yscale;
        sprite_index = spriteIntro;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravStart;
        timer = 0;
        phase = 0;
        canDamage = false;
        yspeed = ySpeedAim(y,ystart-image_yscale*32,grav);
    }
    else if (isIntro)
    {
        if(grav != 0)
        {
            if(sign(yspeed) == -sign(grav))
            {
                image_index = 0;
            }
            else image_index = 1;
        }
        if (y != ystart &amp;&amp; !hasTriggeredFall)
        {
            if(abs(y - ystart) &lt; abs(yspeed) &amp;&amp; sign(yspeed) == sign(grav))
            {
                y = ystart;
                yspeed = 0;
                grav = 0;
            }
        }
        else if (y == ystart || hasTriggeredFall)
        {
            if(!hasTriggeredFall)
            {
                hasTriggeredFall = 1;
                yspeed = 0;
                grav = 0;
            }
            else
            {
                timer++;
                if(timer &lt; 60)
                {
                    image_index = 2;
                }
                else if(timer &lt; 90)
                {
                    image_index = 3;
                }
                else if(timer &lt; 105)
                {
                    image_index = 4;
                }
                else if(timer &lt; 120)
                {
                    image_index = 5;
                }
                else if(timer &lt; 135)
                {
                    image_index = 6;
                }
                else
                {
                    playSFX(sfxFireTotemFire);
                    sprite_index = spritePostintro;
                    image_speed = 0.25;
                    timer = 0;
                    phase = 0;
                    canFillHealthBar = true;
                    isIntro = false;
                    blockCollision = blockCollisionStart;
                    canDamage = true;
                    grav = gravStart;
                }
            }
        }
    }
    else if(isFight)
    {
        if(sprite_index == spritePostintro)
        {
            burnTracker = image_index;
            while(burnTracker &gt;= 2) burnTracker -= 2;
            image_index = 0;
            image_speed = 0;
            sprite_index = spriteBurn[floor(burnTracker)];
        }
        
        if(phase == 0) // flame sweep
        {
            if(timer == 0)
            {
                calibrateDirection();
                var separationDistance = 64;
                for(var i = 0; i &lt; 6; i++) if(x+separationDistance*i*image_xscale &gt; view_xview &amp;&amp; x+separationDistance*i*image_xscale &lt; view_xview+view_wview)
                {
                    with(instance_create(x+separationDistance*i*image_xscale,view_yview+(view_hview * (image_yscale &gt; 0)),objTorchManDOSEmber))
                    {
                        behavior = 0;
                        delay = i*10;
                        loop = 3;
                        timerMax = 5;
                        visible = false;
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        while(!(checkSolid(0,image_yscale)&amp;&amp;!checkSolid(0,0)) &amp;&amp; insideView())
                        {
                            y -= image_yscale*16;
                        }
                        if(!insideView()) instance_destroy();
                    }
                }
            }
            timer++;
            if(timer &lt; 30)
            {
                image_index = 1;
            }
            else if(timer == 30)
            {
                image_index = 2;
                with(instance_create(x,y,objTorchManDOSEmber))
                {
                    sprite_index = sprTorchManDOSEmberSweep;
                    image_xscale = other.image_xscale;
                    image_yscale = other.image_yscale;
                    contactDamage = 4;
                    delay = 15;
                }
                with(instance_create(x,y+16*image_yscale,objTorchManDOSEmber))
                {
                    image_xscale = other.image_xscale;
                    image_yscale = other.image_yscale;
                    behavior = 2;
                    sprite_index = sprTorchManDOSEmberBig;
                    playSFX(sfxFireManFireStorm);
                }
            }
            else if(timer &lt; 45)
            {
                image_index = 2;
                if(timer mod 5 == 0)
                {
                    with(instance_create(x,y+16*image_yscale,objTorchManDOSEmber))
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        behavior = 1;
                        sprite_index = sprTorchManDOSEmberBig;
                    }
                }
            }
            else if(timer &lt; 60)
            {
                image_index = 3;
                if(timer mod 5 == 0)
                {
                    with(instance_create(x,y+16*image_yscale,objTorchManDOSEmber))
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        behavior = 1;
                        sprite_index = sprTorchManDOSEmberBig;
                    }
                }
            }
            else if(timer &lt; 75)
            {
                image_index = 0;
                calibrateDirection();
            }
            else
            {
                timer = 0;
                phase = 1;
                jumpsLeft = 3;
            }
        }
        else if(phase == 1) // jump onto Mega
        {
            if(ground)
            {
                if(timer == 0)
                {
                    if(jumpsLeft)
                    {
                        image_index = 11;
                        timer++;
                        yspeed = -7.5*image_yscale;
                        if(jumpsLeft &gt; 0) // meh
                        {
                            if(target)
                            {
                                calibrateDirection();
                                xspeed = xSpeedAim(x,y,target.x,target.y,yspeed,grav);
                            }
                            else
                            {
                                xspeed = image_xscale;
                            }
                        }
                        else
                        {
                            if(target) calibrateDirection();
                            xspeed = -image_xscale;
                        }
                        jumpsLeft--;
                        xSpeedStore = xspeed;
                    }
                    else
                    {
                        phase = 3;
                        timer = 0;
                    }
                }
                else
                {
                    calibrateDirection();
                    xspeed = 0;
                    xSpeedStore = xspeed;
                    timer = 0;
                    phase = 2;
                    image_index = 0;
                    emberTimer = -1;
                    animTimer = 0;
                }
            }
            else
            {
                image_index = 11;
                xspeed = xSpeedStore;
            }
        }
        else if(phase == 2) // flame pillar
        {
            timer++;
            if(timer &lt; 5)
            {
                image_index = 0;
            }
            else if(timer &lt; 35)
            {
                image_index = 4;
            }
            else if(timer == 35)
            {
                image_index = 5;
                var trackX = x;
                if(target) trackX = target.x;
                for(var i = 0; i &lt; 5; i++)
                {
                    with(instance_create(trackX,view_yview+(view_hview * (image_yscale &gt; 0)),objTorchManDOSEmber))
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        behavior = 3;
                        dest = 8*i;
                        timerMax = 15;
                        timer = 0;
                        sprite_index = sprTorchManDOSEmberSmall;
                        while(!(checkSolid(0,image_yscale)&amp;&amp;!checkSolid(0,0)) &amp;&amp; insideView())
                        {
                            y -= image_yscale*16;
                        }
                        if(!insideView()) instance_destroy();
                    }
                }
                playSFX(sfxChangkeyDragonBreath);
            }
            else if(timer &lt; 50)
            {
                image_index = 5;
            }
            else if(timer &lt; 65)
            {
                image_index = 4;
            }
            else if(timer &lt; 75)
            {
                image_index = 0;
            }
            else
            {
                timer = 0;
                phase = 1;
            }
        }
        else if(phase == 3) // jump back
        {
            if(ground)
            {
                xspeed = 0;
                if(timer == 0)
                {
                    if(target) calibrateDirection();
                    xspeed = -image_xscale;
                    yspeed = -5*image_yscale;
                    timer++;
                    image_index = 11;
                }
                else
                {
                    timer = 0;
                    phase = 4;
                    image_index = 0;
                    jumpsLeft = 3;
                    with(objTorchManDOSEmber)if(sprite_index == sprTorchManDOSEmberBig)
                    {
                        yspeed = -image_yscale*random_range(3,4);
                        xspeed = random_range(-1,1);
                        grav = image_yscale*0.2;
                        behavior = -1;
                        delay = 45;
                        contactDamage = 0;
                        sprite_index = sprTorchManDOSEmber;
                    }
                }
                xSpeedStore = xspeed;
            }
            else
            {
                image_index = 11;
                xspeed = xSpeedStore;
            }
        }
        else if(phase == 4) // scatter embers
        {
            if(jumpsLeft)
            {
                timer++;
                if(timer &lt; 10)
                {
                    image_index = 0;
                }
                else if(timer &lt; 30)
                {
                    image_index = 6;
                }
                else if(timer &lt; 90)
                {
                    image_index = 6;
                    if(timer mod 15 == 0)
                    {
                        playSFX(sfxFireTotemFire);
                        with(instance_create(x+16*image_xscale,y-20*image_yscale,objTorchManDOSEmber))
                        {
                            image_xscale = other.image_xscale;
                            image_yscale = other.image_yscale;
                            behavior = -1;
                            delay = -1;
                            grav = 0.2*image_yscale;
                            yspeed = -4*image_yscale;
                            if(target)xspeed = xSpeedAim(x,y,target.x,target.y,yspeed,grav);
                            else xspeed = image_xscale*random_range(1,2);
                            contactDamage = 2;
                            sprite_index = sprTorchManDOSEmberSmall;
                            if(other.timer == (90-15))
                            {
                                behavior = 4;
                                blockCollision = 1;
                                sprite_index = sprTorchManDOSEmberBig;
                                delay = 0;
                            }
                        }
                    }
                }
                else
                {
                    jumpsLeft--;
                    timer = 0;
                    image_index = 0;
                }
            }
            else
            {
                timer = 0;
                phase = 5;
            }
        }
        else if(phase == 5) // weld the player into the ground and shoot them
        {
            timer++;
            calibrateDirection();
            if(timer &lt; 15)
            {
                image_index = 0;
            }
            else if(timer &lt; 45)
            {
                image_index = 3;
            }
            else if(timer &lt; 60)
            {
                image_index = 4;
            }
            else if(timer == 60)
            {
                image_index = 5;
                var trackX = x;
                if(target) trackX = target.x;
                with(instance_create(trackX,view_yview+(view_hview * (image_yscale &gt; 0)),objTorchManDOSWelding))
                {
                    image_xscale = other.image_xscale;
                    image_yscale = other.image_yscale;
                    while(!(checkSolid(0,image_yscale)&amp;&amp;!checkSolid(0,0)) &amp;&amp; insideView())
                    {
                        y -= image_yscale*16;
                    }
                    if(!insideView()) instance_destroy();
                }
                playSFX(sfxStegorusMissile);
            }
            else if(timer &lt; 70)
            {
                image_index = 5;
            }
            else if(timer == 70)
            {
                image_index = 5;
                var trackX = x;
                if(target) trackX = target.x;
                with(instance_create(trackX,view_yview+(view_hview * (image_yscale &gt; 0)),objTorchManDOSWelding))
                {
                    image_xscale = other.image_xscale;
                    image_yscale = other.image_yscale;
                    while(!(checkSolid(0,image_yscale)&amp;&amp;!checkSolid(0,0)) &amp;&amp; insideView())
                    {
                        y -= image_yscale*16;
                    }
                    if(!insideView()) instance_destroy();
                }
                playSFX(sfxStegorusMissile);
            }
            else if(timer &lt; 80)
            {
                image_index = 5;
            }
            else if(timer == 80)
            {
                image_index = 5;
                var trackX = x;
                if(target) trackX = target.x;
                with(instance_create(trackX,view_yview+(view_hview * (image_yscale &gt; 0)),objTorchManDOSWelding))
                {
                    image_xscale = other.image_xscale;
                    image_yscale = other.image_yscale;
                    while(!(checkSolid(0,image_yscale)&amp;&amp;!checkSolid(0,0)) &amp;&amp; insideView())
                    {
                        y -= image_yscale*16;
                    }
                    if(!insideView()) instance_destroy();
                }
                playSFX(sfxStegorusMissile);
            }
            else if(timer &lt; 95)
            {
                image_index = 5;
            }
            else
            {
                image_index = 0;
                var weldingCheck = 0;
                with(objTorchManDOSWelding)
                {
                    if(weldLock != -1) weldingCheck = 1;
                }
                
                if(weldingCheck)
                {
                    phase = 6;
                    timer = 0;
                    jumpsLeft = 1;
                }
                else
                {
                    if(timer &gt; 125)
                    {
                        phase = 0;
                        timer = 0;
                        with(objTorchManDOSWelding)
                        {
                            timerMax = 0;
                        }
                    }
                }
            }
        }
        else if(phase == 6) // actually shoot
        {
            calibrateDirection();
            timer++;
            if(timer &lt; 10)
            {
                image_index = 0;
            }
            else if(timer &lt; 20)
            {
                image_index = 12;
            }
            else if(timer == 20)
            {
                image_index = 12;
                if(jumpsLeft)
                {
                    playSFX(sfxFireManFireStorm);
                    with(instance_create(x+16*image_xscale,y,objTorchManDOSEmber))
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        sprite_index = sprTorchManDOSEmberFinal;
                        behavior = -1;
                        delay = -1;
                        xspeed = image_xscale*3;
                        contactDamage = 4;
                    }
                }
                else
                {
                    playSFX(sfxFireTotemFire);
                    with(instance_create(x+16*image_xscale,y,objTorchManDOSEmber))
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        behavior = -1;
                        delay = -1;
                        grav = 0.2*image_yscale;
                        if(target)yspeed = ySpeedAim(y,target.y-32*image_yscale,grav);
                        if(abs(yspeed) &lt; 4) yspeed = -4*image_yscale;
                        if(target)xspeed = xSpeedAim(x,y,target.x,target.y,yspeed,grav);
                        else xspeed = image_xscale*random_range(1,2);
                        contactDamage = 2;
                        sprite_index = sprTorchManDOSEmberSmall;
                    }
                }
            }
            else if(timer &lt; 30)
            {
                image_index = 12;
            }
            else if(timer &lt; 45)
            {
                image_index = 0;
            }
            else
            {
                image_index = 0;
                var weldingCheck = 0;
                with(objTorchManDOSWelding)
                {
                    if(weldLock != -1) weldingCheck = 1;
                }
                
                if(weldingCheck) // shoot them again
                {
                    if(timer &gt;= 120)
                    {
                        timer = 0;
                        jumpsLeft = 0;
                    }
                }
                else // cycle back to start
                {
                    timer = 0;
                    phase = 0;
                }
            }
        }
        
        burnTracker += burnSpd;
        while(burnTracker &gt;= 2) burnTracker -= 2;
        sprite_index = spriteBurn[floor(burnTracker)];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with(objTorchManDOSEmber)instance_destroy();
with(objTorchManDOSWelding)instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
