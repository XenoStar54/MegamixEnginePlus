<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGrabBusterPickup</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
goToMercury = false;
grav = 0;
blockCollision = 0;
stopOnFlash = false;

image_speed = 0.10;
despawnRange = -1;
canHit = 0;
parent = noone;
hlth = 0; // How much Mercury is healed by item
if (sprite_index != sprGrabBusterPickup)
{
    usePlayerColor = 0;
}
else
{
    usePlayerColor = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    if (!instance_exists(parent))
    {
        instance_destroy();
    }
    else
    {
        if (goToMercury)
        {
            correctDirection(round(point_direction(spriteGetXCenterObject(id),
                spriteGetYCenterObject(id), maskGetXCenterObject(parent),
                maskGetYCenterObject(parent) - 4)), 24);
            speed += 0.1;
        }
        else
        {
            if (yspeed &gt;= 0)
            {
                if (xspeed &lt; 0)
                {
                    direction = 180;
                }
                speed = abs(xspeed);
                goToMercury = 1;
                
                grav = 0;
                xspeed = 0;
                yspeed = 0;
            }
        }
        
        if (place_meeting(x, y, parent))
        {
            // hlth = 2;
            parent.healthpoints += hp;
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (sprite_index != sprGrabBusterPickup)
    {
        if (usePlayerColor)
        {
            var imgs = floor(image_number / 4);
            
            image_index = image_index mod imgs;
            
            drawSelf();
            draw_sprite_ext(sprite_index, image_index + imgs, x, y, image_xscale, image_yscale, image_angle, global.primaryCol[0], image_alpha);
            draw_sprite_ext(sprite_index, image_index + imgs * 2, x, y, image_xscale, image_yscale, image_angle, global.secondaryCol[0], image_alpha);
            draw_sprite_ext(sprite_index, image_index + imgs * 3, x, y, image_xscale, image_yscale, image_angle, global.outlineCol[0], image_alpha);
        }
        else
        {
            drawSelf();
        }
    }
    else
    {
        drawSelf();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
