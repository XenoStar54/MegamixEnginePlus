<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigPets</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// put Big Pets where you want his head to be; platforms will be created below him
// platformCount decides how many
// btw platform inherits Big Pets' blockCollision
event_inherited();

blockCollision = 0;
healthpointsStart = 28;
healthpoints = healthpointsStart;
contactDamage = 4;
ground = false;
hasTriggeredFall = false;
introType = 0;
bossTriggered = true;
delayUse = false;
storeSpeed = 0;
hasFired = false;
grav = 0;

phase = 0;
timer = 0;

eyeTimer = 0;
boosterTimer = 0;

platformCount = 2;
myPlatform[0] = noone;

spriteNormal = sprBigPets;
spriteHurt = sprBigPetsHurt;

// Health Bars
healthBarPrimaryColor[1] = 27;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

enemyDamageValue(objCrystalEye, 4);

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 2);
enemyDamageValue(objBreakDash, 2);
enemyDamageValue(objMagneticShockwave, 6);
enemyDamageValue(objIceWall, 2);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 2);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 5);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 2);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 0);
enemyDamageValue(objSuperArmDebris, 0);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 2);
enemyDamageValue(objBlockDropper, 2);
enemyDamageValue(objIceSlasher, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    if (startIntro)
    {
        calibrateDirection();
        y = view_yview - 64*image_yscale + view_hview * (image_yscale &lt; 0);
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravStart;
        timer = 0;
        canDamage = false;
        for(var i = 0; i &lt; platformCount; i++)
        {
            myPlatform[i] = instance_create(x,(ystart+i*32+48)*image_yscale,objBigPetsPlatform);
            myPlatform[i].blockCollision = blockCollisionStart;
            myPlatform[i].image_xscale = image_xscale;
            myPlatform[i].image_yscale = image_yscale;
        }
    }
    else if (isIntro)
    {
        // custom intro:
        if (y != ystart &amp;&amp; !hasTriggeredFall)
        {
            if(abs(y - ystart) &gt; 2) y += 2*image_yscale;
            else y = ystart;
        }
        else if (y == ystart || hasTriggeredFall)
        {
            if (!hasTriggeredFall)
            {
                hasTriggeredFall = true;
            }
            y = ystart;
            timer = 0;
            phase = 0;
            canFillHealthBar = true;
            isIntro = false;
            canDamage = true;
        }
    }
}
if (entityCanStep())
{
    if(isFight)
    {
        // handle image
        var eyeCheck = !platformCount;
        for(var i = 0; i &lt; platformCount; i++)
        {
            if(myPlatform[i] != noone &amp;&amp; myPlatform[i].phase != 0)
            {
                eyeCheck = true;
                i = platformCount;
            }
        }
        if(eyeCheck)
        {
            if(eyeTimer &gt; 0) eyeTimer--;
        }
        else
        {
            if(eyeTimer &lt; 12) eyeTimer++;
        }
        // launch your friend
        timer++;
        if(timer &gt; 220)
        {
            timer = 0;
            with(instance_create(x,y-44*image_yscale,objBigPetsFriend))
            {
                image_xscale = other.image_xscale;
                image_yscale = other.image_yscale;
            }
        }
    }
    boosterTimer++;
    if(boosterTimer &gt; 3) boosterTimer = 0;
    image_index = floor(boosterTimer/2) + 2*floor(eyeTimer/6);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sign(other.y - y) != -image_yscale)
{
    other.guardCancel = 3;
}
else
{
    if(image_index &lt; 4)
    {
        event_inherited();
    }
    else
    {
        other.guardCancel = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objBigPetsPlatform) instance_destroy();
with(objBigPetsFriend) event_user(EV_DEATH);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if(isFight)
        {
            if ((iFrames mod 4 &lt; 2) || !iFrames) // itsa me
            {
                sprite_index = spriteNormal;
            }
            else // im hit
            {
                sprite_index = spriteHurt;
            }
        }
        drawSelf();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
