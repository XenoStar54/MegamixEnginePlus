<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTimeIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskTimeMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

// special animation
introType = 0;
customPose = true;

pose = sprTimeIntro;
poseImgSpeed = 4 / 40;
contactDamage = 4;
ground = false;
attackTimer = 0;
timescale = 1;

//Effect
circleTimer = 0;
hasSlow = false;


//shot count
shots = 0;

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 145;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;
ballImage = 0;

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[17];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Music
music = "Mega_Man_1.nsf";
musicType = "VGM";
musicTrackNumber = 8;

enemyDamageValue(objGrabBuster, 4);
enemyDamageValue(objThunderBeam, 4);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1, 1);
}
if (entityCanStep())
{
    
     // Intro animation
    if (startIntro)
    {
        image_xscale = -1;
        canFillHealthBar = false;
        
        startIntro = false;
        isIntro = true;
        visible = true;
        
        blockCollision = blockCollisionStart;
        grav = gravStart;
        
        imageNoMin = 0;
        imageTimerMax = 6;
        
        sprite_index = sprTimeIntro
        
        
    }
    else if (isIntro)
    {
        attackTimer ++;
        
        // stop on hitting ground
        if (ycoll &gt; 0)
        {
            yspeed = 0;
            xspeed = 0;
                
            image_index = 0;
        }
        
        else if (attackTimer == 90)
        {
        playSFX(sfxMenuSelect);
        image_index = 1;  
        }
        else if (attackTimer == 120)
        {
        playSFX(sfxCharging)
        image_index = 2;  
        }
        else if (attackTimer == 125)
        {
        image_index = 3;  
        }
        else if (attackTimer == 128)
        {
        image_index = 4;  
        }
        else if (attackTimer == 130)
        {
        image_index = 5;  
        }
        else if (attackTimer == 131)
        {
        image_index = 4;  
        }
        else if (attackTimer == 132)
        {
        image_index = 5;  
        }
        else if (attackTimer == 133)
        {
        image_index = 4;  
        }
        else if (attackTimer == 134)
        {
        image_index = 5;  
        }
        else if (attackTimer == 135)
        {
        image_index = 4;  
        }
        else if (attackTimer == 136)
        {
        image_index = 5;  
        }
        else if (attackTimer == 137)
        {
        image_index = 6;  
        }
        else if (attackTimer == 138)
        {
        image_index = 7;  
        }
        else if (attackTimer == 139)
        {
        image_index = 6;  
        }
        else if (attackTimer == 140)
        {
        image_index = 7;  
        }
        else if (attackTimer == 141)
        {
        image_index = 6;  
        }
        else if (attackTimer == 142)
        {
        image_index = 7;  
        }
        else if (attackTimer == 143)
        {
        image_index = 6;  
        }
        else if (attackTimer == 144)
        {
        image_index = 7;  
        }
        else if (attackTimer == 145)
        {
        image_index = 6;  
        }
        else if (attackTimer == 146)
        {
        image_index = 7;  
        }
        else if (attackTimer == 147)
        {
        image_index = 8;  
        }
        else if (attackTimer == 148)
        {
        image_index = 9;  
        }
        else if (attackTimer == 149)
        {
        image_index = 8;  
        }
        else if (attackTimer == 150)
        {
        image_index = 9;  
        }
        else if (attackTimer == 151)
        {
        image_index = 8;  
        }
        else if (attackTimer == 152)
        {
        image_index = 9;  
        }
        else if (attackTimer == 153)
        {
        image_index = 8;  
        }
        else if (attackTimer == 154)
        {
        image_index = 9;  
        }
        else if (attackTimer == 155)
        {
        image_index = 8;  
        }
        else if (attackTimer == 156)
        {
        image_index = 9;  
        }
        else if (attackTimer == 157)
        {
        image_index = 8;  
        }
        else if (attackTimer == 158)
        {
        image_index = 9;  
        }
        else if (attackTimer == 159)
        {
        image_index = 8;  
        }
        else if (attackTimer == 160)
        {
        image_index = 9;  
        }
        else if (attackTimer == 161)
        {
        sprite_index = sprTimeJump;
        yspeed = -6;  
        playSFX(sfxExplosion)
        }
        // sunglasses animation
        else if (attackTimer == 210)
        {
            sprite_index = sprTimeIdle;
            image_index = 0; 
        }
        else if (attackTimer == 220)
        {
            sprite_index = sprTimeAttack1;
            image_index = 1; 
            playSFX(sfxTimeSlow)               
        }
        
        else if (attackTimer == 260)
        {
            canFillHealthBar = true;
            isIntro = false;
            attackTimer = 0;
            setTargetStep();
        }
    }
    if (isFight)
    {
        
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.15;
        }
        
        // resets the image timer if chill man ever changes poses
        if (pose != sprite_index)
        {
            pose = sprite_index;
            imageTimer = 0;
        }
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this is the animation system. don't touch this.
        imageTimer += 1;
        if (imageTimer &gt;= imageTimerMax &amp;&amp; image_index &lt; image_number - 1)
        {
            imageTimer = 0;
            image_index += 1;
        }
        if (imageTimer &gt;= imageTimerMax &amp;&amp; image_index == image_number - 1)
        {
            imageTimer = 0;
            image_index = imageNoMin;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(1, 1, 1);
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        
        // slow down chill man if he's in this phase and still moving.
        if (ground)
        {
            if (xspeed &gt; 0)
                xspeed = 0.03;
            else if (xspeed &lt; 0)
                xspeed = 0.03;
            if (abs(xspeed) &lt;= 0.25)
                xspeed = 0;
            
        }
        
        switch (phase)
        {
            case 0: // idle 
                calibrateDirection();
                xspeed = 0;                
                sprite_index = sprTimeIdle;
                imageNoMin = 0;
                imageTimerMax = 9999;
                if (attackTimer &gt;= 15)
                {
                    
                    phase = randomiser;
                    attackTimer = 0;
                }
                break;
           // Walking 1
            case 1:     
           xspeed = 1 * image_xscale;
                image_speed = 0.15;
                if (ground)
                {
                    if ((instance_exists(target)) &amp;&amp; (attackTimer == 45))
                    {
                    if (shots &lt; 2)
                    {
                     phase = 2;
                     attackTimer = 0;
                     }
                     else
                     {
                     shots = 0;
                     phase = 3;
                     attackTimer = 0;
                     }
                    }
                    else
                    {
                        sprite_index = sprTimeWalk;
                        
                        if (xcoll != 0)
                        {
                            image_xscale *= -1;
                        }
                    }
                }
                break;
                
            case 2: // TimeNeedle Shoot
            if (image_xscale = -1)
            {
            if instance_exists(target){
            if (x &gt; target.x)
                            sprite_index = sprTimeAttack2;
                        else
                            sprite_index = sprTimeAttack2Back;
              }
            }
            if (image_xscale = 1)
            {
            if instance_exists(target){
            if (x &gt; target.x)
                            sprite_index = sprTimeAttack2Back;
                        else
                            sprite_index = sprTimeAttack2;
                 }
            }
           
            if (attackTimer &lt; 1)
            
            
            if (attackTimer == 1)//Dammy
            {
            playSFX(sfxCommandoBombTurn);
            image_index = 1;
            var i = instance_create(x + 0 * image_xscale, y - 1, objTimeNeedle);
                        i.xspeed = 2.5 * other.image_xscale;
                        i.image_xscale = image_xscale;
                        i.timescale = timescale;
                        i.parent = id;
            }
            if (attackTimer == 1) //Shoot
            {
            playSFX(sfxCommandoBombTurn);
            image_index = 1;
            if instance_exists(target){
            if (x &gt; target.x)
            {
            var i = instance_create(x - 12, y + 5, objTimeNeedleBack);
                        i.xspeed = -3.5;
                        i.timescale = timescale;
                        i.parent = id;
                        }
                        else
                        {
                            var i = instance_create(x + 12, y + 5, objTimeNeedle);
                        i.xspeed = 3.5;
                        i.timescale = timescale;
                        i.parent = id;
                  }
            
            }
            
            }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 20)
                {
                    
                    
                    shots++;
                    phase = 1;
                    attackTimer = 0;
                }
                break;
                
            case 3: // Jump
                 
                if (attackTimer &lt; 3)
                {
                    
                }
                if (attackTimer == 3)
                {
                delay = 3;
                
                sprite_index = sprTimeJump;   
                yspeed = -4.2;
                xspeed = image_xscale * 0.7;
                hasFired = true;            
                }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 40)
                {
                    sprite_index = sprTimeIdle; 
                    attackTimer = 0;
                    phase = 4;
                    xspeed = 0;
                }
                break;
            
            case 4: // Time Slow Go to
            sprite_index = sprTimeAttack1;
            
           
            if (attackTimer &lt; 10)
            
            if (attackTimer == 20)
            { 
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 25)
                {
                    attackTimer = 0;
                    phase = 5;
                }
                break;
            
            
            case 5: // Time Slow Go to
            sprite_index = sprTimeAttack1;
            hasSlow = true;
            circleTimer += 2;
            
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            {
            image_index = 1; 
            }
            if (attackTimer == 1)
            {
            
            playSFX(sfxTimeSlow);
            if instance_exists(target)
            {
            with (target)
            {
                if (!instance_exists(statusObject))
                {
                    statusObject = instance_create(x, y, objStatusEffect);
                    statusObject.statusWalkSpeed = 1.3 / 2;
                    statusObject.statusChangedWalk = true;
                    statusObject.statusJumpSpeed = 4.75 / 2;
                    statusObject.statusChangedJump = true;
                    statusCanSlide = false;
                    gravfactor = 0.25;
                }
                else
                {
                    statusObject.statusWalkSpeed = 1.3 / 2;
                    statusObject.statusChangedWalk = true;
                    statusObject.statusJumpSpeed = 4.75 / 2;
                    statusObject.statusChangedJump = true;
                    statusCanSlide = false;
                    gravfactor = 0.25;
                    
                 }
               }
            }
            image_index = 2;
            }
            if (attackTimer == 5)
            {
            image_index = 1;
            }
            if (attackTimer == 10)
            {
            image_index = 2;
            }
            if (attackTimer == 15)
            {
            image_index = 1;
            }
            if (attackTimer == 70)
            {
            hasSlow = false;
            }
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 75)
                {
                    circleTimer = 0;
                    attackTimer = 0;
                    phase = 6;
                }
                break;
                
            // Walking 1
            case 6:     
           xspeed = 1 * image_xscale;
                image_speed = 0.15;
                if (ground)
                {
                    if ((instance_exists(target)) &amp;&amp; (attackTimer == 75))
                    {
                    if (shots &lt; 3)
                    {
                     phase = 7;
                     attackTimer = 0;
                     }
                     else
                     {
                     shots = 0;
                     phase = 8;
                     attackTimer = 0;
                     }
                    }
                    else
                    {
                        sprite_index = sprTimeWalk;
                        
                        if (xcoll != 0)
                        {
                            image_xscale *= -1;
                        }
                    }
                }
                break;
           
            case 7: // Jump
            if instance_exists(target){
            if (image_xscale = -1)
            {
            if (x &gt; target.x)
                            sprite_index = sprTimeJump;
                        else
                            sprite_index = sprTimeJumpBack;
            }
            if (image_xscale = 1)
            {
            if (x &gt; target.x)
                            sprite_index = sprTimeJumpBack;
                        else
                            sprite_index = sprTimeJump;
            }
            }
                 
                if (attackTimer &lt; 3)
                {
                    
                }
                if (attackTimer == 3)
                {
                delay = 3;  
                yspeed = -4.2;
                xspeed = image_xscale * 0.7;
                hasFired = true;            
                }
                if (attackTimer == 3)
                {
                playSFX(sfxCommandoBombTurn);
            image_index = 1;
            if instance_exists(target){
            if (x &gt; target.x)
            {
            var i = instance_create(x - 12, y + 5, objTimeNeedleBack);
                        i.xspeed = -3.5;
                        i.timescale = timescale;
                        i.parent = id;
                        }
                        else
                        {
                            var i = instance_create(x + 12, y + 5, objTimeNeedle);
                        i.xspeed = 3.5;
                        i.timescale = timescale;
                        i.parent = id;
                  }
            
            }           
            }
                if (attackTimer == 10)
                {
                 image_index = 0;           
                } 
                
                if (attackTimer == 20)
                {
                playSFX(sfxCommandoBombTurn);
            image_index = 1;
            if instance_exists(target){
            if (x &gt; target.x)
            {
            var i = instance_create(x - 12, y + 5, objTimeNeedleBack);
                        i.xspeed = -3.5;
                        i.timescale = timescale;
                        i.parent = id;
                        }
                        else
                        {
                            var i = instance_create(x + 12, y + 5, objTimeNeedle);
                        i.xspeed = 3.5;
                        i.timescale = timescale;
                        i.parent = id;
                  }
            
            }
            }
            if (attackTimer == 30)
                {
                 image_index = 0;           
                } 
                
                
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 40)
                {
                    sprite_index = sprTimeIdle; 
                    attackTimer = 0;
                    phase = 8;
                    xspeed = 0;
                }
                break;
            
            case 8: // Time Slow Go to
            sprite_index = sprTimeAttack1;
            
           
            if (attackTimer &lt; 10)
            
            if (attackTimer == 20)
            { 
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 25)
                {
                    attackTimer = 0;
                    phase = 9;
                }
                break;
                
            case 9: // Time Slow Go to
            sprite_index = sprTimeAttack1;
            hasSlow = true;
            circleTimer += 2;
            
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            {
            image_index = 1; 
            }
            if (attackTimer == 1)
            {
            
            playSFX(sfxTimeSlow);
            if instance_exists(target)
            {
            with (target)
            {
                if (!instance_exists(statusObject))
                {
                    statusObject.statusChangedWalk = false;
                statusObject.statusChangedJump = false;
                gravfactor = 1;
                }
                else
                {
                    statusObject.statusChangedWalk = false;
                statusObject.statusChangedJump = false;
                gravfactor = 1;
                    
                }
            }
        }
            image_index = 2;
            }
            if (attackTimer == 5)
            {
            image_index = 1;
            }
            if (attackTimer == 10)
            {
            image_index = 2;
            }
            if (attackTimer == 15)
            {
            image_index = 1;
            }
            if (attackTimer == 70)
            {
            hasSlow = false;
            }
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 75)
                {
                    circleTimer = 0;
                    attackTimer = 0;
                    phase = 0;
                }
                break;
        }
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// guard if time slow
if (sprite_index == sprTimeAttack1)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(target))
    {
        with (target)
        {
            inked = false;
            
            if (instance_exists(statusObject))
            {
                statusObject.statusChangedWalk = false;
                statusObject.statusChangedJump = false;
                gravfactor = 1;
            }
        }
    }

with (objTimeNeedle)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objTimeNeedleBack)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hasSlow)
{
   var p,q,i;

    

    if phase &lt; 60
        p = phase/60;
    if circleTimer &lt; 14
        p = circleTimer/14;
    
    draw_set_color(make_color_rgb(200,60,250))
    if circleTimer*3 &lt; 2*view_wview[0]
        for (j=1; j&lt; 5; j += 1)
            for (i=0; i&lt; 12; i+=1)
                draw_circle(x,y,(circleTimer+circleTimer*circleTimer/60/60)*3*j + i/4,true);

/*q = max(0,1 - circleTimer / 30)
if q &gt; 0 {
    draw_set_alpha(q);
    for (i=0;i&lt;3;i+=1) {
        dir = 90 + 35*(i-1)
        rad = circleTimer*4.5 + 20 - circleTimer*circleTimer/20
        draw_sprite_ext(sprTimeSlowLightning,i,origin_x + rad*cos(degtorad(dir)), origin_y - 8 - rad*sin(degtorad(dir)),1,1,0,c_white,q);
    }
}*/
    draw_set_alpha(1);
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
