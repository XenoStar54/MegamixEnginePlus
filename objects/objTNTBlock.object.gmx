<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTNTBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

shiftVisible = 1;
canDamage = false;
canHit = false;
contactDamage = 0;

despawnRange = -1;
respawnRange = -1;
bubbleTimer = -1;

deathTimer = -1;
deathTimerMax = 24;

isSolid = 1;
grav = 0;

itemDrop = -1;

topCheck = 0;
bottomCheck = 0;
leftCheck = 0;
rightCheck = 0;

//@cc: if true, it will draw a fuse on top of itself that can be ignited with fire
hasFuse = 0;

// What lights the fuse
var index = 0;
fireSource[index++] = objFireBlockFire;
fireSource[index++] = objFirePillar;
fireSource[index++] = objFireWave;
fireSource[index++] = objTackleFire;
fireSource[index++] = objHotDogFire;
fireSource[index++] = objLightningLordLightning;
fireSource[index++] = objApacheJoeProjectile;
fireSource[index++] = objFireBoyShot;
fireSource[index++] = objFireTellyShot;
fireSource[index++] = objFireSpike;
fireSource[index++] = objHeatMan;
fireSource[index++] = objHeatManFire;
fireSource[index++] = objMechaDragonFire;
fireSource[index++] = objPharaohManShot;
fireSource[index++] = objPharaohManShotBig;
fireSource[index++] = objPharaohShot;
fireSource[index++] = objSolarBlaze;
fireSource[index++] = objNapalm;
fireSource[index++] = objPopoHeliFire;
fireSource[index++] = objChangkeyDragon;
fireSource[index++] = objChangkeyDragonFire;
fireSource[index++] = objSuzak;
fireSource[index++] = objFenix;
fireSource[index++] = objSFFire;
fireSource[index++] = objFlameMixer;
fireSource[index++] = objPUOilFire;
fireSource[index++] = objGrassPatchFire;
fireSource[index++] = objFireStorm;
fireSource[index++] = objFireStormGB;
fireSource[index++] = objAtomicFire;
fireSource[index++] = objAtomicFireGB;
fireSource[index++] = objFlameBlast;
fireSource[index++] = objMagmaBazooka;
fireSource[index++] = objBlazingTorch;
fireSource[index++] = objWaveBurner;
fireSource[index++] = objTorchArm;

fuseState = -7;
fuseStateMax = 48;

//@cc: prevent TNT connecting with each other by swapping these to 0
connectTop = 1;
connectBottom = 1;
connectLeft = 1;
connectRight = 1;

image_angle = 0;
image_speed = 0;

width = 32;
height = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// handle connection logic
topCheck = 0;
bottomCheck = 0;
leftCheck = 0;
rightCheck = 0;

with(objTNTBlock) with(other)
{
    if(place_meeting(x,y-image_yscale,other))
    {
        if(!hasFuse &amp;&amp; connectTop &amp;&amp; other.connectBottom)
        {
            topCheck = 1;
        }
    }
    if(place_meeting(x,y+image_yscale,other))
    {
        if(!other.hasFuse &amp;&amp; other.connectTop &amp;&amp; connectBottom)
        {
            bottomCheck = 1;
        }
    }
    if(place_meeting(x-image_xscale,y,other))
    {
        if(connectLeft &amp;&amp; other.connectRight)
        {
            leftCheck = 1;
        }
    }
    if(place_meeting(x+image_xscale,y,other))
    {
        if(other.connectLeft &amp;&amp; connectRight)
        {
            rightCheck = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    // handle fuse logic
    if(hasFuse)
    {
        if(fuseState == -7)
        {
            for(var i = 0; i &lt; array_length_1d(fireSource); i++)
            {
                if(instance_exists(fireSource[i]) &amp;&amp; collision_line(x,y-16*image_yscale,x,y-32*image_yscale,fireSource[i],0,1))
                {
                    fuseState = fuseStateMax;
                }
            }
        }
        else
        {
            if(fuseState &gt; -6) fuseState--;
            if(fuseState == 0)
            {
                instance_create(spriteGetXCenter() - abs(bbox_left-bbox_right)/4, spriteGetYCenter() - abs(bbox_top-bbox_bottom)/4, objExplosion);
                instance_create(spriteGetXCenter() - abs(bbox_left-bbox_right)/4, spriteGetYCenter() + abs(bbox_top-bbox_bottom)/4, objExplosion);
                instance_create(spriteGetXCenter() + abs(bbox_left-bbox_right)/4, spriteGetYCenter() - abs(bbox_top-bbox_bottom)/4, objExplosion);
                instance_create(spriteGetXCenter() + abs(bbox_left-bbox_right)/4, spriteGetYCenter() + abs(bbox_top-bbox_bottom)/4, objExplosion);
            }
            else if(fuseState &lt;= -6)
            {
                event_user(EV_DEATH);
            }
        }
    }
    else
    {
        fuseState = -7;
    }
    
    // explode
    if(deathTimer &gt; 0) deathTimer--;
    else if(deathTimer == 0)
    {
        event_user(EV_DEATH);
    }
    
    // preemptive tell
    if(deathTimer == 6)
    {
        instance_create(spriteGetXCenter() - abs(bbox_left-bbox_right)/4, spriteGetYCenter() - abs(bbox_top-bbox_bottom)/4, objExplosion);
        instance_create(spriteGetXCenter() - abs(bbox_left-bbox_right)/4, spriteGetYCenter() + abs(bbox_top-bbox_bottom)/4, objExplosion);
        instance_create(spriteGetXCenter() + abs(bbox_left-bbox_right)/4, spriteGetYCenter() - abs(bbox_top-bbox_bottom)/4, objExplosion);
        instance_create(spriteGetXCenter() + abs(bbox_left-bbox_right)/4, spriteGetYCenter() + abs(bbox_top-bbox_bottom)/4, objExplosion);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// On spawn/despawn
event_inherited();

if (spawned)
{
    deathTimer = -1;
    fuseState = -7;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playSFX(sfxMinorExplosion);
event_inherited();

deathTimer = -1;
fuseState = -1;

with(objTNTBlock) with(other)
{
    var boomCheck = 0;
    
    if(place_meeting(x,y-image_yscale,other))
    {
        if(topCheck &amp;&amp; other.bottomCheck)
        {
            boomCheck = 1;
        }
    }
    if(place_meeting(x,y+image_yscale,other))
    {
        if(other.topCheck &amp;&amp; bottomCheck)
        {
            boomCheck = 1;
        }
    }
    if(place_meeting(x-image_xscale,y,other))
    {
        if(leftCheck &amp;&amp; other.rightCheck)
        {
            boomCheck = 1;
        }
    }
    if(place_meeting(x+image_xscale,y,other))
    {
        if(other.leftCheck &amp;&amp; rightCheck)
        {
            boomCheck = 1;
        }
    }
    
    if(boomCheck) other.deathTimer = other.deathTimerMax;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dead)
{
    draw_sprite_part_ext(sprite_index,0,0,0,width,height,x-sprite_xoffset,y-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    
    var animInd = floor(global.roomTimer/8) mod 6;
    if(animInd == 4) animInd = 2;
    else if(animInd == 5) animInd = 1;
    
    if(topCheck)
    {
        draw_sprite_part_ext(sprite_index,5+animInd,0,0,width,height,x-sprite_xoffset,y-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    }
    if(bottomCheck)
    {
        draw_sprite_part_ext(sprite_index,13+animInd,0,0,width,height,x-sprite_xoffset,y-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    }
    if(leftCheck)
    {
        draw_sprite_part_ext(sprite_index,9+animInd,0,0,width,height,x-sprite_xoffset,y-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    }
    if(rightCheck)
    {
        draw_sprite_part_ext(sprite_index,1+animInd,0,0,width,height,x-sprite_xoffset,y-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    }
    
    if(!bottomCheck &amp;&amp; checkSolid(0,image_yscale))
    {
        draw_sprite_part_ext(sprite_index,17,0,0,width,height,x-sprite_xoffset,y-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    }
    
    if(hasFuse)
    {
        var fuseImg = 18;
        if(fuseState &gt;= 0)
        {
            var fuseLength = 3 - min(4*(fuseState/fuseStateMax),3);
            var fuseSpark = floor(fuseState/3) mod 4;
            if(fuseSpark == 3) fuseSpark = 1;
            fuseImg = 19 + 4*fuseLength + fuseSpark;
        }
        else if(fuseState &gt;= -6)
        {
            fuseImg = 30;
        }
        draw_sprite_part_ext(sprite_index,fuseImg,0,0,width,height,x-sprite_xoffset,y-32*image_yscale-sprite_yoffset,image_xscale,image_yscale,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
