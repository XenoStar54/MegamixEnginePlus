<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDarkness</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>11</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>targetAlphaA = 0;
targetAlphaB = 1;
fadeTime = 16;
flashTime = 8;
dead = 0;
active = 0;

// intended to be set by other objects; when &gt;0, fullbright or dim mode is active
overrideFullbrightTimer = 0;
overrideDimTimer = 0;

// @cc: which objects create spotlights around themselves
// overwrite lightSource[0] to disable all objects from causing light indiscriminately
lightSource[0] = prtEntity;

// @cc: those objects won't get spotlights drawn over them
sourceBlackList[0] = objBossDoor;
sourceBlackList[1] = objBossDoorVertical;
sourceBlackList[2] = objQuickLaserSpawner;

// @cc: default radius for objects' spotlights
radiusDef[0] = 16;

// @cc: multiplies radius by this much when darkness is disabled
radiusMultBright = 2;

// @cc: multiplies radius by this much when switch flag is enabled
radiusMultDim = 0.75;

// @cc: flag numbers for switches to disable brightness or increase it
myFlagBright = 999;
myFlagDim = 999;

// @cc: these objects disable darkness completely
fullbrightSource[0] = objFlashStopper;
fullbrightSource[1] = prtBoss;
fullbrightSource[2] = objEnergyElement;

// don't touch
init = 1;
radiusReal[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fade and flash
if(init)
{
    for(var i = 0; i &lt; array_length_1d(radiusDef); i++) radiusReal[i] = radiusDef[i]*radiusMultBright;
    init = 0;
}

if(!active)
{
    if(image_alpha &gt; 0) image_alpha -= (targetAlphaB - 0)/fadeTime;
    else visible = false;
    for(var i = 0; i &lt; array_length_1d(radiusDef); i++)
    {
        var copyRadius = ceil(radiusDef[i]*radiusMultBright);
        if(radiusReal[i] != copyRadius) radiusReal[i] += (copyRadius - radiusDef[i])/fadeTime;
    }
    if(insideView())
    {
        if(instance_exists(objMegaman) &amp;&amp; place_meeting(x,y,objMegaman)) active = true;
    }
}
else
{
    visible = true;
    
    if(!instance_exists(objPauseMenu))
    {
        var radiusMult = 1, isFullbright = 0, isDim = 0;
        for(var i = 0; i &lt; array_length_1d(fullbrightSource); i++)
        {
            if(instance_exists(fullbrightSource[i]) &amp;&amp; !fullbrightSource[i].dead) isFullbright = 1;
        }
        if(instance_exists(objSwitchHandler))
        {
            if(myFlagBright != 999 &amp;&amp; global.flag[myFlagBright]) isFullbright = 1;
            else if(myFlagDim != 999 &amp;&amp; global.flag[myFlagDim]) isDim = 1;
        }
        if(overrideFullbrightTimer)
        {
            overrideFullbrightTimer--;
            isFullbright = 1;
        }
        else if(overrideDimTimer)
        {
            overrideDimTimer--;
            isDim = 1;
        }
        if(isFullbright) radiusMult = radiusMultBright;
        else if(isDim) radiusMult = radiusMultDim;
        for(var i = 0; i &lt; array_length_1d(radiusDef); i++)
        {
            var copyRadius = ceil(radiusDef[i]*radiusMult);
            if(abs(copyRadius - radiusReal[i]) &gt; abs(copyRadius - radiusReal[i])/flashTime) radiusReal[i] += (copyRadius - radiusReal[i])/flashTime;
            else radiusReal[i] = copyRadius;
        }
        
        if(isFullbright)
        {
            if(image_alpha &gt; targetAlphaA) image_alpha -= (targetAlphaB - targetAlphaA)/fadeTime;
            else image_alpha = targetAlphaA;
        }
        else
        {
            if(image_alpha &lt; targetAlphaB) image_alpha += (targetAlphaB - targetAlphaA)/fadeTime;
            else image_alpha = targetAlphaB;
        }
    }
    
    if(insideView())
    {
        if(instance_exists(objMegaman) &amp;&amp; !place_meeting(x,y,objMegaman)) active = false;
    }
    else active = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw spotlights on entities
var prevAlpha = draw_get_alpha();

var darkSurface = surface_create(view_wview,view_hview);
surface_set_target(darkSurface);
draw_set_color(c_black);
draw_set_alpha(image_alpha);
draw_clear_alpha(c_black,image_alpha);
draw_rectangle(view_xview-view_xview,view_yview-view_yview,view_xview+view_wview-view_xview,view_yview+view_hview-view_yview,0);
draw_set_blend_mode(bm_subtract);
draw_set_color(c_white);
draw_set_alpha(1);
draw_set_circle_precision(64);
for(var i = 0; i &lt; array_length_1d(lightSource); i++)
{
    with(lightSource[i]) if(!dead)
    {
        var qualified = (darknessSpotlightRadiusMult != 0);
        for(var j = 0; j &lt; array_length_1d(other.sourceBlackList); j++) if(instance_exists(other.sourceBlackList[j]))
        {
            if(object_index == other.sourceBlackList[j].object_index || object_get_parent(self) == other.sourceBlackList[j])
            {
                qualified = 0;
                j = array_length_1d(other.sourceBlackList);
            }
        }
        if(qualified)
        {
            var spotlightRadius = darknessSpotlightRadiusMult*sqrt(abs(other.radiusReal[i]*abs(bbox_left-bbox_right)*abs(bbox_top-bbox_bottom)/pi));
            if(abs(bbox_left-bbox_right) &gt; spotlightRadius*2 || abs(bbox_top-bbox_bottom) &gt; spotlightRadius*2 || abs(image_xscale) != 1 || abs(image_yscale) != 1)
            {
                draw_roundrect(bbox_left-other.radiusReal[i]-view_xview,bbox_top-other.radiusReal[i]-view_yview,bbox_right+other.radiusReal[i]-view_xview,bbox_bottom+other.radiusReal[i]-view_yview,0);
            }
            else draw_ellipse(round(bboxGetXCenter()-view_xview-spotlightRadius-1),round(bboxGetYCenter()-view_yview-spotlightRadius-1),round(bboxGetXCenter()-view_xview+spotlightRadius),round(bboxGetYCenter()-view_yview+spotlightRadius),false);
        }
    }
}
draw_set_alpha(image_alpha);
surface_reset_target();
draw_set_blend_mode(bm_normal);
draw_surface(darkSurface,view_xview,view_yview);
surface_free(darkSurface);
draw_set_color(c_white);
draw_set_alpha(prevAlpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
