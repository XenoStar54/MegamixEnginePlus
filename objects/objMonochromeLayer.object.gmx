<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMonochromeLayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this object creates a surface to draw objects and tiles within defined depths in one color
// WARNING: THIS WON'T WORK FOR VERY HIGH DEPTHS (like 100000 and more)
depthMin = -1;
depthMax = 5;

drawOption = 0;
// 0: grabs objects and tiles
// 1: only grabs objects
// 2: only grabs tiles

drawColorIndex = 0;
drawColorStep = 0;
drawColor[0,0] = c_white;
drawColor[0,1] = c_white;

// if myFlag is valid, this object will take switch input to swap colors
myFlag = 999;

// if you want to cycle between multiple colors:
// write all colors in sequence into the drawColor[] array
// set drawColorStep to:
//       1 / (amount of frames it takes to change color)

drawOffsetX = 0;
drawOffsetY = 0;

// if this is set to 1, the object will instead draw itself on its specified depth value
useCustomDepth = 0;

affectedObjects[0] = prtEntity;
affectedObjects[1] = prtEffect;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var realMinDepth = min(depthMin,depthMax);
var realMaxDepth = max(depthMin,depthMax);

if(!useCustomDepth) depth = realMinDepth;

var active = 0;
with(objSwitchHandler) if(myFlag == other.myFlag) active = global.flagParent[myFlag].active;

drawColorIndex += drawColorStep;
var myColor = drawColor[floor(drawColorIndex) mod array_height_2d(drawColor),active];

if(insideView())
{
    var surface = surface_create(abs(bbox_left-bbox_right)+1,abs(bbox_top-bbox_bottom)+1);
    surface_set_target(surface);
    draw_clear_alpha(c_white,0);
    d3d_set_fog(1,myColor,realMinDepth,realMaxDepth);
    if((drawOption mod 2) == 0) // grab tiles
    {
        for(var layer = realMaxDepth; layer &gt;= realMinDepth; layer--)
        {
            var tiles = tile_get_ids_at_depth(layer);
            var total = array_length_1d(tiles);
            if(total &gt; 0) for(var i = 0; i &lt; total; i++)
            {
                if(tile_exists(tiles[i]))
                    draw_background_part(tile_get_background(tiles[i]),
                        tile_get_left(tiles[i]),tile_get_top(tiles[i]),
                        tile_get_width(tiles[i]),tile_get_height(tiles[i]),
                        tile_get_x(tiles[i])-other.bbox_left,tile_get_y(tiles[i])-other.bbox_top);
            }
        }
    }
    if((drawOption mod 4) &lt; 2) // grab objects
    {
        for(var i = 0; i &lt; array_length_1d(affectedObjects); i++)
            if(affectedObjects[i] != noone)
            {
                with(affectedObjects[i]) if(visible &amp;&amp; depth &lt;= realMaxDepth &amp;&amp; depth &gt;= realMinDepth)
                {
                    var doNotDraw = 0; // very special case, maybe I'll have to add more later
                    if(object_index == objMegaman &amp;&amp; teleportLock) doNotDraw = 1;
                    if(!doNotDraw)
                    {
                        x -= other.bbox_left;
                        y -= other.bbox_top;
                        event_perform(ev_draw,0);
                        x += other.bbox_left;
                        y += other.bbox_top;
                    }
                }
            }
    }
    d3d_set_fog(0,myColor,realMinDepth,realMaxDepth);
    surface_reset_target();
    draw_surface(surface,bbox_left+drawOffsetX,bbox_top+drawOffsetY);
    surface_free(surface);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
