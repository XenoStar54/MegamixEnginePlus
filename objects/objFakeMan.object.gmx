<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFakeMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fake Man uses his own sfx that I couldn't find
// seriously where the frick do people get sfx from
soundShoot = sfxFakeManShoot;
soundReload = sfxFakeManReload;

event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
introType = 0;
customPose = true;
poseImgSpeed = 0.11;
contactDamage = 4;
hasTriggeredFall = false;
blockCollision = true;

phase = 0;
timer = 0;
animTimer = 0;
clip = 6;
trackY = y;

// Healthbar color
healthBarPrimaryColor[1] = 1;
healthBarSecondaryColor[1] = 14; // actually it's rgb(88,144,248) but this is close enough

// Music
music = "Mega_Man_9.nsf";
musicType = "VGM";
musicTrackNumber = 16;
musicVolume = 1.4;

enemyDamageValue(objLeafShield, 4);
enemyDamageValue(objStarCrash, 4);

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 1);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        y -= view_hview*image_yscale;
        calibrateDirection();
        phase = 0;
        timer = 0;
        animTimer = 0;
        clip = 6;
        hasTriggeredFall = false;
        canFillHealthBar = false;
        image_index = 8;
        visible = true;
        startIntro = false;
        isIntro = true;
        grav = gravStart;
    }
    else if(isIntro)
    {
        if(y != ystart &amp;&amp; !hasTriggeredFall)
        {
            if(abs(y - ystart) &lt; abs(yspeed))
            {
                y = ystart;
                gravStart = grav;
                grav = 0;
                yspeed = 0;
                hasTriggeredFall = true;
            }
            image_index = 8;
        }
        else
        {
            if(!hasTriggeredFall) hasTriggeredFall = true;
            timer++;
            if(timer &lt; 3)
            {
                image_index = 9;
            }
            else if(timer &lt; 6)
            {
                image_index = 10;
            }
            else if(timer &lt; 9)
            {
                image_index = 11;
            }
            else if(timer &lt; 12)
            {
                image_index = 9;
            }
            else if(timer &lt; 15)
            {
                image_index = 10;
            }
            else if(timer &lt; 18)
            {
                image_index = 11;
            }
            else if(timer &lt; 21)
            {
                image_index = 9;
            }
            else if(timer &lt; 24)
            {
                image_index = 10;
            }
            else if(timer &lt; 27)
            {
                image_index = 11;
            }
            else if(timer &lt; 47)
            {
                image_index = 0;
            }
            else if(timer &lt; 50)
            {
                image_index = 9;
            }
            else if(timer &lt; 53)
            {
                image_index = 10;
            }
            else if(timer &lt; 56)
            {
                image_index = 11;
            }
            else if(timer &lt; 59)
            {
                image_index = 9;
            }
            else if(timer &lt; 62)
            {
                image_index = 10;
            }
            else if(timer &lt; 65)
            {
                image_index = 11;
            }
            else if(timer &lt; 68)
            {
                image_index = 9;
            }
            else if(timer &lt; 71)
            {
                image_index = 10;
            }
            else if(timer &lt; 74)
            {
                image_index = 11;
            }
            else if(timer &lt; 104)
            {
                image_index = 0;
            }
            else if(timer &lt; 110)
            {
                image_index = 1;
            }
            else if(timer &lt; 125)
            {
                image_index = 2;
            }
            else if(timer &lt; 131)
            {
                image_index = 3;
            }
            else
            {
                timer = 0;
                animTimer = 0;
                phase = 0;
                canFillHealthBar = true;
                isIntro = false;
                grav = gravStart;
                blockCollision = blockCollisionStart;
                setTargetStep();
            }
        }
    }
    else if(isFight)
    {
        if(!target)
        {
            if(phase != -1)
            {
                phase = -1;
                timer = 74;
            }
        }
        if(phase == -1) // salute
        {
            if(ground)
            {
                xspeed = 0;
                timer++;
                if(timer &lt; 104)
                {
                    image_index = 0;
                }
                else if(timer &lt; 110)
                {
                    image_index = 1;
                }
                else if(timer &lt; 125)
                {
                    image_index = 2;
                }
                else if(timer &lt; 131)
                {
                    image_index = 3;
                }
            }
            else
            {
                image_index = 8;
            }
        }
        else if(phase == 0) // chase
        {
            if(ground)
            {
                if(animTimer mod 7 == 0)
                {
                    if(image_index &lt; 4 || image_index &gt;= 7) image_index = 4;
                    else image_index++;
                }
                animTimer++;
                
                if(target &amp;&amp; abs(x - target.x) &gt;= 32) // turn around, I ran past Mega
                {
                    calibrateDirection();
                }
                
                if(sign(xcoll) == image_xscale) // there's something in the way, jump over or turn around
                {
                    if(!checkSolid(image_xscale,-48*sign(grav)))
                    {
                        yspeed = -5*sign(grav);
                        image_index = 8;
                    }
                    else
                    {
                        image_xscale *= -1;
                    }
                }
                xspeed = 1.5*image_xscale;
                
                if(instance_exists(prtPlayerProjectile)) // shot detected, JUMP
                {
                    calibrateDirection();
                    timer = 0;
                    phase = 1;
                    animTimer = 0;
                    clip = 6;
                    trackY = y;
                    yspeed = -7*sign(grav);
                    xspeed = -2*image_xscale;
                }
            }
            else
            {
                image_index = 8;
                animTimer = 0;
                xspeed = 1.5*image_xscale;
            }
        }
        else if(phase == 1) // jump back and shoot on the way down
        {
            if(!ground)
            {
                animTimer++;
                if(animTimer &lt; 3)
                {
                    image_index = 12;
                }
                else if(animTimer &lt; 6)
                {
                    image_index = 13;
                }
                else if(animTimer &lt; 9)
                {
                    image_index = 14;
                }
                else
                {
                    image_index = 12;
                    animTimer = 0;
                }
            
                if(clip == 6)
                {
                    if(sign(yspeed) == sign(grav) &amp;&amp; abs((trackY-32*sign(grav)) - y) &lt; abs(yspeed)) // time to shoot my first bullet
                    {
                        clip--;
                        var bullet = instance_create(x+22*image_xscale,y-6*image_yscale,objEnemyBullet);
                        bullet.blockCollision = false;
                        bullet.contactDamage = 4;
                        bullet.xspeed = 5*image_xscale;
                        playSFX(soundShoot);
                    }
                }
                else if(clip == 5)
                {
                    if(sign(yspeed) == sign(grav) &amp;&amp; abs(trackY - y) &lt; abs(yspeed)) // time to shoot my second bullet
                    {
                        clip--;
                        var bullet = instance_create(x+22*image_xscale,y+6*image_yscale,objEnemyBullet);
                        bullet.blockCollision = false;
                        bullet.contactDamage = 4;
                        bullet.xspeed = 5*image_xscale;
                        playSFX(soundShoot);
                    }
                }
            }
            else // I landed
            {
                xspeed = 0;
                if(clip &gt; 4)
                {
                    clip = 4;
                    var bullet = instance_create(x+22*image_xscale,y-6*image_yscale,objEnemyBullet);
                    bullet.blockCollision = false;
                    bullet.contactDamage = 4;
                    bullet.xspeed = 5*image_xscale;
                    playSFX(soundShoot);
                }
                
                timer++;
                if(timer &lt; 21)
                {
                    image_index = 0;
                }
                else if(timer &lt; 30)
                {
                    image_index = 1;
                }
                else
                {
                    timer = 0;
                    animTimer = 0;
                    phase = 2;
                    trackY = y;
                    if(x &gt; view_xview+view_wview/2) image_xscale = -1;
                    else image_xscale = 1;
                    yspeed = -7*sign(grav);
                    xspeed = xSpeedAim(x,y,(view_xview+view_wview/2+(view_wview/2)*image_xscale),y,yspeed,grav);
                    image_index = 15;
                }
            }
        }
        else if(phase == 2) // jump to the other side and launch 2 aimed shots
        {
            if(!ground)
            {
                animTimer++;
                if(animTimer &lt; 3)
                {
                    image_index = 15;
                }
                else if(animTimer &lt; 6)
                {
                    image_index = 16;
                }
                else if(animTimer &lt; 9)
                {
                    image_index = 17;
                }
                else
                {
                    image_index = 15;
                    animTimer = 0;
                }
                
                if(x &gt; view_xview+view_wview/2) image_xscale = -1;
                else image_xscale = 1;
                
                if(clip == 4)
                {
                    if(sign(yspeed) == -sign(grav) &amp;&amp; abs((trackY-48*sign(grav)) - y) &lt; abs(yspeed)) // time to shoot my first bullet
                    {
                        clip--;
                        var bullet = instance_create(x+18*image_xscale,y+5*image_yscale,objEnemyBullet);
                        bullet.blockCollision = false;
                        bullet.contactDamage = 4;
                        bullet.spd = 5;
                        with(bullet)
                        {
                            if(target)
                            {
                                dir = point_direction(x,y,bboxGetXCenterObject(target),bboxGetYCenterObject(target));
                            }
                            else dir = 90-other.image_xscale*90;
                        }
                        playSFX(soundShoot);
                    }
                }
                else if(clip == 3)
                {
                    if(sign(yspeed) == sign(grav) &amp;&amp; abs((trackY-48*sign(grav)) - y) &lt; abs(yspeed)) // time to shoot my first bullet
                    {
                        clip--;
                        var bullet = instance_create(x+18*image_xscale,y+5*image_yscale,objEnemyBullet);
                        bullet.blockCollision = false;
                        bullet.contactDamage = 4;
                        bullet.spd = 5;
                        with(bullet)
                        {
                            if(target)
                            {
                                dir = point_direction(x,y,bboxGetXCenterObject(target),bboxGetYCenterObject(target));
                            }
                            else dir = 90-other.image_xscale*90;
                        }
                        playSFX(soundShoot);
                    }
                }
            }
            else
            {
                xspeed = 0;
                if(clip &gt; 2)
                {
                    clip = 2;
                    var bullet = instance_create(x+22*image_xscale,y-6*image_yscale,objEnemyBullet);
                    bullet.blockCollision = false;
                    bullet.contactDamage = 4;
                    bullet.xspeed = 5*image_xscale;
                    playSFX(soundShoot);
                }
                
                timer++;
                if(timer &lt; 21)
                {
                    image_index = 0;
                }
                else if(timer &lt; 30)
                {
                    image_index = 1;
                }
                else
                {
                    timer = 0;
                    animTimer = 0;
                    phase = 3;
                    trackY = y;
                    calibrateDirection();
                    yspeed = -7*sign(grav);
                    clip--;
                    var bullet = instance_create(x+22*image_xscale,y+6*image_yscale,objEnemyBullet);
                    bullet.blockCollision = false;
                    bullet.contactDamage = 4;
                    bullet.xspeed = 5*image_xscale;
                    playSFX(soundShoot);
                    image_index = 12;
                }
            }
        }
        else if(phase == 3) // shoot one last bullet
        {
            if(!ground)
            {
                animTimer++;
                if(animTimer &lt; 3)
                {
                    image_index = 12;
                }
                else if(animTimer &lt; 6)
                {
                    image_index = 13;
                }
                else if(animTimer &lt; 9)
                {
                    image_index = 14;
                }
                else
                {
                    image_index = 12;
                    animTimer = 0;
                }
                
                if(clip &amp;&amp; sign(yspeed) == -sign(grav) &amp;&amp; abs((trackY-32*sign(grav)) - y) &lt; abs(yspeed))
                {
                    clip = 0;
                    var bullet = instance_create(x+22*image_xscale,y+6*image_yscale,objEnemyBullet);
                    bullet.blockCollision = false;
                    bullet.contactDamage = 4;
                    bullet.xspeed = 5*image_xscale;
                    playSFX(soundShoot);
                }
            }
            else
            {
                xspeed = 0;
                timer = 0;
                animTimer = 0;
                phase = 4;
                image_index = 18;
            }
        }
        else if(phase == 4) // reload
        {
            timer++;
            if(timer &lt; 16)
            {
                image_index = 18;
            }
            else if(timer == 16)
            {
                animTimer = 1;
                image_index = 19;
                playSFX(soundReload);
                clip = 6;
            }
            else if(timer &lt; 36)
            {
                animTimer++;
                if(animTimer &lt; 3)
                {
                    image_index = 19;
                }
                else if(animTimer &lt; 6)
                {
                    image_index = 20;
                }
                else if(animTimer &lt; 9)
                {
                    image_index = 21;
                }
                else
                {
                    image_index = 19;
                    animTimer = 0;
                }
            }
            else if(timer &lt; 46)
            {
                image_index = 0;
            }
            else
            {
                phase = 0;
                timer = 0;
                animTimer = 0;
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with (objEnemyBullet) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
