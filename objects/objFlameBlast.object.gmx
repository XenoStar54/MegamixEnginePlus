<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFlameBlastShot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 2;

state = 0;

killFlamePillar = 0;

penetrate = 0; //1 for flame column
pierces = 1; //2 for flame column

firstFrame = true;

blockCollision = 1;
grav = 0.25;

image_speed = 1 / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// if starting out in a wall, make sure to exit wall
if (firstFrame)
{
    firstFrame = false;
    n_tries = 48;
    checkX = true;
    r = 0;
    
    while (place_meeting(x - checkX * r * sign(xspeed), y - (!checkX) * r * sign(yspeed), objSolid) &amp;&amp; n_tries &gt; 0)
    {
        checkX = !checkX;
        if (checkX)
        {
            r += 1;
        }
        n_tries -= 1;
    }
    
    if (n_tries &lt;= 0)
    {
        instance_destroy();
        exit;
    }
    
    x -= (checkX) * r * sign(xspeed);
    y -= (!checkX) * r * sign(yspeed);
}

if (!global.frozen)
{
    if(state == 0)
    {
        var canProceed = true;
        x += xcoll;
        y += ycoll;
        if ((xcoll != 0 || ycoll != 0) &amp;&amp; !place_meeting(x, y, objSolid) &amp;&amp; !place_meeting(x, y, objTopSolid))
        {
            canProceed = false;
            with (prtEntity)
            {
                var sld = 0;
                if (!isSolid || ((canDamage &amp;&amp; contactDamage != 0) &amp;&amp; canHit != 0))
                    continue;
                if (!dead)
                {
                    if (isSolid == 1)
                    {
                        if (!fnsolid)
                        {
                            sld = 1;
                        }
                        else
                        {
                            sld = !global.factionStance[faction, other.faction];
                        }
                    }
                    else if (isSolid == 2)
                    {
                        if ((!place_meeting(x, y, other.id))
                            || (!place_meeting(x, y + sign(other.grav), other.id)))
                        {
                            if (!fnsolid)
                            {
                                sld = 1;
                            }
                            else
                            {
                                sld = !global.factionStance[faction, other.faction];
                            }
                        }
                    }
                    
                    if (sld)
                    {
                        if (place_meeting(x, y, other))
                        {
                            canProceed = true;
                            break;
                        }
                    }
                }
            }
        }
        if (canProceed)
        {
            x -= xcoll;
            y -= ycoll;
        }
        for (var i = 0; i &lt; 3; i += 1)
        {
            if (!canProceed || (ycoll == 0 &amp;&amp; xcoll == 0))
                break;
            
            // if hitting a wall/floor, turn into spike:
            
            if (ycoll != 0 || (ycoll != 0 &amp;&amp; xcoll != 0))
            {
                instance_destroy();
                if(ground)
                {
                    a = (instance_create(x, y, objFlameBlast));
                    a.image_yscale = image_yscale;
                    a.penetrate = 0; //1 for flame column
                    a.pierces = 1; //2 for flame column
                    a.state = 1;
                    a.image_index = 0;
                    a.sprite_index = sprFlameBlastFloor;
                    a.grav = 0;
                }
                else
                {
                    a = (instance_create(x, y, objFlameBlast));
                    a.image_yscale = -1 * image_yscale;
                    a.penetrate = 0; //1 for flame column
                    a.pierces = 1; //2 for flame column
                    a.state = 1;
                    a.image_index = 0;
                    a.sprite_index = sprFlameBlastFloor;
                    a.grav = 0;
                }
            }
            else if (xcoll != 0)
            {
                instance_destroy();
                a = (instance_create(x, y, objFlameBlast));
                a.image_xscale = -1 * image_xscale;
                a.penetrate = 0; //1 for flame column
                a.pierces = 1; //2 for flame column
                a.state = 2;
                a.image_index = 0;
                a.sprite_index = sprFlameBlastWall;
                a.grav = 0;
            }
        }
    }
    else // column
    {
        if(image_index == 6)
        {
            image_index = 0;
            killFlamePillar++;
        }
        if(killFlamePillar == 2)
        {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT)
&amp;&amp; instance_number(objFlameBlast) &lt; 3)
{
    i = fireWeapon(21, 0, objFlameBlast, 3, 1, 1, 0);
    if (instance_exists(i)) // Set starting speed
    {
        i.state = 0;
        i.xspeed = 4 * image_xscale;
        i.grav = i.grav * image_yscale;
        playSFX(sfxBuster);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue("aquatic", 0);
specialDamageValue("nature", 6);
specialDamageValue("fire", 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("FLAME BLAST", global.nesPalette[32], global.nesPalette[47], sprWeaponIconsFlameBlast);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Some MM6 Weapons have special reflection effects for some reason
image_xscale *= -1;
xspeed *= -1;
playSFX(sfxReflect);
contactDamage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
