<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagmaIntro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprMagmaMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

customPose = true;
hasTriggeredFall = false;
introType = 1;
contactDamage = 8;
ground = false;
attackTimer = 0;
grav = 0.25

//MagmaManSpecialCode
bombX[0] = -3;
bombY[0] = -25;
bombX[1] = 0;
bombY[1] = -18;
bombX[2] = 0;
bombY[2] = -17;
bombX[3] = -0;
bombY[3] = -999;
bombX[4] = 0;
bombY[4] = -19;
bombX[5] = 0;
bombY[5] = -20;
bombX[6] = -3;
bombY[6] = -25;
bombX[7] = -3;
bombY[7] = -25;
bombX[8] = 0;
bombY[8] = -15;
bombX[9] = 0;
bombY[9] = -8;
bombX[10] = -999;
bombY[10] = -999;
bombX[11] = 13;
bombY[11] = -19;
bombX[12] = 7;
bombY[12] = -20;
bombX[13] = 3;
bombY[13] = -20;

hasFire = 0

MagmaStepNumber = 2
JumpNumber = 0
ShootTimer = 0
ShootTimer = 0
yspd = 0
GoFire = 0

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 999;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

shotsToFire = 2; //@cc use this if you want to determine how many chill spikes chill man fires. more than 3 is excessive, as he alternates between firing at the floor and wall.

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[7];
healthBarSecondaryColor[1] = global.nesPalette[20];

// Music
music = "Mega_Man_9.nsf";
musicType = "VGM";
musicTrackNumber = 16;
musicVolume = 1.4;

enemyDamageValue(objTornadoBlow, 6);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1, 1);
}
if (entityCanStep())
{
    
    // Fire Man's custom intro
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravAccel;
        calibrateDirection();
    }
    else if (isIntro)
    {
        // custom intro:
        if (attackTimer == 0) &amp;&amp; (introType == 1)
        {
            image_index = 0;
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            // since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            y = ystart;
            attackTimer++;
            if (attackTimer &lt; 8)
            {
                image_index = 2;
            }
            if (attackTimer == 8)
            {
            }
            if (attackTimer == 15)
            {
                image_index = 3;
            }
            if (attackTimer == 25)
            {
                image_index = 4;
            }
            if (attackTimer == 35)
            {
                hasFire = 1
                image_index = 2;
            }
            if (attackTimer == 40)
            {
                image_index = 1;
            }
            if (attackTimer == 45)
            {
                image_index = 2;
            }
            if (attackTimer == 50)
            {
                image_index = 1;
            }
            if (attackTimer == 55)
            {
                hasFire = 0
                image_index = 2;
            }
            if (attackTimer == 60)
            {
                image_index = 4;
            }
            if (attackTimer == 65)
            {
                hasFire = 1
                image_index = 2;
            }
            if (attackTimer == 70)
            {
                image_index = 1;
            }
            if (attackTimer == 75)
            {
                image_index = 2;
            }
            if (attackTimer == 80)
            {
                image_index = 1;
            }
            if (attackTimer == 85)
            {
                image_index = 2;
            }
            
            if (attackTimer == 100)
            {
                image_speed = 0;
                isIntro = false;
                attackTimer = 0;
                blockCollision = blockCollisionStart;
                canFillHealthBar = true;
            }
        }
    }
    if (isFight)
    {
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = gravAccel;
        }
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {                        
            randomiser = choose(1, 1.5, 3.5);           
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        switch (phase)
        {
            case 0: // idle 
                calibrateDirection();
                image_index = 5
                
                if (attackTimer &gt;= 15)
                {
                    phase = 1;
                    attackTimer = 0;
                }
                break;
            
            case 1: // Jump in            
           
            if (attackTimer == 1)
            { 
            image_index = 1
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 10)
            {
                phase = 2;
                attackTimer = 0
                JumpNumber = choose(0,1)
                ShootTimer = choose(10,20)
            }
            break;
                
                case 2: // Jump and Attack                                
                
                if (attackTimer == 1)
                {
                  delay = 3;
                  image_index = 0    
                  if(!JumpNumber){    
                  yspeed = -5;
                  }
                  else{
                  yspeed = -6;
                  }
                  if(ShootTimer == 10){
                  ShootTimer2 = 20
                  }
                  else
                  {
                  ShootTimer2 = 30
                  }
                  // Magma Man's jump gets screwed up near the edges of the screen, so let's check that
                  if (image_xscale &lt; 0 &amp;&amp; abs(x - view_xview) &lt; 48) || (image_xscale &gt; 0 &amp;&amp; abs(x - (view_xview + view_wview)) &lt; 48)
                  {
                        image_xscale *= -1;
                  }
                  // this stuff might seem complicated but it's to aim Magma Man's jump
                  bottomScreen = view_yview + view_hview;
                  // prevent him from jumping 64 pixels if that would shove him into a wall
                  magmaJump = choose(1, 2) * 32 * image_xscale;
                  if (image_xscale &lt; 0 &amp;&amp; abs(x - view_xview) &lt; 96) || (image_xscale &gt; 0 &amp;&amp; abs(x - (view_xview + view_wview)) &lt; 96)
                  {
                    magmaJump = 32 * image_xscale;
                  }
                  magmaYAim = 0;
                  if place_meeting(x + magmaJump, y, objSolid)
                  {
                      if !place_meeting(x + magmaJump, y - 1, objSolid)
                      {
                            if magmaYAim == 0
                            {
                                print("error a")
                                magmaYAim = y;
                            }
                      }  
                      for (i = y; i &gt; bottomScreen - 224; i--)
                      {
                            if !place_meeting(x + magmaJump, i, objSolid)
                            {   
                                if magmaYAim == 0
                                {
                                    print("error b")
                                    magmaYAim = i;
                                }
                            }
                      }
                  }
                  else
                  {
                      if place_meeting(x + magmaJump, y + 1, objSolid)
                      {
                            if magmaYAim == 0
                            {
                                print("error c")
                                magmaYAim = y;
                            }
                      }  
                      for (i = y; i &lt; bottomScreen; i++)
                      {
                            if place_meeting(x + magmaJump, i, objSolid)
                            {
                                if magmaYAim == 0
                                {
                                    print("error d")
                                    magmaYAim = i - 1;
                                }
                            }       
                      }
                  }         
                  print(magmaYAim);
                  xspeed = xSpeedAim(x, y, x + magmaJump, magmaYAim, yspeed, grav);
                  blockCollision = 0;
                  ground = false;
                  if xcoll != 0
                  {
                        blockCollision = 1;
                  }
                  hasFired = true;                            
                }
                if (attackTimer == ShootTimer)
                {
                blockCollision = 1;
                image_index = 7 
                if(!hasFire){
                GoFire++
                }
                for (i = -1; i &lt;= 1; i += 1)
                  {
                    ID = instance_create(x + image_xscale * 16, spriteGetYCenter(), objMagmaBazookBoss);
                    ID.dir = 55 * i;
                    ID.image_xscale = image_xscale;
                    if(hasFire == 0){
                    ID.sprite_index = sprMagmaBazooka1
                    }
                  }
                  playSFX(sfxMagmaBazooka);                                    
                }
                if (attackTimer == ShootTimer2)
                {
                  image_index = 6                            
                }                                                                     
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 30)
                {                    
                    phase = 3;
                    attackTimer = 0
                    image_index = 0
                    xspeed = 0
                }
                break;
                
            case 3: // Jump in            
           
            if (attackTimer == 1)
            { 
              image_index = 2
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 10)
            {
                    if(GoFire == 3){
                    phase = 4;
                    GoFire = 0;
                    }
                    else{
                    phase = 0;
                    }
                    attackTimer = 0
            }
            break;
            
            case 4: // Go Fire          
           
            if (attackTimer == 1)
            { 
              image_index = 5
            }
            if (attackTimer == 15)
            {
                image_index = 3;
            }
            if (attackTimer == 25)
            {
                image_index = 4;
            }
            if (attackTimer == 35)
            {
                hasFire = 1
                image_index = 2;
            }
            if (attackTimer == 40)
            {
                image_index = 1;
            }
            if (attackTimer == 45)
            {
                image_index = 2;
            }
            if (attackTimer == 50)
            {
                image_index = 1;
            }
            if (attackTimer == 55)
            {
                hasFire = 0
                image_index = 2;
            }
            if (attackTimer == 60)
            {
                image_index = 4;
            }
            if (attackTimer == 65)
            {
                hasFire = 1
                image_index = 2;
            }
            if (attackTimer == 70)
            {
                image_index = 1;
            }
            if (attackTimer == 75)
            {
                image_index = 2;
            }
            if (attackTimer == 80)
            {
                image_index = 1;
            }
            if (attackTimer == 85)
            {
                image_index = 2;
            }
            if (attackTimer == 90)
            {
                attackTimer = 0
                phase = 0
            }
            
            case 10: // Mega Man dead         
           
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 9999)
            {
                    phase = 0;
                    attackTimer = 0
            }
            break;
        }    
    }
}
else
{ }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTornadoBlow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hasFire = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Destroy projectiles on death
with (objMagmaBazookBoss)
{
    instance_destroy();
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((iFrames mod 4) &lt; 2 || !iFrames)
{    
   if (hasFire){
        draw_sprite_ext(sprMagmaHeat,(floor((global.gameTimer * 0.20)) % 2), x + bombX[image_index] * image_xscale, y + bombY[image_index] * image_yscale,
            image_xscale, image_yscale, image_angle, image_blend, image_alpha);
   }
    
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
