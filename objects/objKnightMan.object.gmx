<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprKnightStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprKnightMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
pose = sprKnightStand
poseImgSpeed = 0.1
contactDamage = 4
ground = 0
phase = 3
timer = 0
jumpType = 0
walkX = x
startXspeed = 0
maceID = 1203
introType = 3;


manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[15];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Music
music = "Mega_Man_6.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 2);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 4);

// MaGMML2
enemyDamageValue(objHornetChaser, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 5);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 5);
enemyDamageValue(objRainFlush, 3);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 3);
enemyDamageValue(objTenguDash, 3);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 3);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if entityCanStep()
{
    if (isFight == 1)
    {
        grav = 0.185
        switch phase
        {
            case 0:
                sprite_index = sprKnightStand
                xspeed = 0
                calibrateDirection();
                timer += 1
                if (timer &gt;= 23)
                {
                    timer = 0
                    randomize()
                    phase = choose(1, 1, 1, 1, 2, 3, 3, 3)
                    if (phase == 1)
                        jumpType = choose(0, 1)
                }
                break
            case 1:
                if (timer == 0)
                {
                    calibrateDirection();
                    if (jumpType == 0)
                        yspeed = -6.5
                    else
                        yspeed = -5.8
                    if instance_exists(objMegaman)
                        startXspeed = arcCalcXspeed(yspeed, 0.175, x, y, sprite_get_xcenter_object(objMegaman), sprite_get_ycenter_object(objMegaman))
                    else
                        startXspeed = (image_xscale * 1.5)
                    if (place_meeting(x, (y + yspeed), objSolid) || place_meeting(x, (y + yspeed), objBossDoor))
                        yspeed = 0
                }
                timer += 1
                sprite_index = sprKnightJump
                if place_meeting((x + startXspeed), y, objSolid)
                {
                    startXspeed *= -1
                    image_xscale *= -1
                }
                xspeed = startXspeed
                if (ground == 1 &amp;&amp; timer &gt;= 5)
                {
                    timer = 0
                    xspeed = 0
                    phase = 0
                    playSFX(sfxKnightLand)
                }
                break
            case 2:
                if (timer == 0)
                {
                    calibrateDirection();
                    if instance_exists(objMegaman)
                        walkX = sprite_get_xcenter_object(objMegaman)
                    else
                        walkX = (x + (image_xscale * 64))
                }
                timer += 1
                sprite_index = sprKnightWalk
                image_speed = 0.2
                xspeed = (image_xscale * 1.75)
                if ((image_xscale == 1 &amp;&amp; sprite_get_xcenter() &gt;= walkX) || (image_xscale == -1 &amp;&amp; sprite_get_xcenter() &lt;= walkX) || place_meeting((x + xspeed), y, objSolid) || place_meeting((x + xspeed), y, objBossDoor))
                {
                    xspeed = 0
                    timer = 0
                    phase = 0
                }
                break
            case 3:
                xspeed = 0
                if (timer == 0)
                {
                    sprite_index = sprKnightPrepareShoot
                    image_index = 0
                }
                timer += 1
                if (sprite_index == sprKnightPrepareShoot)
                {
                    image_speed = 0.2
                    if (image_index &gt;= (image_number - (image_speed * 2)))
                    {
                        sprite_index = sprKnightShoot
                        image_speed = 0
                        image_index = 0
                        var ID = instance_create((x + (image_xscale * ((-sprite_get_xoffset(sprite_index)) + 31))), ((y - sprite_get_yoffset(sprite_index)) + 22), objKnightProjectile);
                        ID.dir = image_xscale
                        maceID = ID
                        ID.parentID = id
                        if instance_exists(objMegaman)
                            ID.destX = sprite_get_xcenter_object(objMegaman)
                        else
                            ID.destX = (x + (image_xscale * 64))
                        if instance_exists(objMegaman)
                        {
                            var useAngle = point_direction((x + (image_xscale * ((-sprite_get_xoffset(sprite_index)) + 31))), ((y - sprite_get_yoffset(sprite_index)) + 22), sprite_get_xcenter_object(objMegaman), sprite_get_ycenter_object(objMegaman))
                            if (((useAngle &gt; 75 || useAngle &lt; 18) &amp;&amp; image_xscale == 1) || ((useAngle &lt; 105 || useAngle &gt; 162) &amp;&amp; image_xscale == -1))
                            {
                                if (image_xscale == 1)
                                    useAngle = 0
                                else
                                    useAngle = 180
                            }
                        }
                        else if (image_xscale == 1)
                            useAngle = 0
                        else
                            useAngle = 180
                        ID.angle = useAngle
                    }
                }
                else if (sprite_index == sprKnightShoot)
                {
                    if (image_index &lt; 1)
                        image_speed = 0.25
                    else
                        image_speed = 0
                }
                if ((place_meeting(x, y, maceID) || timer &gt;= 300) &amp;&amp; sprite_index == sprKnightShoot &amp;&amp; image_index &gt;= 1)
                {
                    var proceed = 1
                    var knightProjectile = instance_place(x, y, maceID)
                    if (knightProjectile &gt;= objSolid)
                    {
                        if (knightProjectile.phase == 0)
                            proceed = 0
                    }
                    if (proceed == 1)
                    {
                        with (maceID)
                            instance_destroy()
                        timer = 0
                        phase = 4
                    }
                }
                break
            case 4:
                xspeed = 0
                sprite_index = sprKnightPrepareShoot
                image_speed = 0.2
                if (timer == 0)
                    image_index = 0
                timer += 1
                if (image_index &gt;= (image_number - (image_speed * 2)))
                {
                    sprite_index = sprKnightStand
                    image_index = 0
                    image_speed = 0
                    timer = 0
                    phase = 0
                }
                break
        }
    }
}
else
    image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(sprite_index == sprKnightStand)
if (!(collision_rectangle(x - 16 * image_xscale, y - 16 * image_yscale, x + 7 * image_xscale, y + 17 * image_yscale, other.id, false, false)))
{
    other.guardCancel = 3;
}

if(sprite_index == sprKnightWalk)
if (!(collision_rectangle(x - 14 * image_xscale, y - 17 * image_yscale, x + 9 * image_xscale, y + 14 * image_yscale, other.id, false, false)))
{
    other.guardCancel = 1;
}


if(sprite_index == sprKnightPrepareShoot)
if (!(collision_rectangle(x - 30 * image_xscale, y - 19 * image_yscale, x + 2 * image_xscale, y + 17 * image_yscale, other.id, false, false)))
{
    other.guardCancel = 3;
}

if(sprite_index == sprKnightJump)
if (!(collision_rectangle(x - 22 * image_xscale, y - 18 * image_yscale, x + 4 * image_xscale, y + 17 * image_yscale, other.id, false, false)))
{
    other.guardCancel = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objKnightProjectile)
    instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
