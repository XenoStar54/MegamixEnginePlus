<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHyperStormH</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 28 * 2; // WAIT THAT'S ILLEGAL
healthpoints = healthpointsStart;
contactDamage = 8;
customPose = true;

// Health Bar
manualColors = true;
healthBarPrimaryColor[1] = global.nesPalette[34]; // yellow
healthBarSecondaryColor[1] = global.nesPalette[40]; // white
healthBarPrimaryColor[2] = global.nesPalette[1]; // dark blue / purple
healthBarSecondaryColor[2] = global.nesPalette[40]; // white

// Music
music = "WilyTowerBossTheme.vgm";
musicType = "VGM";
musicTrackNumber = 0;
musicVolume = 1;
musicLoopSecondsStart = 0;
musicLoopSecondsEnd = 0;

// creation code
//@cc
vacuumTime = 350;
//@cc
shootCount = 7;
//@cc
shootWait = 50;
//@cc
bulletContactDamage = 1;
//@cc
moveDistance = 160;
//@cc
jumpNumber = 5;
//@cc
jumpSpeed = -6;
//@cc
metSpawnRangeLeft = (x div view_wview[0]) * view_wview[0] + 48;
//@cc
metSpawnRangeRight = (x div view_wview[0]) * view_wview[0] + view_wview[0] - 48;

// enemy variables
phase = 0;
timer = 0;
counter = 0;

jumpSpd = -5;
blowSpd = 1.5;
shootXOffset = 18;
shootYOffset = 10;
dustAngleStep = 14;
distanceJumped = 0;
jumpStartX = x;
jumpXSpeed = 0;
pushPlayer = false;

startXScale = 0;

imgIndex = 0;
shakeDir = 0;
shakeTimer = 0;
image_speed = 0;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 2);

// mm1
enemyDamageValue(objRollingCutter, 1);
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objHyperBomb, 6);
enemyDamageValue(objFireStorm, 3);
enemyDamageValue(objThunderBeam, 1);

// mm2
enemyDamageValue(objAirShooter, 1);
enemyDamageValue(objAtomicFire, 1);
enemyDamageValue(objBubbleLead, 1);
enemyDamageValue(objCrashBomber, 1);
enemyDamageValue(objLeafShield, 1);
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objQuickBoomerang, 1);
stopOnFlash = false;

// mm3
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objShadowBlade, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objTopSpin, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (startIntro)
    {
        imgIndex = 2;
        visible = true;
        calibrateDirection();
        startXScale = image_xscale;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        grav = 0;
        y -= view_hview[0];
    }
    else if (isIntro)
    {
        switch (phase)
        {
            // falling into the screen
            case 0:
                imgIndex = 2;
                y += 4;
                if (y &gt;= ystart)
                {
                    y = ystart;
                    playSFX(sfxGutsQuake);
                    screenShake(25, 0, 2);
                    imgIndex = 0;
                    phase++;
                }
                
                break;
            
            // initial wait
            case 1:
                timer++;
                if (timer &gt;= 50)
                {
                    timer = 1;
                    blockCollision = blockCollisionStart
                    grav = gravStart;
                    phase++;
                }
                
                imgIndex = 0;
                
                break;
            
            // jumping
            case 2:
                if (y &gt;= ystart)
                {
                    if (timer == 0)
                    {
                        playSFX(sfxGutsQuake);
                        screenShake(25, 0, 2);
                    }
                    
                    yspeed = 0;
                    y = ystart;
                    
                    imgIndex = 1;
                    
                    timer++;
                    if (timer &gt;= 10)
                    {
                        timer = 0;
                        counter++;
                        
                        if (counter &lt;= 3)
                        {
                            yspeed = -4 + -2 * (counter == 3)
                            imgIndex = 2;
                        }
                        else
                        {
                            imgIndex = 0;
                            counter = 0;
                            phase = -1;
                            isIntro = false;
                            canFillHealthBar = true;
                        }
                    }
                }
                else
                {
                    imgIndex = 2;
                }
                
                break;
        }
    }
    
    if (isFight)
    {
        switch (phase)
        {
            // small delay before starting the fight
            case -1:
                timer++;
                if (timer &gt;= 50)
                {
                    timer = 0;
                    phase++;
                }
                
                break;
            
            // suck. suck. SUCK. SUCK. SUCCC
            case 0:
                timer++;
                if (timer &gt;= vacuumTime)
                {
                    pushPlayer = false;
                    timer = 0;
                    phase++;
                }
                else
                {
                    pushPlayer = true;
                }
                
                // vacuum / blow effect and animation is below switch statement
                
                break;
            
            // short pause
            case 1:
            // long pause
            case 3:
                timer++;
                if (timer &gt;= 60 + 20 * (phase == 3))
                {
                    timer = 0;
                    phase++;
                }
                
                imgIndex = 0;
                
                break;
                
            // and YOU'RE full of HOT AIR
            case 2:
                pushPlayer = true;
                
                // shoot projectiles / end
                timer++;
                if (timer &gt;= shootWait)
                {
                    timer = 0;
                    counter++;
                    if (counter &lt;= shootCount)
                    {
                        // shoot
                        var i = instance_create(x + shootXOffset * image_xscale,
                            y + shootYOffset, objEnemyBullet);
                        i.contactDamage = bulletContactDamage;
                        with (i)
                        {
                            target = other.target;
                            aimAtTarget(4);
                        }
                        
                        playSFX(sfxEnemyShootClassic);
                    }
                    else
                    {
                        // end
                        pushPlayer = false;
                        counter = 0;
                        phase++;
                    }
                }
                
                // vacuum / blow effect and animation is below switch statement
                
                break;
            
            // step on me daddy
            case 4:
                if (counter == 0 &amp;&amp; timer == 0)
                {
                    timer = 6;
                    jumpStartX = x;
                }
                
                if (ground)
                {
                    // landing
                    if (timer == 0 &amp;&amp; ycoll != 0)
                    {
                        timer = 75;
                        xspeed = 0;
                        jumpXSpeed = 0;
                        
                        // spawn mets
                        if (!instance_exists(objHyperStormHMet))
                        {
                            var i = instance_create(irandom_range(metSpawnRangeLeft, metSpawnRangeRight),
                                view_yview[0] - 8, objHyperStormHMet);
                            i.image_xscale = choose(-1, 1);
                            
                            // make sure at least one doesn't spawn on top of the boss and get immediately destroyed
                            if (metSpawnRangeRight - metSpawnRangeLeft &gt;= 64)
                            {
                                while (abs(i.x - x) &lt; 64)
                                {
                                    i.x = irandom_range(metSpawnRangeLeft, metSpawnRangeRight);
                                }
                            }
                            
                            var j = instance_create(irandom_range(metSpawnRangeLeft, metSpawnRangeRight),
                                view_yview[0] - 8, objHyperStormHMet);
                            j.image_xscale = choose(-1, 1);
                            
                            // don't spawn next to each other
                            if (metSpawnRangeRight - metSpawnRangeLeft &gt;= 64)
                            {
                                while (abs(j.x - i.x) &lt;= 32)
                                {
                                    j.x = irandom_range(metSpawnRangeLeft, metSpawnRangeRight);
                                }
                            }
                        }
                    }
                    
                    timer--;
                    if (timer &gt;= 50)
                    {
                        // screen shake
                        imgIndex = 1;
                    }
                    else
                    {
                        imgIndex = 0;
                        
                        // keep jumping if we're not yet aligned with the ending position
                        var alignJump = false;
                        if (counter == jumpNumber)
                        {
                            if (x &lt; jumpStartX + moveDistance * image_xscale - 2
                                    || x &gt; jumpStartX + moveDistance * image_xscale + 2)
                            {
                                alignJump = true;
                            }
                            else
                            {
                                // we're aligned; no more aligning jumps
                                counter++;
                            }
                        }
                               
                        if (counter &lt; jumpNumber || alignJump)
                        {
                            if (timer &lt;= 0)
                            {
                                // jump
                                yspeed = jumpSpeed;
                                
                                if (distanceJumped * image_xscale &lt; moveDistance) // don't increase if we're trying to align with the end position
                                {
                                    distanceJumped += (moveDistance / jumpNumber) * image_xscale;
                                    counter++;
                                }
                                
                                jumpXSpeed = xSpeedAim(x, y, jumpStartX + distanceJumped, y, yspeed, grav);
                                xspeed = jumpXSpeed;
                                imgIndex = 2;
                            }
                            else if (timer &lt;= 10)
                            {
                                // ready jump
                                imgIndex = 1;
                            }
                        }
                        else if (timer &lt;= 0)
                        {
                            // end of jumping. Turn around and then continue
                            if (timer == 0)
                            {
                                image_xscale = -image_xscale;
                            }
                            else if (timer &lt;= -30)
                            {
                                xspeed = 0;
                                yspeed = 0;
                                counter = 0;
                                phase = 0;
                                timer = 0;
                                distanceJumped = 0;
                                jumpStartX = x;
                            }
                        }
                    }
                }
                else
                {
                    timer = 0;
                    xspeed = jumpXSpeed;
                }
                   
                break;
        }
        
        if (pushPlayer)
        {
            // animation
            imgIndex = 1;
            if (shakeDir == 0)
            {
                shakeDir = 1;
            }
            else
            {
                shakeTimer++;
                if (shakeTimer &gt;= 3)
                {
                    shakeDir = !shakeDir;
                    shakeTimer = 0;
                }
            }
            
            // spawn dust
            while (instance_number(objHyperStormHDust) &lt; 6)
            {
                var a = instance_create(x + shootXOffset * image_xscale, y + shootYOffset, objHyperStormHDust);
                a.dist = a.maxDist;
                if (phase == 2)
                {
                    a.dist = 0;
                    a.dir = -a.dir;
                }
                
                // find an angle that isn't taken
                a.angle = -(dustAngleStep / 2) - dustAngleStep * 2 + (image_xscale &lt; 0) * 180;
                for (var i = 0; i &lt; instance_number(objHyperStormHDust); i++)
                {
                    var dust = instance_find(objHyperStormHDust, i);
                    if (a != dust &amp;&amp; a.angle == dust.angle)
                    {
                        a.angle += dustAngleStep;
                        i = 0; // recheck everything again
                    }
                }
            }
                
            // push player
            with (objMegaman)
            {
                if ((x &lt;= other.x &amp;&amp; other.image_xscale == -1)
                        || (x &gt;= other.x &amp;&amp; other.image_xscale == 1))
                {
                    var d = -other.image_xscale;
                    if (other.phase == 2)
                    {
                        d = -d;
                    }
                    
                    playerBlow(other.blowSpd * d);
                }
            }
        }
        else
        {
            shakeDir = 0;
        }
    
        // land effects
        if (ycoll &gt; 0)
        {
            playSFX(sfxGutsQuake);
            screenShake(25, 0, 2);
        }
    }
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (spawned)
{
    phase = 0;
    timer = 0;
    counter = 0;
    imgIndex = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with (objHyperStormHDust)
{
    instance_destroy();
}

with (objEnemyBullet)
{
    instance_destroy();
}

with (objHyperStormHMet)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var preX = x;
x += shakeDir;

event_inherited();

x = preX;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
