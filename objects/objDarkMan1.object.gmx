<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDarkMan1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskDarkMan1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprDarkMan1;
poseImgSpeed = 0;
contactDamage = 5;

customPose = 1;
introType = 0;
myGrav = grav;

ground = false;
attackTimer = 20;
phase = 0;
canJump = false;
delay = 0;
timesWalked = 0;

shotDelay = 360;
canSpeedUp = 1; //Set to 0 if you don't want Dark Man 1 to speed up after losing health points

// Health Bar
healthBarPrimaryColor[1] = 23;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 4);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 4);
enemyDamageValue(objHardKnuckle, 2);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objWaterWave, 4);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 4);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 1);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 4);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objIceWall, 2);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        y = view_yview + (view_hview*(image_yscale &lt; 0)) - 64*image_yscale;
        calibrateDirection();
        phase = 0;
        timer = 0;
        hasTriggeredFall = false;
        canFillHealthBar = false;
        image_index = 0;
        visible = true;
        startIntro = false;
        isIntro = true;
        grav = myGrav;
    }
    else if(isIntro)
    {
        if(y != ystart &amp;&amp; !hasTriggeredFall)
        {
            if(abs(y - ystart) &lt; abs(yspeed))
            {
                y = ystart;
                grav = 0;
                yspeed = 0;
                hasTriggeredFall = true;
            }
            image_index = 0;
        }
        else
        {
            if(!hasTriggeredFall) hasTriggeredFall = true;
            timer = 0;
            phase = 0;
            canFillHealthBar = true;
            isIntro = false;
            grav = myGrav;
            blockCollision = blockCollisionStart;
            setTargetStep();
        }
    }
    if (isFight == true)
    {
        if (delay &gt; 0)
            delay -= 1;
        if (shotDelay &gt; 0)
            shotDelay -= 1;
        switch (phase)
        {
            case 0: // Idle
                attackTimer++;
                if(instance_exists(objSkullManBullet))
                {
                    xspeed = 0;
                    image_index = 2;
                }
                else
                {
                    image_index = 0;
                }
                sprite_index = sprDarkMan1;
                if(attackTimer == 50)
                {
                    phase = 1;
                    delay = 5;
                    attackTimer = 0;
                }
                break;
            case 1: // Walking or shooting
            if (instance_exists(target))
            {
                if(instance_exists(objSkullManBullet))
                {
                    xspeed = 0;
                    image_index = 2;
                }
                
                attackTimer++;
                if (abs(target.x - x) &lt; 5 &amp;&amp; yspeed = 0)
                {
                    attackTimer = 0;
                    xspeed = 0;
                    phase = 0;
                } 
                else
                {
                    if (xcoll != 0)
                    {
                        image_xscale *= -1;
                    }
                    if (ground == true &amp;&amp; delay &lt;= 1)
                    {
                        calibrateDirection();
                        if(checkSolid(0,0))
                        {
                            x += 14 * image_xscale;
                        }
                        
                        if(shotDelay &lt;= 0 &amp;&amp; attackTimer == 40)
                        {
                            calibrateDirection();
                            if(checkSolid(0,0))
                            {
                                x += 14 * image_xscale;
                            }
                            a = instance_create(x + 16 * image_xscale, y - 2 * image_yscale, objSkullManBullet);
                            a.sprite_index = sprDarkMan3Bullet;
                            image_index = 2;
                            shotDelay = 360;
                        }
                        
                        if(!instance_exists(objSkullManBullet))
                        {
                            if(attackTimer % 8 == 0)
                            {
                                image_index = 1;
                            }
                            else if(attackTimer % 4 == 0)
                            {
                                image_index = 0;
                            }
                        }
                        else
                        {
                            xspeed = 0;
                            image_index = 2;
                        }
                        
                        if(healthpoints &lt; (healthpointsStart / 3) &amp;&amp; canSpeedUp = 1 &amp;&amp; !instance_exists(objSkullManBullet))
                        {
                            xspeed = 2.5 * image_xscale;
                        } 
                        else if(healthpoints &gt; ((2*healthpointsStart) / 3) &amp;&amp; canSpeedUp = 1 &amp;&amp; !instance_exists(objSkullManBullet)) 
                        {
                            xspeed = 1 * image_xscale;
                        } 
                        else if(!instance_exists(objSkullManBullet))
                        {
                            xspeed = 1.75 * image_xscale;
                        }
                        else
                        {
                            xspeed = 0 * image_xscale;
                        }
                    }
                }
            } 
            else
            {
                xspeed = 0;
                sprite_index = sprDarkMan1;
            }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with(objSkullManBullet)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Dark Man 1 fires exactly when he gets hit, unless a bullet already exists
if(!instance_exists(objSkullManBullet))
{
    calibrateDirection();
    if(checkSolid(0,0))
    {
        x += 14 * image_xscale;
    }
    a = instance_create(x + 16 * image_xscale, y - 2 * image_yscale, objSkullManBullet);
    a.sprite_index = sprDarkMan3Bullet;
    image_index = 2;
    shotDelay = 360;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
