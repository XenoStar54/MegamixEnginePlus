<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDiveMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
rememberMegaX = 0;

pose = sprDiveManPose;
poseImgSpeed = 8 / 60;
contactDamage = 4;

detectDistance = 72;

spriteMain = sprDiveMan;
spriteSpin = sprDiveManSpin;
maskMain = mskDiveMan;
maskSpin = mskDiveManSpin;
maskIntermediate = mskDiveManIntermediate;

ground = false;
timer = 0;
missilesLeft = 0;
phase = 0;

spd = 4;
myGrav = grav;

// Health Bar
healthBarPrimaryColor[1] = 25;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_4.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objThunderBeam, 4);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objHardKnuckle, 0);
enemyDamageValue(objTopSpin, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 4);
enemyDamageValue(objShadowBlade, 0);

// MM4
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objPharaohShot, 1);

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 4);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 0);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 0);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 4);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objSaltWater, 0);

// MM&amp;B
enemyDamageValue(objTenguBlade, 0);
enemyDamageValue(objTenguDash, 0);
enemyDamageValue(objTenguDisk, 0);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 2);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 0);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(isIntro)
    {
        phase = 0;
        timer = 0;
        missilesLeft = 0;
    }
    else if (isFight == true)
    {
        if(phase == 0) // determine if you should shoot missiles or not
        {
            image_index = 0;
            calibrateDirection();
            if(instance_exists(target))
            {
                if(abs(target.x - x) &lt; detectDistance || instance_exists(prtPlayerProjectile) || !missilesLeft)
                {
                    rememberMegaX = target.x;
                    phase = 2;
                }
                else
                {
                    phase = 1;
                }
            }
        }
        else if(phase == 1) // shoot missile
        {
            calibrateDirection();
            timer++;
            if(timer &lt; 11)
            {
                image_index = 1;
            }
            else if(timer &lt; 35)
            {
                image_index = 2;
                if(timer == 22)
                {
                    var missile = instance_create(x+image_xscale*8,y,objDiveManMissile);
                    missile.dir = 90-90*image_xscale;
                }
            }
            else if(timer &lt; 65)
            {
                image_index = 0;
            }
            else
            {
                missilesLeft--;
                timer = 0;
                phase = 0;
            }
        }
        else if(phase == 2) // begin spin
        {
            calibrateDirection();
            timer++;
            if(timer &lt; 10)
            {
                image_index = 1;
            }
            else if(timer &lt; 26)
            {
                image_index = 3;
            }
            else if(timer &lt; 32)
            {
                image_index = 4;
                grav = 0;
                yspeed = 0;
            }
            else
            {
                image_index = 4;
                phase = 3;
                timer = 0;
            }
        }
        else if(phase == 3) // actually spin
        {
            if(sprite_index != spriteSpin)
            {
                sprite_index = spriteSpin;
                image_index = 0;
                image_speed = 0.25;
                mask_index = maskIntermediate;
                timer = 0;
            }
            xspeed = spd*image_xscale;
            missilesLeft = 3;
            
            if(sign(xcoll) == sign(xspeed)) // sup wall
            {
                image_speed = 0;
                sprite_index = spriteMain;
                mask_index = maskIntermediate;
                image_index = 4;
                phase = 4;
                timer = 0;
                xspeed = 0;
            }
            else if(instance_exists(target))
            {
                if (abs(y - target.y) &lt; 32 &amp;&amp; abs(x - target.x) &lt; 12) || abs(x - rememberMegaX) &lt; 2
                {
                    image_speed = 0;
                    sprite_index = spriteMain;
                    mask_index = maskIntermediate;
                    image_index = 4;
                    phase = 4;
                    timer = 0;
                    xspeed = 0;
                }
            }
        }
        else if(phase == 4) // recover from spin
        {
            timer++;
            if(timer &lt; 6)
            {
                image_index = 4;
            }
            else if(timer == 6)
            {
                calibrateDirection();
                image_index = 0;
                grav = myGrav;
            }
            else if(timer &lt; 36)
            {
                image_index = 0;
            }
            else
            {
                timer = 0;
                phase = 0;
            }
        }
        
        // handle mask
        if(sprite_index == spriteMain)
        {
            if(mask_index == maskIntermediate)
            {
                mask_index = maskMain;
                if(checkSolid(0,0)) mask_index = maskIntermediate;
            }
            else if(mask_index == maskSpin)
            {
                mask_index = maskIntermediate;
            }
        }
        else if(sprite_index == spriteSpin)
        {
            if(mask_index == maskIntermediate)
            {
                mask_index = maskSpin;
                if(checkSolid(0,0)) mask_index = maskIntermediate;
            }
            else if(mask_index == maskMain)
            {
                mask_index = maskIntermediate;
            }
        }
        else
        {
            sprite_index = spriteMain;
            image_index = 0;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objDiveManMissile) instance_destroy();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
