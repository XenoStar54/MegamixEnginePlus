<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRush</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canhit = -1;

canCoil = true;
teleportTimer = 0;
teleportY = 0;
teleportingUp = false;
yspeed = 0;
xspeed = 0;
inWater = 0;

canHit = false;
canDamage = false;
contactDamage = 0;

shouldLand = true;

alarm[0] = 4 * 60;

canDeflect = false;

isBoosting = false;

travelIncrementX = .0625;
travelIncrementY = .0625;

xVel = 0;
yVel = 0;

TB_MAXSPEED = 1.5;


frameSet[0] = 0;
frameSet[1] = 1;
frameSet[2] = 0;
frameSet[3] = 1;
frameSet[4] = 0;
frameSet[5] = 1;
frameSet[6] = 0;
frameSet[7] = 2;
frameSet[8] = 2;
frameSet[9] = 2;
frameSet[10] = 2;
frameSet[11] = 2;
frameSet[12] = 2;
frameSet[13] = 2;
frameSet[14] = 0;
frameSet[15] = 1;
frameSet[16] = 0;
frameSet[17] = 1;
frameSet[18] = 0;
frameSet[19] = 1;
frameSet[20] = 0;
frameSet[21] = 1;
frameSet[22] = 0;
frameSet[23] = 1;
frameSet[24] = 0;
frameSet[25] = 2;
frameSet[26] = 2;
frameSet[27] = 2;
frameSet[28] = 2;
frameSet[29] = 2;
frameSet[30] = 2;
frameSet[31] = 2;

imgIndex = 0;

hoverFrame = 0;
hoverInterval[0] = -.5;
hoverInterval[1] = -.5;
hoverInterval[2] = -.5;
hoverInterval[3] = -.5;
hoverInterval[4] = -.5;
hoverInterval[5] = -.5;
hoverInterval[6] = 0;
hoverInterval[7] = 0;
hoverInterval[8] = 0;
hoverInterval[9] = 0;
hoverInterval[10] = .5;
hoverInterval[11] = .5;
hoverInterval[12] = .5;
hoverInterval[13] = .5;
hoverInterval[14] = .5;
hoverInterval[15] = .5;
consumeFrame = 0;
consumeTime = 30;

t_Boosting = false;

playerLock = -1;//lockPoolNew();

grav = .25;

blockCollision = true;

animTimer = 0;

despawnRange = -1;
respawnRange = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isBoosting)
{
    lockPoolRelease(playerLock);//lock = lockPoolLock(PL_LOCK_GROUND)
    //lock.targetInstance = target;
    /*with (objMegaman)
    {
        other.playerLock = lockPoolRelease(other.playerLock);//canMove = true;
        //canGravity = true;
    }*/
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Teleport away
i = instance_create(x, y, objRushTeleport);
i.upordown = 'up';
i.parent = parent;
i.type = 'boost';
canCoil = false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// Update sprites of rider if they're on it
if (isBoosting)
{
    with (parent)
    {
        playerHandleSprites("Boost");
//        vehicle = other.id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    
    if (sprite_index == sprRush || sprite_index == sprRushCoil)
    {
        //checkGround();//checkGroundGravity();
        //gravityCheckGroundExt(grav * image_yscale);
        //generalCollision();
    }
    else
    {
        yspeed = 0;
    }
    
    if (!isBoosting)
    {
        if (image_yscale == 1)
        {
            meg = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_top,
                    parent, false, false);
        }
        else
        {
            meg = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom,
                    parent, false, false);
        }
        
        if (instance_exists(meg) &amp;&amp; global.ammo[playerID, global.weapon[playerID]] != 0)
        {
            /*if (meg.yspeed &gt; 0 &amp;&amp; meg.bbox_bottom &lt;= bbox_top + meg.yspeed
                    &amp;&amp; !meg.climbing)*/
            {
                event_user(1);
            }
        }
    }
    else if (alarm[1] &lt; 0)
    {
        if (global.keyLeft[playerID])
        {
                if (xVel &gt; 0)
                {
                    xVel = 0;
                }
                else
                {
                    xVel -= travelIncrementX;
                }
        }
        else if (global.keyRight[playerID])
        {
            if (xVel &lt; 0)
            {
                xVel = 0;
            }
            else
            {
                xVel += travelIncrementX;
            }
        }
        else
        {
                xVel += sign(xVel)*-travelIncrementX;
        }
        if (global.keyUp[playerID])
        {
            if (yVel &gt; 0)
            {
                yVel = 0;
            }
            else
            {
                yVel -= travelIncrementY*2;
                hoverFrame = 9;
            }
        }
        else if (global.keyDown[playerID])
        {
            if (yVel &lt; 0)
            {
                yVel = 0;
            }
            else
            {
                yVel += travelIncrementY*2;
                hoverFrame = -1;
            }
        }
        else
        {
                yVel += sign(yVel)*-travelIncrementY;
        }
        if (xVel &gt; 0)
        {
            xVel = min(xVel,TB_MAXSPEED);
        }
        else if (xVel &lt; 0)
        {
            xVel = max(xVel,-TB_MAXSPEED);
        }
        if (yVel &gt; 0)
        {
            yVel = min(yVel,TB_MAXSPEED);
        }
        else if (yVel &lt; 0)
        {
            yVel = max(yVel,-TB_MAXSPEED);
        }
        
        with (parent)
        {
//            shiftObject(0,other.yVel,true,id,0);
            //playLandSound = false;
            
            
            
            
            //grav = 0;
            /*if (ground)
            {
                other.hoverFrame = 0;
            }*/
            
            var vs = other.yVel;
            
            var escapeVelocity = 1;
            /*if (checkSolid(0,other.hoverInterval[floor(other.hoverFrame)]+1,false,true))
            {
                if (other.hoverFrame &gt;= 10)
                {
                    printErr("SOL");
                    escapeVelocity = 0;
                }
                else if (other.hoverFrame &lt; 6)
                {
                    printErr("DOL");
                    //vs = 0;
                    escapeVelocity = 4;//shiftObject(0,-1,true);//other.hoverFrame = 0;
                    other.hoverFrame = 5;
                }
                //yVel = 0;
                //yspeed = 0;
            }*/
            /*if (ground)
            {
                vs = min(floor(other.TB_MAXSPEED),vs);
            }*/
            if (ground)
            {
                if (vs &gt; 0)
                {
                    other.hoverFrame = -1;
                    vs = 0;
                    other.yVel = 0;
                }
                else
                {
                    other.hoverFrame = 0;
                }
            }
            xspeed = other.xVel;
            var hs = 0
            if (other.hoverFrame &gt;= 0)
            {
                hs = other.hoverInterval[floor(other.hoverFrame)];
            }
            yspeed = vs+hs;
            //printErr(vs);
            /*if (yspeed == 0)
            {
                shiftObject(0,other.hoverInterval[floor(other.hoverFrame)]*escapeVelocity,true);
            }
            printErr(other.hoverInterval[floor(other.hoverFrame)]*escapeVelocity);
            */
            if (sign(other.xVel) != 0 &amp;&amp; sign(other.xVel) != sign(image_xscale))
            {
                image_xscale *= -1;
            }
            //checkGround();
            
        }
        
        
        consumeFrame = (consumeFrame+1)&amp;(consumeTime)+1;
        if (consumeFrame == consumeTime &amp;&amp; instance_exists(parent) &amp;&amp; global.playerHealth[parent.playerID] &gt; 0)
        {
            global.ammo[playerID, global.weapon[playerID]] = max(0,
            global.ammo[playerID, global.weapon[playerID]] - 1);
            if (global.ammo[playerID, global.weapon[playerID]] &lt;= 0)
            {
                
                if (parent)
                {
                    x = parent.x;
                    y = parent.y;
                    event_perform(ev_alarm,0);//alarm[0] = 0;
                    instance_destroy();
                }
                isBoosting = false;
            }
        }
        if (yVel == 0)
        {
            hoverFrame = (hoverFrame+.5)%16;
        }
        
    }
    else
    {
        with (parent)
        {
            xspeed = 0;
            yspeed = 0;
            //shiftObject(0,other.hoverInterval[floor(other.hoverFrame)],true,id,0);
            
        }
        //hoverFrame = (hoverFrame+.5)%15;
    }
    
    
    /*if (!ground &amp;&amp; !isBoosting)
    {
        //printErr("TRIGGER");
        event_perform(ev_alarm, 0);
        exit;
    }*/
    y += yspeed;
    imgIndex = (imgIndex+.333) % 32;
    if (alarm[1] &lt; 0)
    {
        animTimer = (animTimer+.25)%2;
    }
    else
    {
        animTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead &amp;&amp; !isBoosting)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _canSpawn = !instance_exists(myTrebleBoost);
with (objTrebleBoost)
{
    if (playerID == other.playerID)
    {
        _canSpawn = false;
    }
}

with (objRushTeleport)
{
    if (playerID == other.playerID)
    {
        _canSpawn = false;
    }
}

_canSpawn = _canSpawn &amp;&amp; global.ammo[playerID, global.weapon[playerID]] &gt; 0;

if (_canSpawn)
{
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
    {
        i = fireWeapon(26, 0, objRushTeleport, 1, 0, 0, 0);
        if (i)
        {
            with (i)
            {
                type = 'boost';
                y = view_yview + (view_hview * (image_yscale == -1));
            }
            
            //_canSpawn = false;
        }
    }
}

if (!_canSpawn &amp;&amp; instance_exists(myTrebleBoost))
{
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
    {
        // treble boost shots
        var directions = makeArray(0,45,-45);
        var tempPlayer = global.characterSelected[playerID];
        global.characterSelected[playerID] = "Bass"; // use bass' shots
        
        var myCount = 0;
        with (objBusterShot) // Check only this player's bullets.
        {
            if (parent == other.id)
            {
                myCount++;
            }
        }
        
        if (myCount == 0)
        {
            for (var a = 0; a &lt; 3; a++)
            {
                i = fireWeapon(20, 0, objBusterShot, 100, 0, 1, 0);
                if (i)
                {
                    i.isBoost = true;
                    i.penetrate = 1;
                    i.contactDamage = 1;
                    i.sprite_index = sprBassBullet;
                    i.dir = directions[a];
                    if (image_xscale &lt; 0)
                    {
                        i.dir += 180;
                    }
                    
                    with (i)
                    {
                        xspeed = cos(degtorad(dir)) * 5;
                        yspeed = -sin(degtorad(dir)) * 5 * sign(image_yscale);//Run this once to set the x and y speed.
                    }
                    
                    playSFX(sfxBuster);
                }
            }
        }
        
        // end character shenanigans
        global.characterSelected[playerID] = tempPlayer;
    }
}

// normal firing
scrBusterControl(false, true, !instance_exists(myTrebleBoost) &amp;&amp; !_canSpawn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("TREBLE BOOST", -2, -2, sprWeaponIconsTrebleBoost);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0;
meg = parent;
///Setting up treble boost (need outside for calling from teleport)
meg.jumpCount = 2;
//meg.yspeed = -7.5;
meg.canMinJump = false;
meg.myTrebleBoost = id;
visible = false;//sprite_index = sprRushCoil;
canCoil = false;
isBoosting = true;
/*meg.canMove = false;
meg.canGravity = false;*/
meg.isSlide = false;
meg.dashJumped = false;//bassDash = false;
meg.ground = false;
playerLock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_GRAVITY,PL_LOCK_AERIAL, PL_LOCK_SLIDE, PL_LOCK_CLIMB);
playerLock.targetInstance = meg;
//meg.playLandSound = false;
// playSFX(sfxSpring);
alarm[0] = -1;
alarm[1] = 12;
xspeed = 0;
yspeed = 0;
playSFX(sfxTrebleBoost);

        //room_speed = 15; Sprite testing.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var yDiff = 0;
if (sprite_index == sprRush)
{
    ximg = 15+frameSet[imgIndex];// + image_index;
    if (frameSet[imgIndex] == 2)
    {
        yDiff = 1;
    }
    drawPlayer(playerID, costumeID, ximg, 8+yDiff, x, y - 16 * image_yscale, image_xscale, image_yscale);
}


/*SquareSize = 48;
spr = global.playerSprite[playerID];
col[0] = c_white;
col[1] = global.primaryCol[playerID];
col[2] = global.secondaryCol[playerID];
col[3] = global.outlineCol[playerID];

for (i = 0; i &lt; 4; i += 1)
{
    draw_sprite_part_ext(spr, i, 1 + (floor(ximg) * (SquareSize + 3)),
            1 + (floor(8) * (SquareSize + 3)), SquareSize, SquareSize,
            round(x) - (22 * image_xscale), round(y) - ((36) * image_yscale),
            image_xscale, image_yscale, col[i], image_alpha);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
