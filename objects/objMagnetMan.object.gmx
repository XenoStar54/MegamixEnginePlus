<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagnetJump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprMagnetMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
pose = sprMagnetPose;
poseImgSpeed = 0.0833333333333333;
contactDamage = 6;
ground = 0;
phase = 0;
timer = 0;
nextPhase = 1;
startXScale = -1;
moveSpd = 2;
firstJumpDistance = 64;
magnetID1 = 1203;
magnetID2 = 1203;
magnetID3 = 1203;

strength = 0.7;

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_3.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 2);
enemyDamageValue(objBusterShotCharged, 4);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objThunderBeam, 4);

// MM2
enemyDamageValue(objMetalBlade, 4);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 4);
enemyDamageValue(objGeminiLaser, 0);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 4);
enemyDamageValue(objShadowBlade, 4);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 2);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 2);

// MM8
enemyDamageValue(objHomingSniper, 2);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 0);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 2);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 2);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if entityCanStep()
{
    if (isFight == 1)
    {
        grav = 0.35
        if (phase == 6)
            grav = 0
        switch phase
        {
            case 0:
                xspeed = 0
                sprite_index = sprMagnetStand
                timer += 1
                if (timer &gt;= 3)
                {
                    timer = 0
                    phase = nextPhase
                    image_xscale = jumpImgXscale
                }
                break
            case 1:
                sprite_index = sprMagnetJump
                if (timer == 0)
                {
                    yspeed = -5.5
                    moveSpd = arcCalcXspeed(yspeed, grav, x, y, (x + (image_xscale * firstJumpDistance)), y)
                    if (place_meeting(x, (y + yspeed), objSolid))
                        yspeed = 0
                }
                else if (ground == 1)
                {
                    timer = 0
                    phase = 0
                    nextPhase = 2
                }
                xspeed = moveSpd
                if (place_meeting((x + xspeed), y, objSolid))
                    xspeed = 0
                timer += 1
                break
            case 2:
                sprite_index = sprMagnetJump
                if (timer == 0)
                {
                    yspeed = -6.5
                    moveSpd = arcCalcXspeed(yspeed, grav, x, y, (x + (image_xscale * ((view_wview - 104) - firstJumpDistance))), y)
                    if (place_meeting(x, (y + yspeed), objSolid))
                        yspeed = 0
                }
                else if (ground == 1)
                {
                    timer = -1
                    randomize()
                    phase = choose(3, 3, 3, 5, 5)
                    jumpImgXscale *= -1
                }
                xspeed = moveSpd
                if (place_meeting((x + xspeed), y, objSolid))
                    xspeed = 0
                timer += 1
                break
            case 3:
                xspeed = 0
                sprite_index = sprMagnetPrepare
                calibrateDirection();
                timer += 1
                if (timer &gt;= 13)
                {
                    timer = 0
                    phase = 4
                    startXScale = image_xscale
                }
                break
            case 4:
                xspeed = 0
                sprite_index = sprMagnetAttract
                mask_index = sprMagnetAttract
                image_speed = 0.5
                calibrateDirection();
                timer += 1
                if (image_xscale != startXScale || timer &gt;= 180)
                {
                    sprite_index = sprMagnetStand
                    mask_index = sprMagnetMask
                    timer = 0
                    phase = 0
                    nextPhase = 1
                }
                break
            case 5:
                xspeed = 0
                sprite_index = sprMagnetJump
                if (timer == 0)
                {
                    yspeed = -8.85
                    if (place_meeting(x, (y + yspeed), objSolid))
                        yspeed = 0
                }
                else if (yspeed &gt;= 0)
                {
                    yspeed = 0
                    timer = 0
                    phase = 6
                }
                timer += 1
                break
            case 6:
                calibrateDirection();
                xspeed = 0
                yspeed = 0
                sprite_index = sprMagnetShoot
                image_speed = 0
                var interval = 10
                if (timer &lt; (interval * 6))
                {
                    if ((timer % interval) == 0)
                    {
                        if ((timer % (interval * 2)) == 0)
                            image_index = 0
                        else
                        {
                            image_index = 1
                            playSFX(sfxMissileLaunch)
                            if (image_xscale == 1)
                                var box = bbox_right
                            else
                                box = bbox_left
                            var ID = instance_create((box + (image_xscale * 8)), y, objMagnetProjectile);
                            ID.image_xscale = image_xscale
                            if (!instance_exists(magnetID1))
                                magnetID1 = ID
                            else if (!instance_exists(magnetID2))
                                magnetID2 = ID
                            else if (!instance_exists(magnetID3))
                                magnetID3 = ID
                        }
                    }
                }
                else
                {
                    sprite_index = sprMagnetJump
                    if (timer &gt;= ((interval * 6) + 30))
                    {
                        timer = -1
                        phase = 7
                    }
                }
                timer += 1
                break
            case 7:
                if (timer &lt; 1)
                    yspeed = 4
                if (ground == 1)
                {
                    phase = 0
                    timer = 0
                    nextPhase = 1
                }
                timer += 1
                break
        }
        
    }
    else
        jumpImgXscale = image_xscale
    if (sprite_index == sprMagnetAttract)
    {
        reflectProjectiles = 1
        if instance_exists(objMegaman)
        {
         with (objMegaman)
         {
           shiftObject(sign(other.x - x)*other.strength, 0, 1);
         }
        }
    }
    else
        reflectProjectiles = 0
    
}
else
    image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// guard if spinning
if (sprite_index == sprMagnetAttract)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objMagnetProjectile)
    instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
