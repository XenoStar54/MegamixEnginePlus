<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDrillMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskDrillMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprDrillManPose;
poseImgSpeed = 10 / 60;
contactDamage = 4;

wallDistanceLimit = 32;

spriteMain = sprDrillMan;

myGrav = grav;
xMemo = x;
yMemo = y;
ground = false;
timer = 0;
phase = 0;
animTimer = 0;
puffTimer = 0;
dir = 0;
spd = 1.3;
airSpd = 0;

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_4.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// weak to metal type attacks, semiweak to acid/water, immune to Pharaoh Shot, normal to everything else

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
enemyDamageValue(objDiveMissile, 4);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 4);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 0);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 0);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48MML
enemyDamageValue(objFlameMixer, 0);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG48MML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(isIntro)
    {
        timer = 0;
        phase = 0;
        animTimer = 0;
        dir = 0;
    }
    else if (isFight == true)
    {
        if(phase == 0) // begin to drill
        {
            timer++;
            if(timer == 1)
            {
                calibrateDirection();
                image_index = 0;
                sprite_index = spriteMain;
            }
            else if(timer &lt; 11)
            {
                image_index = 6;
            }
            else if(timer == 11)
            {
                image_index = 7;
                yspeed = -5.75*sign(myGrav);
                animTimer = 0;
            }
            else
            {
                if(sign(yspeed) != -sign(myGrav)) // Drill Man is turning around
                {
                    animTimer++;
                    if(animTimer &lt; 5)
                    {
                        image_index = 9;
                    }
                    else
                    {
                        if(animTimer mod 5 == 0)
                        {
                            if(image_index != 10) image_index = 10;
                            else image_index = 11;
                        }
                    }
                    if(ground)
                    {
                        timer = 0;
                        phase = 1;
                        blockCollision = 0;
                        grav = 0;
                    }
                }
                else
                {
                    if((timer - 11) mod 5 == 0)
                    {
                        if(image_index != 7) image_index = 7;
                        else image_index = 8;
                    }
                }
            }
        }
        if(phase == 1) // actually drill
        {
            timer++;
            if(timer &lt; 16)
            {
                yspeed = 0;
                animTimer++;
                if(animTimer mod 5 == 0)
                {
                    if(image_index != 10) image_index = 10;
                    else image_index = 11;
                }
                yMemo = y;
                xMemo = x;
                
                // spawn puffs
                if(timer == 1)
                {
                    var puff = instance_create(x,y,objExplosion);
                    puff.sprite_index = sprDrillManPuff;
                }
                else if(timer == 2)
                {
                    var puff = instance_create(x+4,y+4*image_yscale,objExplosion);
                    puff.sprite_index = sprDrillManPuff;
                }
                else if(timer == 10)
                {
                    var puff = instance_create(x,y-8*image_yscale,objExplosion);
                    puff.sprite_index = sprDrillManPuff;
                }
            }
            else
            {
                if(abs(y - yMemo) &lt; 32)
                {
                    yspeed = sign(myGrav)*1;
                }
                else
                {
                    yspeed = 0;
                    visible = false;
                    timer = 0;
                    phase = -1;
                }
                
                // one last puff
                if(timer == 19)
                {
                    var puff = instance_create(x-4,yMemo+4*image_yscale,objExplosion);
                    puff.sprite_index = sprDrillManPuff;
                }
            }
        }
        else if(phase == -1) // begin to unearth self
        {
            timer++;
            if(timer &lt; 174) // during this time, Drill Man will track Mega's x position
            {
                if(target)
                {
                    x = target.x;
                    y = target.y + 32*sign(myGrav);
                }
            }
            else if(timer == 174) // I'm gonna recalculate where there's ground so I get to resurface correctly
            {
                // prevent clipping
                if(view_xview+view_wview-wallDistanceLimit &lt; x) x = view_xview+view_wview-wallDistanceLimit;
                else if(view_xview+wallDistanceLimit &gt; x) x = view_xview+wallDistanceLimit;
                // I hope this works
                while(!(checkSolid(0,0) &amp;&amp; !checkSolid(0,-32*sign(myGrav))) &amp;&amp; y &lt; view_yview+view_hview &amp;&amp; y &gt; view_yview)
                {
                    if(checkSolid(0,0) &amp;&amp; checkSolid(0,-32*sign(myGrav))) y -= 16*sign(myGrav);
                    else y += 16*sign(myGrav);
                }
                y += 16*sign(myGrav);
                // failsafe - return to og point
                if(!(y &lt; view_yview+view_hview+16*sign(myGrav) &amp;&amp; y &gt; view_yview+16*sign(myGrav)))
                {
                    x = xMemo;
                    y = yMemo;
                }
                yMemo = y - 32*myGrav;
            }
            else if(timer &lt; 204)
            {
                if(timer mod 6 == 0) // create some puffs to telegraph where Drill Man will unearth
                {
                    var rngAngle = random(360), rngRadius = irandom_range(2,8);
                    var puff = instance_create(x+cos(degtorad(rngAngle))*rngRadius,yMemo-16*sign(myGrav)-sin(degtorad(rngAngle))*rngRadius,objExplosion);
                    puff.sprite_index = sprDrillManPuff;
                }
            }
            else
            {
                // I'm gonna hope this worked
                grav = myGrav;
                yspeed = -7*sign(myGrav);
                phase = -2;
                timer = 0;
                animTimer = 0;
                puffTimer = 0;
                image_index = 7;
                visible = true;
            }
        }
        else if(phase == -2) // finally I can finish drilling
        {
            if(!blockCollision)
            {
                if(!checkSolid(0,0)) blockCollision = 1;
            }
            calibrateDirection();
            if(timer == 0)
            {
                animTimer++;
                if(animTimer mod 5 == 0)
                {
                    if(image_index != 7) image_index = 7;
                    else image_index = 8;
                }
                if(sign(yspeed) != -sign(myGrav))
                {
                    timer++;
                    image_index = 6;
                    animTimer = 0;
                }
            }
            else
            {
                if(ground &amp;&amp; blockCollision)
                {
                    image_index = 0;
                    phase = 5;
                }
                else
                {
                    if(animTimer &lt; 5)
                    {
                        animTimer++;
                        image_index = 6;
                    }
                    else
                    {
                        image_index = 12;
                    }
                }
            }
            puffTimer++;
            if(puffTimer == 2)
            {
                var puff = instance_create(x+4,yMemo+4*image_yscale,objExplosion);
                puff.sprite_index = sprDrillManPuff;
            }
            else if(puffTimer == 10)
            {
                var puff = instance_create(x,yMemo-8*image_yscale,objExplosion);
                puff.sprite_index = sprDrillManPuff;
            }
            else if(puffTimer == 19)
            {
                var puff = instance_create(x-4,yMemo+4*image_yscale,objExplosion);
                puff.sprite_index = sprDrillManPuff;
            }
        }
        else if(phase == 2) // jump
        {
            if(ground)
            {
                xspeed = 0;
                if(timer == 0)
                {
                    timer++;
                    yspeed = -8*sign(myGrav);
                    if(target)
                    {
                        calibrateDirection();
                        xspeed = xSpeedAim(x,y,target.x + image_xscale*32,target.y);
                    }
                    else
                    {
                        xspeed = image_xscale;
                    }
                    dir = image_xscale;
                    image_index = 12;
                    airSpd = abs(xspeed);
                }
                else
                {
                    if(target) calibrateDirection();
                    phase = 5;
                    image_index = 0;
                }
            }
            else
            {
                image_index = 12;
                xspeed = dir*airSpd;
            }
        }
        else if(phase == 3) // walk
        {
            timer++;
            if(dir == 0)
            {
                calibrateDirection();
                dir = image_xscale;
            }
            image_xscale = dir;
            xspeed = spd*dir;
            if(checkSolid(dir,0))
            {
                if(checkSolid(dir,-48*sign(grav)) || x &lt; view_xview+16 || x &gt; view_xview+view_wview-16)
                {
                    timer = 0;
                    phase = 5;
                    dir = 0;
                    xspeed = 0;
                }
                else yspeed = -5*sign(grav);
            }
            if(ground)
            {
                if(timer &gt;= 42)
                {
                    xspeed = 0;
                    phase = 4;
                    timer = 0;
                    yspeed = 0;
                }
                
                animTimer++;
                if(animTimer mod 5 == 0)
                {
                    if(image_index &lt; 2 || image_index &gt;= 5) image_index = 2;
                    else image_index++;
                }
            }
            else
            {
                image_index = 12;
            }
        }
        else if(phase == 4) // shoot
        {
            calibrateDirection();
            xspeed = 0;
            image_index = 1;
            timer++;
            if(timer == 10)
            {
                var drill = instance_create(x+16*image_xscale,y,objDrillManDrillBomb);
                drill.image_xscale = image_xscale;
            }
            else if(timer &gt; 18)
            {
                timer = irandom_range(17,21);
                phase = 3;
                animTimer = 0;
            }
        }
        else if(phase == 5) // wait
        {
            calibrateDirection();
            xspeed = 0;
            image_index = 0;
            timer++;
            if(timer &gt;= 30)
            {
                timer = 0;
                phase = choose(0,2,3);
                animTimer = 0;
                puffTimer = 0;
                dir = 0;
            }
        }
    }
    canHit = visible;
    canDamage = visible;
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if((image_index &gt;= 7 &amp;&amp; image_index &lt;= 11) &amp;&amp; other.object_index != objDiveMissile)
{
    other.guardCancel = 3;
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objDrillManDrillBomb) instance_destroy();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
