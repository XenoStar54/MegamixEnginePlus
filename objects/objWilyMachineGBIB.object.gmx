<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWilyMachineGBIB</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = 0;
healthpointsStart = 28;
healthpoints = healthpointsStart;
contactDamage = 4;
ground = false;
hasTriggeredFall = false;
introType = 0;
bossTriggered = true;
delayUse = false;
hasFired = false;
grav = 0;
hitInvul = 45;

facePlayer = false;
facePlayerOnSpawn = false;

dropItemAnyway = 0;

preserveLevelMusic = 1;
actualStoredMusic = -1;
actualStoredMusicType = "";
actualStoredMusicLoopStart = 0;
actualStoredMusicLoopEnd = 1;
actualStoredMusicLoop = 0;
actualStoredMusicVolume = 0.8;
actualStoredMusicTrackNumber = 0;

clampPosX = -23;
clampPosY = -16;

beamPosX = 5;
beamPosY = 39;

spriteMachine = sprWilyMachineGBIB;
spriteSaucer = sprWilyMachineGBISaucer;
spriteBeamGun = sprWilyMachineGBIBeamGun;
spriteBeam = sprWilyMachineGBIBeam;
spriteClampHand = sprWilyMachineGBIClampHand;

nextForm = noone;
nextFormScript = scrNoEffect;
nextFormArgs = makeArray(0);
nextFormCode = "";

// Health Bars
healthBarPrimaryColor[1] = 18;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_1GB.gbs";
musicType = "VGM";
musicTrackNumber = 8;

// you do the damage table yourself because screw this

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 28);

/*
// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 2);
enemyDamageValue(objBreakDash, 2);
enemyDamageValue(objMagneticShockwave, 6);
enemyDamageValue(objIceWall, 2);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 2);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 5);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 2);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 2);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 0);
enemyDamageValue(objSuperArmDebris, 0);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 2);
enemyDamageValue(objBrickWeapon, 2);
enemyDamageValue(objIceSlasher, 0);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(preserveLevelMusic &amp;&amp; actualStoredMusic == -1)
{
    actualStoredMusic = global.levelSong;
    actualStoredMusicType = global.levelSongType;
    actualStoredMusicLoopStart = global.levelLoopStart;
    actualStoredMusicLoopEnd = global.levelLoopEnd;
    actualStoredMusicLoop = global.levelLoop;
    actualStoredMusicVolume = global.levelVolume;
    actualStoredMusicTrackNumber = global.levelTrackNumber;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    if (startIntro)
    {
        sprite_index = spriteMachine;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravStart;
        image_speed = 0.125;
        canDamage = false;
        with(instance_create(x+image_xscale*clampPosX,y+image_yscale*clampPosY,objWilyMachineGBIClampHand))
        {
            motherObject = other;
        }
        with(instance_create(x+image_xscale*beamPosX,y+image_yscale*beamPosY,objWilyMachineGBIBeamGun))
        {
            motherObject = other;
        }
    }
    else if (isIntro)
    {
        
        if (!hasTriggeredFall)
        {
            hasTriggeredFall = true;
        }
        canFillHealthBar = true;
        isIntro = false;
        blockCollision = blockCollisionStart;
        canDamage = true;
    }
}
if (entityCanStep())
{
    // your objects will do everything, don't worry about it
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objWilyMachineGBIClampHand) instance_destroy();
with(objWilyMachineGBIBeamGun) instance_destroy();
with(objEnemyBullet) if(sprite_index == sprWilyMachineGBIBeam) instance_destroy();
if(nextForm != noone)
{
    var saveUseEndStageBehavior = useEndStageBehavior;
    useEndStageBehavior = false;
    musicStore = "";
    with(instance_create(xstart,ystart,nextForm))
    {
        useEndStageBehavior = saveUseEndStageBehavior;
        image_xscale = other.image_xscale;
        image_yscale = other.image_yscale;
        respawn = false;
        music = "";
        itemDrop = other.itemDrop;
        preserveLevelMusic = other.preserveLevelMusic;
        preserveLevelMusic = other.preserveLevelMusic;
        actualStoredMusic = other.actualStoredMusic;
        actualStoredMusicType = other.actualStoredMusicType;
        actualStoredMusicLoopStart = other.actualStoredMusicLoopStart;
        actualStoredMusicLoopEnd = other.actualStoredMusicLoopEnd;
        actualStoredMusicLoop = other.actualStoredMusicLoop;
        actualStoredMusicVolume = other.actualStoredMusicVolume;
        actualStoredMusicTrackNumber = other.actualStoredMusicTrackNumber;
        if(other.nextFormScript != scrNoEffect) scriptExecuteNargs(other.nextFormScript,other.nextFormArgs);
        if(other.nextFormCode != "") stringExecutePartial(other.nextFormCode);
    }
    if(!dropItemAnyway) itemDrop = -1;
}

event_inherited();

with(instance_create(x,y,objEnemyBullet))
{
    sprite_index = other.spriteSaucer;
    image_xscale = other.image_xscale;
    image_yscale = other.image_yscale;
    image_speed = 0.15;
    yspeed = -2*image_yscale;
    blockCollision = 0;
    contactDamage = 0;
    canDamage = 0;
}

if(nextForm == noone &amp;&amp; preserveLevelMusic &amp;&amp; !useEndStageBehavior)
{
    stopMusic();
    playMusic(actualStoredMusic, actualStoredMusicType, actualStoredMusicTrackNumber, actualStoredMusicLoopStart, actualStoredMusicLoopEnd, actualStoredMusicLoop, actualStoredMusicVolume);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
