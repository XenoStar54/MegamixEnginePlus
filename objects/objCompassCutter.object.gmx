<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCompassCutter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 1;
attackDelay = 4;

penetrate = 3;
pierces = 2;

image_speed = 1/2;

despawnRange = 64;

blockCollision = 0;
grav = 0;
xspeed = 0;
yspeed = 0;

xs = 0;
ys = 0;
radius = 0;
angle = 0;
radiusSpeed = 2;
angleSpeed = 20;

timer = 10;

phase = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep() &amp;&amp; canDamage){

    if (instance_exists(parent)){
    
        xs = spriteGetXCenterObject(parent);
        ys = spriteGetYCenterObject(parent);
    
    }


    switch(phase){
    
        case 0:
            if (instance_exists(parent)){
                with(parent){
                    other.phase = !(global.keyShoot[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT));
                }
            }
        break;
        case 1:
            if (timer &gt; 0){
                timer--;
                if (instance_exists(parent)){
                    radius = point_distance(x, y, xs, ys);
                    angle = point_direction(xs, ys, x, y);
                }
            }
            else{
                xspeed = 0;
                timer = 0;
                phase = 2;
            }
        break;
        case 2:
            if (radius &gt; 0){
                radius -= radiusSpeed;
                angle += angleSpeed*image_xscale;
                
                x = cos(degtorad(angle))*radius + xs;
                y = -sin(degtorad(angle))*radius + ys;
            }
            else{
                event_user(EV_DEATH);
            }
        break;
    
    }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT)){

    var s = fireWeapon(20, -1, objCompassCutter, 1, 2, 2, 1);
    if (s){
        s.xspeed = image_xscale*3;
        s.image_xscale = image_xscale;
        if (costumeID == 2) s.sprite_index = sprCompassCutterBass;
        playSFX(sfxShadowBlade);
    }

}

switch(costumeID){
    default:
        global.weaponPrimaryColor[global.weaponID[? objCompassCutter]] = global.nesPalette[0];
        global.weaponSecondaryColor[global.weaponID[? objCompassCutter]] = global.nesPalette[41];
    break;
    case 2:
        global.weaponPrimaryColor[global.weaponID[? objCompassCutter]] = global.nesPalette[0];
        global.weaponSecondaryColor[global.weaponID[? objCompassCutter]] = global.nesPalette[19];
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("COMPASS CUTTER", global.nesPalette[0], global.nesPalette[41], sprWeaponIconsCompassCutter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.damage != 0)
{
    with (other)
    {
        par = object_is_ancestor(object_index, prtMiniBoss) || (boss == 1);
        if (par || !canHit)
        {
            exit;
        }
        if (healthpoints - global.damage &lt;= 0)
        {
            var _i;
            _i = instance_create(x, y, objSlashEffect);
            _i.sprite_index = sprite_index;
            _i.image_index = image_index;
            _i.image_xscale = image_xscale;
            _i.image_yscale = image_yscale;
            _i.half = 'top';
            _i = instance_create(x, y, objSlashEffect);
            _i.sprite_index = sprite_index;
            _i.image_index = image_index;
            _i.image_xscale = image_xscale;
            _i.image_yscale = image_yscale;
            _i.half = 'bottom';
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
