<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTornadoIntro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprTornadoMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

// special animation
pose = sprTornadoPose
poseImgSpeed = 0.166666666666667
contactDamage = 8;
ground = false;
attackTimer = 0;
timescale = 1;

//Effect
circleTimer = 0;
hasSlow = false;

//Tornado Code
timer = 0
shootCount = 0
refPlayerX = 0
tornadoPattern = 0
tornadoDir = 1
tornadoBaseX = 0
didTornado = 0
forceTornadoTwice = 1
torndoID1 = objTornadoProjectile
torndoID2 = objTornadoProjectile
torndoID3 = objTornadoProjectile
torndoID4 = objTornadoProjectile

//shot count
shots = 0;

imageTimer = 0;
imageTimerMax = 99;

imageNoMin = 0;
attackTimerMax = 145;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;
ballImage = 0;
fightStarter = 0;

randomiser = -1;

spreadAttack = false;

shotsToFire = 2; 
if (global.difficulty == DIFF_HARD)
{
    spreadAttack = true;
    shotsToFire = 3;
}
else
{
    spreadAttack = false;
    if (global.difficulty == DIFF_EASY)
        shotsToFire = 1;
    else
        shotsToFire = 2;
}

// Health Bar
healthBarPrimaryColor[1] = 36;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_9.nsf";
musicType = "VGM";
musicTrackNumber = 16;
musicVolume = 1.4;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 4);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 4);
enemyDamageValue(objSparkShock, 4);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 0);
enemyDamageValue(objPharaohShot, 1);

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objPlugBall, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objMagmaBazooka, 1);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 4);
enemyDamageValue(objSolarBlaze, 0);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 0);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 4);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 0);

// MM&amp;B
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 4);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(0, 0);
}
if (entityCanStep())
{
    if (isFight)
    {
        
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.15;
        }
        
        // resets the image timer if chill man ever changes poses
        if (pose != sprite_index)
        {
            pose = sprite_index;
            imageTimer = 0;
        }
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(4, 4, 4);
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        
        // slow down chill man if he's in this phase and still moving.
        if (ground)
        {
            if (xspeed &gt; 0)
                xspeed = 0.03;
            else if (xspeed &lt; 0)
                xspeed = 0.03;
            if (abs(xspeed) &lt;= 0.25)
                xspeed = 0;
            
        }
        
        switch (phase)
        {
            case 20: // idle 
                calibrateDirection();
                sprite_index = sprTornadoStand;
                imageNoMin = 0;
                imageTimerMax = 9999;
                if (attackTimer &gt;= 45)
                {
                    phase = randomiser;
                    attackTimer = 0;
                }
                break;
                
            case 0: //Tornado Set
                    xspeed = 0
                    yspeed = 0
                    var prepareTime = 5
                    var shootTime = 50
                    if (timer == 0)
                        calibrateDirection();
                    if (timer &lt;= prepareTime)
                    {
                        if(ground)
                        {
                        sprite_index = sprTornadoShoot 
                        }
                        else
                        {
                        sprite_index = sprTornadoAirShoot
                        }
                        image_index = 0
                    }
                    else if (timer &lt;= shootTime)
                    {
                        if(ground)
                        {
                        sprite_index = sprTornadoShoot 
                        
                        }
                        else
                        {
                        sprite_index = sprTornadoAirShoot
                        }
                        if (image_index == 0)
                            image_index = 1
                        if ((timer % 4) == 0)
                        if(image_index == 1)
                        {
                         image_index = 2
                        }
                        else
                        {
                         image_index = 1
                        }
                    }
                    else
                    {
                        if(ground)
                        {
                        
                        sprite_index = sprTornadoStand
                        }
                        else
                        {
                        sprite_index = sprTornadoAir
                        }
                        image_speed = 0.25
                    }
                    var tornadoTime = 30
                    var tornadoInterval = 12
                    var tornadoDist = 32
                    if (timer == (tornadoTime - 10))
                    
                        if(instance_exists(objMegaman))
                        {
                        tornadoBaseX = round(sprite_get_xcenter_object(objMegaman) / (tornadoDist / 2) * (tornadoDist / 2))
                        }
                        else
                        {
                        tornadoBaseX = (round(((view_xview + (view_wview / 2)) / (tornadoDist / 2))) * (tornadoDist / 2))
                        }
                    
                    if (timer == tornadoTime || timer == (tornadoTime + tornadoInterval) || timer == (tornadoTime + (tornadoInterval * 2)) || timer == (tornadoTime + (tornadoInterval * 3)))
                    {
                        if (timer == tornadoTime)
                            var tornadoNumber = 0
                        else if (timer == (tornadoTime + tornadoInterval))
                            tornadoNumber = 1
                        else if (timer == (tornadoTime + (tornadoInterval * 2)))
                            tornadoNumber = 2
                        else
                            tornadoNumber = 3
                        if (timer == tornadoTime)
                        {
                            if ((tornadoBaseX - tornadoDist) &lt;= (view_xview + 3))
                            {
                                tornadoPattern = 0
                                tornadoDir = 1
                            }
                            else if ((tornadoBaseX + tornadoDist) &gt;= ((view_xview + view_wview) - 3))
                            {
                                tornadoPattern = 0
                                tornadoDir = -1
                            }
                            else if ((tornadoBaseX - tornadoDist) &lt;= ((view_xview + tornadoDist) + 3))
                            {
                                tornadoPattern = 1
                                tornadoDir = 1
                            }
                            else if ((tornadoBaseX + tornadoDist) &gt;= (((view_xview + view_wview) - tornadoDist) - 3))
                            {
                                tornadoPattern = 1
                                tornadoDir = -1
                            }
                            else if (instance_exists(objMegaman) &amp;&amp; abs((sprite_get_xcenter_object(objMegaman) - tornadoBaseX)) &gt;= 8)
                            {
                                tornadoPattern = 0
                                if(sprite_get_xcenter_object(objMegaman) &gt; tornadoBaseX)
                                {
                                tornadoDir = 1
                                }
                                else
                                {
                                tornadoDir = -1
                                }
                            }
                            else
                            {
                                tornadoPattern = 1
                                tornadoDir = -1
                            }
                        }
                        if (tornadoPattern == 0)
                            var tornadoX = (tornadoBaseX + ((tornadoNumber * tornadoDir) * tornadoDist))
                        else
                        {
                            switch tornadoNumber
                            {
                                case 0:
                                    tornadoX = tornadoBaseX
                                    break
                                case 1:
                                    tornadoX = (tornadoBaseX + (tornadoDir * tornadoDist))
                                    break
                                case 2:
                                    tornadoX = (tornadoBaseX - (tornadoDir * tornadoDist))
                                    break
                                case 3:
                                    tornadoX = (tornadoBaseX + ((tornadoDir * tornadoDist) * 2))
                                    break
                            }
                            
                        }
                        var ID = instance_create(tornadoX, (view_yview + view_hview), objTornadoProjectile);
                        playSFX(sfxTornadoBlow)
                    }
                    timer += 1
            
                    if (timer &gt;= prepareTime &amp;&amp; timer &lt;= (shootTime + 60))
                    {
                    if instance_exists(target)
                     {
                       with (target)
                         {
                        if (!instance_exists(statusObject))
                           {
                              statusObject = instance_create(x, y, objStatusEffect);
                              
                    
                              gravfactor = 0.35
                           }
                        else
                           {
                               
                    
                              gravfactor = 0.35
                    
                            }
                        }
                    }
                }
                    
                    else
                    {
                      if instance_exists(target)
                        {
                        with (target)
                        {
                        if (!instance_exists(statusObject))
                            {
                              statusObject = instance_create(x, y, objStatusEffect);
                              
                              gravfactor = 1;
                            }
                        else
                            {
                               
                                gravfactor = 1;
                    
                            }
                        }
                  }
            }
                    
                    if (timer &gt;= (shootTime + 75))
                    {
                        timer = 0
                        if (didTornado == 1)
                        {
                            didTornado = 0
                            if(ground)
                            {
                             phase = 1
                             attackTimer = 0;
                            }
                            else
                            {
                             calibrateDirection();
                             phase = 4
                             attackTimer = 0;
                            }
                        }
                        else
                        {
                            if (forceTornadoTwice == 1)
                            {
                                phase = 0
                                forceTornadoTwice = 0
                                attackTimer = 0;
                            }
                            else
                            {
                            
                            if(ground)
                            {
                             var nonShootPhase = 1
                            }
                            else
                            {
                             var nonShootPhase = 4
                            }
                                
                                randomize()
                                phase = choose(0, 0, 0, nonShootPhase, nonShootPhase)
                                attackTimer = 0;
                                calibrateDirection();
                                
                            }
                            if (phase == 0)
                                didTornado = 1
                        }
                    }
                    break
                    
            case 1: // Jump in
            sprite_index = sprTornadoShoot
            image_index = 0
            
           
            if (attackTimer &lt; 10)
            
            if (attackTimer == 10)
            { 
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 11)
                {
                    attackTimer = 0;
                    phase = 2;
                }
                break;
                
                    
             case 2: // Jump
              image_speed = 0.25
                 
                if (attackTimer &lt; 5)
                {
                    
                }
                if (attackTimer == 5)
                {
                delay = 3; 
                sprite_index = sprTornadoAir
                image_speed = 0.25  
                yspeed = -5.5;
                xspeed = image_xscale * 0;
                hasFired = true;  
                          
                }
                if (attackTimer == 30)
                {
                pauseGravity = true;    
                }
                if (attackTimer == 50)
                {
                imageTimerMax = 0;
                attackTimer = 0;
                phase = 0;
                }
                
                break;
              
             case 3: // None
            
           
            if (attackTimer &lt; 10)
            
            if (attackTimer == 10)
            { 
            attackTimer = 0;
                    phase = 4;
            }
                break;
                
            case 4: // Aim Mega Man
                image_speed = 0.25
                 
                if (attackTimer &lt; 15)
                {
            
                }
                if (attackTimer == 15)
                {
                delay = 3; 
                sprite_index = sprTornadoAir
                image_speed = 0.25        
                }
                if (attackTimer == 50)
                {
                calibrateDirection();
                pauseGravity = false;    
                }
                if (attackTimer == 56)
                {
                    grav = 0.45;
                    yspeed = -2;
                    
                    if (instance_exists(target))
                    {
                        xspeed = xSpeedAim(x, y, target.x, target.y, yspeed, grav, 5.2);
                    }
                    else
                    {
                        xspeed = 2 * image_xscale;
                    }
                    yspeed = 0;
                }
                
                
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 60)
                {
                    attackTimer = 0;
                    phase = 5;
                }
                break;
                
                case 5: // Land
            sprite_index = sprTornadoStand2
            
            
           
            if (attackTimer &lt; 10)
            
            if (attackTimer == 10)
            { 
            image_index = 0
            }
            if (attackTimer == 15)
            { 
            image_index = 1
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 30)
                {
                    attackTimer = 0;
                    randomize()
                    phase = choose(0, 0, 1)
                }
                break;
                
                
              
                
        }
        x = round(x);
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(target))
    {
        with (target)
        {
            inked = false;
            
            if (instance_exists(statusObject))
            {
                statusObject.statusChangedWalk = false;
                statusObject.statusChangedJump = false;
                gravfactor = 1;
            }
        }
    }

with (objTornadoProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
