<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM9MachineGunJoe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 6;
healthpoints = healthpointsStart;
contactDamage = 3;

category = "joes";

// Empty mech mechanic
joeLock = false;

// Enemy specific code
shootTimer = 0;
shooting = false;
shootAmount = 0;

// Empty mech mechanic
joeLock = false;

myDir = -1;
calibrateDirection();
radius = 1.5 * 16; // 1.5 tiles; the radius that MM needs to enter to trigger the jumping of the Joe
resetDir = 0;
waitCount = 0;
shootCount = 0;
jumpCount = 0;
yspeedJump = -6; // change this to alter the yspeed when the Joe jumps
shootCountMax = 2;
jumpCountMax = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (resetDir)
    {
        calibrateDirection(); // face player when it spawns
        myDir = image_xscale;
        resetDir = 1;
    }
    
    // if it's on the ground, check if the player is nearby it
    // if nearby, jump
    if (ground)
    {
        if (!shooting)
        {
            calibrateDirection();
        }
        if (shootCount &gt;= shootCountMax)
        {
            waitCount += 1
            if waitCount &gt;=60
            {
                yspeed = yspeedJump;
                ground = false;
                jumpCount++;
                waitCount = 0;
                if (!instance_exists(target))
                {
                    shootCount = 0;
                    jumpCount = 0;
                }
                else if (instance_exists(target))
                {
                    if (point_distance(x, 0, target.x, 0) &gt; radius || jumpCount &gt;= jumpCountMax)
                    {
                        shootCount = 0;
                        jumpCount = 0; // Stops Jumping if you are too far away or the Joe has reached the maximum amount of consecutive jumps
                    }
                }
            }
        }
    }
    
    // Shooting
    if (!shooting)
    {
        // reset animation if it's returning from shooting
        if (image_index &gt; 0 &amp;&amp; shootTimer mod 10 == 0)
        {
            image_index -= 1;
        }
        shootTimer += 1; // increment shooting timer
        if (shootTimer &gt;= 90)
        {
            shooting = true;
            shootTimer = 0;
        }
    }
    else
    {
        if (image_index &lt; 2) // if it's getting ready to shoot, play animation
        {
            image_index += 0.1;
        }
        else
        {
            if waitCount &lt; 3
            {
                waitCount += 1
            }
            else
            {
                shootTimer += 1;
                if (shootTimer &gt;= 6)
                {
                    if (shootAmount &lt; 7)
                    {
                        shootTimer = 0;
                        var shootID, box;
                        
                        // set spawn point for bullet based on xscale
                        if (image_xscale == 1)
                        {
                            box = bbox_right;
                        }
                        else
                        {
                            box = bbox_left;
                        }
                        shootID = instance_create(box, y - 8, objEnemyBullet);
                        shootID.xspeed = image_xscale * 4;
                        shootID.image_xscale = image_xscale;
                        shootID.sprite_index = sprMM9MachineGunJoeBullet;
                        shootAmount++;
                    }
                    if (shootAmount &gt;= 7)
                    {
                        shootTimer = 0;
                        shootAmount = 0;
                        shooting = false;
                        shootCount++;
                        waitCount = 0;
                    }
                }
            }
        }
    }
    
    // if it's on the ground, set jump sprite
    // if it isn't, set regular sprite, and make sure it's not sliding on the ground
    if (!ground)
    {
        shootTimer = 0;
        shooting = false;
        sprite_index = sprMM9MachineGunJoeJump;
    }
    if (ground)
    {
        sprite_index = sprMM9MachineGunJoe;
    }
}
else if (dead)
{
    shootTimer = 0;
    shooting = false;
    shootAmount = 0;
    image_index = 0;
    resetDir = 0;
    shootCount = 0;
    jumpCount = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue(objFlameMixer, 666);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// if image_index is shield up, and you're not shooting sniper joe in the back or whatever, reflect bullets
if (sprite_index != sprMM9MachineGunJoeJump &amp;&amp; image_index == 0)
{
    if (collision_rectangle(x + 12 * image_xscale, y - 3,
        x + 14 * image_xscale, y - 20, other.id, false, false))
    {
        other.guardCancel = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
