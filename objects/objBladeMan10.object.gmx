<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBladeMan10</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MM10 Blade Man difficulty difference breakdown:
// when floor: jump to wall behind; when ceiling: jump to wall ahead; when wall: rng if jump to floor or ceiling
// easy: fires 2 blades: 1 at, 1 over
// normal: fires 3 blades: 1 at, 2 over
// hard: when he grounds he'll dash forward, fires 5 blades: 1 at, 3 over, 1 below
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
hasTriggeredFall = false;
customPose = 1;
introType = 0;
pose = sprite_index;
poseImgSpeed = 0;
contactDamage = 4;
ground = false;
phase = 0;
timer = 0;
grav = 0.25;
image_speed = 0;
yMemo = y;
visible = false;
fallCheck = false;
xspdmemo = 0;
xMemo = x;
hasDashedMemo1 = 0;
hasDashedMemo2 = 0;

//@cc: decides which difficulty Blade Man will use; -1: pick current difficulty; 0: easy; 1: normal; 2: hard
overrideDifficultyMode = -1;

// Health Bar
healthBarPrimaryColor[1] = make_color_rgb(184,0,184);
healthBarSecondaryColor[1] = make_color_rgb(240,184,56);
manualColors = true;

// Music
music = "Mega_Man_10.nsf";
musicType = "VGM";
musicTrackNumber = 18;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        if(target) calibrateDirection();
        y -= image_yscale*view_hview;
        startIntro = false;
        isIntro = true;
        grav = 0;
        blockCollision = 0;
        image_index = 5;
    }
    else if(isIntro)
    {
        if(!fallCheck)
        {
            grav = 0.25*image_yscale;
            gravStart = grav;
            visible = true;
            if(abs(y - yMemo) &lt; abs(yspeed))
            {
                y = yMemo;
                yspeed = 0;
                fallCheck = true;
                gravStart = grav;
                grav = 0;
                timer = 0;
            }
        }
        else
        {
            timer++;
            if(timer &lt; 10)
            {
                image_index = 1;
            }
            else if(timer &lt; 20)
            {
                image_index = 0;
            }
            else if(timer &lt; 30)
            {
                image_index = 1;
            }
            else if(timer &lt; 40)
            {
                image_index = 0;
            }
            else if(timer &lt; 50)
            {
                image_index = 1;
            }
            else if(timer &lt; 70)
            {
                image_index = 0;
            }
            else if(timer &lt; 100)
            {
                image_index = 2;
            }
            else if(timer &lt; 102)
            {
                image_index = 3;
            }
            else
            {
                image_index = 4;
                grav = gravStart;
                blockCollision = 1;
                canFillHealthBar = true;
                isIntro = false;
                phase = 0;
                timer = 0;
                if(overrideDifficultyMode == -1) overrideDifficultyMode = global.difficulty;
            }
        }
    }
    else if(isFight)
    {
        if(phase == 0) // jump to wall behind you
        {
            grav = gravStart;
            if(target) calibrateDirection();
            timer++;
            if(timer &lt; 20)
            {
                image_index = 0;
            }
            else
            {
                image_index = 5;
                phase = 1;
                timer = 0;
                yspeed = ySpeedAim(y,y-68*image_yscale,grav);
                xspeed = xSpeedAim(x,y,view_xview+view_wview*(image_xscale &lt; 0)-24*image_xscale,y-64*image_yscale);
                xspdmemo = xspeed;
            }
        }
        else if(phase == 1) // land on wall behind you
        {
            xspeed = xspdmemo;
            if(ground) // emergency state
            {
                image_index = 2;
                phase = -1;
                xspeed = 0;
                yspeed = 0;
                grav = gravStart;
            }
            else if(((sign(yspeed) == sign(grav) &amp;&amp; abs(yspeed) &gt;= 1) || grav == 0) &amp;&amp; checkSolid(sign(xspdmemo),0)) // cling to wall and shoot blades
            {
                image_index = 7;
                phase = 2;
                grav = 0;
                xspeed = 0;
                yspeed = 0;
                image_xscale = -sign(xspdmemo);
            }
        }
        else if(phase == 2) // shoot blades from wall
        {
            timer++;
            if(timer &lt; 40)
            {
                image_index = 7;
            }
            else if(timer == 40) // shoot blades
            {
                image_index = 8;
                playSFX(sfxTripleBlade);
                
                var bladenum = 3;
                var angle = 90-90*other.image_xscale;
                if(target) angle = point_direction(x+16*image_xscale,y,target.x,target.y);
                var angleDif = 10;
                if(overrideDifficultyMode == 0) bladenum = 2;
                else if(overrideDifficultyMode == 2)
                {
                    bladenum = 5;
                    angle -= angleDif*image_xscale;
                }
                
                repeat(bladenum)
                {
                    var bullet = instance_create(x+16*image_xscale,y,objBladeMan10Blade);
                    with(bullet)
                    {
                        dir = angle;
                        spd = 5;
                        bullet.contactDamage = 2+other.overrideDifficultyMode;
                        image_index = 16*dir/360;
                    }
                    angle += angleDif*image_xscale;
                }
            }
            else if(timer &lt; 42)
            {
                image_index = 8;
            }
            else if(timer &lt; 72)
            {
                image_index = 9;
            }
            else
            {
                var rng = choose(0,1);
                if(hasDashedMemo1 &gt;= 2) rng = 1;
                else if(hasDashedMemo2 &gt;= 4) rng = 0;
                if(rng) // go to ceiling
                {
                    image_index = 5;
                    timer = 0;
                    phase = 3;
                    var angle = point_direction(x,y,x+48*image_xscale,yMemo-128*image_yscale);
                    xspeed = cos(degtorad(angle))*5;
                    yspeed = -sin(degtorad(angle))*5;
                    xspdmemo = xspeed;
                    hasDashedMemo1 = 0;
                    hasDashedMemo2++;
                }
                else
                {
                    image_index = 10;
                    timer = 0;
                    phase = 5;
                    hasDashedMemo1++;
                    hasDashedMemo2 = 0;
                }
            }
        }
        else if(phase == 3) // go to ceiling
        {
            if(sign(y-yMemo) == sign(gravStart) &amp;&amp; grav == 0)
            {
                grav = gravStart;
            }
            if(sign(yspeed) == sign(grav) &amp;&amp; abs(yspeed) &gt; abs(grav)) phase = 1;
            
            if(ground)
            {
                image_index = 2;
                phase = -1;
                xspeed = 0;
                yspeed = 0;
                grav = gravStart;
            }
            else if(checkSolid(0,yspeed))
            {
                image_index = 11;
                phase = 4;
                xspeed = 0;
                yspeed = 0;
            }
        }
        else if(phase == 4) // shoot blades from ceiling
        {
            timer++;
            if(timer &lt; 40)
            {
                image_index = 11;
            }
            else if(timer == 40) // shoot blades
            {
                image_index = 12;
                playSFX(sfxTripleBlade);
                
                var bladenum = 3;
                var angle = 180+90*other.image_yscale;
                if(target) angle = point_direction(x,y+16*image_yscale,target.x,target.y);
                var angleDif = 10;
                if(overrideDifficultyMode == 0) bladenum = 2;
                else if(overrideDifficultyMode == 2)
                {
                    bladenum = 5;
                    angle -= angleDif*image_xscale;
                }
                
                repeat(bladenum)
                {
                    var bullet = instance_create(x,y+16*image_yscale,objBladeMan10Blade);
                    with(bullet)
                    {
                        dir = angle;
                        spd = 5;
                        bullet.contactDamage = 2+other.overrideDifficultyMode;
                        image_index = 16*dir/360;
                    }
                    angle += angleDif*image_xscale;
                }
            }
            else if(timer &lt; 42)
            {
                image_index = 12;
            }
            else if(timer &lt; 72)
            {
                image_index = 13;
            }
            else
            {
                image_index = 5;
                timer = 0;
                phase = 1;
                var angle = point_direction(x,y,view_xview+view_wview*(image_xscale &gt; 0)-24*image_xscale,yMemo-68*image_yscale);
                xspeed = cos(degtorad(angle))*5;
                yspeed = -sin(degtorad(angle))*5;
                xspdmemo = xspeed;
            }
        }
        else if(phase == 5) // dash from wall
        {
            if(timer &lt; 40)
            {
                timer++;
                image_index = 10;
            }
            else if(timer == 40)
            {
                timer++;
                image_index = 6;
                var angle = point_direction(x,y,x+48*image_xscale,y+48*image_yscale);
                if(target) angle = point_direction(x,y,target.x,target.y);
                while(angle &lt; 360) angle += 360;
                while(angle &gt; 360) angle -= 360;
                
                // restricted angles
                if(image_yscale &gt; 0)
                {
                    if(angle &lt; 181 &amp;&amp; angle &gt; 90) angle = 181;
                    if(angle == 360 || angle &lt;= 90) angle = 359;
                    if(angle &gt; 270-45 &amp;&amp; angle &lt; 270+45) angle = 270+45*image_xscale;
                }
                else
                {
                    if(angle &gt; 179 &amp;&amp; angle &lt; 270) angle = 179;
                    if(angle == 0 || angle &gt;= 270) angle = 1;
                    if(angle &gt; 90-45 &amp;&amp; angle &lt; 90+45) angle = 90-45*image_xscale;
                }
                
                xspeed = cos(degtorad(angle))*7;
                yspeed = -sin(degtorad(angle))*7;
            }
            else if(timer == 41)
            {
                if(ground)
                {
                    image_index = 1;
                    grav = gravStart;
                    if(abs(xspeed) &gt; 1.5)
                    {
                        xspeed = sign(xspeed) * 1.5;
                    }
                    else if(abs(xspeed) &gt; 0.05) xspeed -= 0.05*sign(xspeed);
                    else
                    {
                        if(target) calibrateDirection();
                        if(overrideDifficultyMode == 2)
                        {
                            timer++;
                            image_index = 14;
                        }
                        else // we did it boys, we cycled
                        {
                            xspeed = 0;
                            timer = 0;
                            phase = 0;
                        }
                    }
                }
            }
            else if(timer &lt; 62)
            {
                image_index = 14;
                timer++;
                if(target) calibrateDirection();
            }
            else if(timer == 62)
            {
                if(target) calibrateDirection();
                image_index = 6;
                xspeed = 6*image_xscale;
                if(target) xMemo = target.x;
                else xMemo = x+64*image_xscale;
                timer++;
            }
            else if(timer == 63)
            {
                image_index = 6;
                if(target) xMemo = target.x;
                if((sign(xMemo - x) != image_xscale &amp;&amp; abs(xMemo - x) &gt; 32) || checkSolid(image_xscale,0))
                {
                    timer++;
                    image_index = 0;
                    xspeed = sign(xspeed) * 1.5;
                }
            }
            else
            {
                image_index = 1;
                if(abs(xspeed) &gt; 1.5)
                {
                    xspeed = sign(xspeed) * 1.5;
                }
                else if(abs(xspeed) &gt; 0.05) xspeed -= 0.05*sign(xspeed);
                else
                {
                    if(target) calibrateDirection();
                    xspeed = 0;
                    timer = 0;
                    phase = 0;
                }
            }
        }
        else if(phase == -1) // shoot blades from floor
        {
            if(target) calibrateDirection();
            timer++;
            if(timer &lt; 40)
            {
                image_index = 2;
            }
            else if(timer == 40) // shoot blades
            {
                image_index = 3;
                playSFX(sfxTripleBlade);
                
                var bladenum = 3;
                var angle = 90-90*other.image_xscale;
                if(target) angle = point_direction(x+16*image_xscale,y,target.x,target.y);
                var angleDif = 10;
                if(overrideDifficultyMode == 0) bladenum = 2;
                else if(overrideDifficultyMode == 2)
                {
                    bladenum = 5;
                    angle -= angleDif*image_xscale;
                }
                
                repeat(bladenum)
                {
                    var bullet = instance_create(x+16*image_xscale,y,objBladeMan10Blade);
                    with(bullet)
                    {
                        dir = angle;
                        spd = 5;
                        bullet.contactDamage = 2+other.overrideDifficultyMode;
                        image_index = 16*dir/360;
                    }
                    angle += angleDif*image_xscale;
                }
            }
            else if(timer &lt; 42)
            {
                image_index = 3;
            }
            else if(timer &lt; 72)
            {
                image_index = 4;
            }
            else
            {
                image_index = 5;
                timer = 0;
                phase = 3;
                var angle = point_direction(x,y,x+48*image_xscale,yMemo-128*image_yscale);
                xspeed = cos(degtorad(angle))*5;
                yspeed = -sin(degtorad(angle))*5;
                grav = 0;
                xspdmemo = xspeed;
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objBladeMan10Blade) instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
