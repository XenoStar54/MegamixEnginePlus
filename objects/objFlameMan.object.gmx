<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFlameStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprFlameMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
pose = sprFlameStand
poseImgSpeed = 0.133333333333333
introType = 3;
contactDamage = 4
ground = 0
randomize()
phase = choose(0, 2, 2, 3)
timer = 0
shootAmount = 0
secondFlamePhase = 0
secondFireballPhase = 0
secondJumpPhase = 0
fireballID1 = 1203
fireballID2 = 1203
fireballID3 = 1203

jumprandom = 0

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[19];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Music
music = "Mega_Man_6.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 4);
enemyDamageValue(objSuperArmDebris, 4);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 0);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 4);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 4);
enemyDamageValue(objPharaohShot, 0); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 2);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 4);
enemyDamageValue(objLaserTrident, 0);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 2);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 0);

// MM11
enemyDamageValue(objBlockDropper, 2);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 4);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 0);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 0);

// Other
enemyDamageValue(objMagneticShockwave, 0);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if entityCanStep()
{
    if (isFight == 1)
    {
        var prevXspeed = xspeed
        grav = 0.20
        xspeed = prevXspeed
        switch phase
        {
            case 0:
                sprite_index = sprFlameJump
                if (timer == 0)
                {
                    calibrateDirection();
                    randomize()
                    yspeed = choose(-6.75, -6.45)
                    if (place_meeting(x, (y + yspeed), objSolid))
                        yspeed = 0
                    if instance_exists(objMegaman) &amp;&amp; jumprandom = 0
                        xspeed = arcCalcXspeed(yspeed, grav, x, y, sprite_get_xcenter_object(objMegaman), sprite_get_ycenter_object(objMegaman))
                    else
                        xspeed = (image_xscale * 2)
                }
                timer += 1
                if (place_meeting((x + xspeed), y, objSolid))
                {
                    xspeed *= -1
                    image_xscale *= -1
                }
                if (ground == 1 &amp;&amp; yspeed &gt;= 0)
                {
                    timer = 0
                    sprite_index = sprFlamePump
                    image_index = 0
                    image_speed = 0
                    playSFX(sfxKnightLand)
                    phase = 1
                    xspeed = 0
                }
                break
            case 1:
                if (timer &lt; 10)
                    sprite_index = sprFlamePump
                else
                    sprite_index = sprFlameStand
                image_index = 0
                image_speed = 0
                xspeed = 0
                timer += 1
                if (timer &gt;= 20)
                {
                    timer = 0
                    randomize()
                    if (secondJumpPhase == 0)
                    {
                        phase = choose(0, 0, 2, 2, 3)
                        jumprandom = choose(0,1,2)
                    }
                    else
                    {
                        phase = choose(2, 2, 3)
                        jumprandom = choose(0,1,2)
                    }
                    if (phase == 0)
                        secondJumpPhase = 1
                    else
                        secondJumpPhase = 0
                }
                break
           case 2:
                sprite_index = sprFlamePump
                if (timer &lt; 35)
                {
                    image_index = 0
                    image_speed = 0
                }
                xspeed = 0
                if (timer == 0)
                calibrateDirection();
                if (timer == 1)
                instance_create(x+8*image_xscale,y, objFlameFlame)
                if (timer == 10)
                instance_create(x+36*image_xscale,y, objFlameFlame)
                if (timer == 20)
                instance_create(x+76*image_xscale,y, objFlameFlame)
                if (timer == 30)
                instance_create(x+116*image_xscale,y, objFlameFlame)
                if (timer == 40)
                instance_create(x+156*image_xscale,y, objFlameFlame)
                if (timer == 50)
                instance_create(x+192*image_xscale,y, objFlameFlame)
                if (timer == 60)
                instance_create(x+220*image_xscale,y, objFlameFlame)
                
                if (timer &gt;= 35 &amp;&amp; timer &lt; 60)
                    image_speed = 0.5
                
                timer += 1
                if (timer &gt;= 60)
                {
                    timer = 0
                    randomize()
                    if (secondFlamePhase == 0)
                    {
                        phase = choose(0, 0, 2, 2, 3)
                        jumprandom = choose(0,1,2)
                    }
                    else
                    {
                        phase = choose(0, 0, 3)
                        jumprandom = choose(0,1,2)
                    }
                    if (phase == 2)
                        secondFlamePhase = 1
                    else
                        secondFlamePhase = 0
                }
                break
            case 3:
                sprite_index = sprFlameShoot
                xspeed = 0
                if (timer == 0)
                {
                    calibrateDirection();
                    image_index = 0
                    image_speed = 0.166666666666667
                }
                else if (timer &lt; 24)
                {
                    if (image_index &gt;= (image_number - 1))
                    {
                        image_index = (image_number - 1)
                        image_speed = 0
                    }
                    else
                        image_speed = 0.166666666666667
                }
                else if (timer == 24)
                {
                    ID = instance_create((x + (image_xscale * ((-sprite_get_xoffset(sprite_index)) + 34))), ((y - sprite_get_yoffset(sprite_index)) + 19), objFlameProjectile)
                    ID.image_xscale = image_xscale
                    if (!instance_exists(fireballID1))
                        fireballID1 = ID
                    else if (!instance_exists(fireballID2))
                        fireballID2 = ID
                    else if (!instance_exists(fireballID3))
                        fireballID3 = ID
                    playSFX(sfxFlameManFire)
                }
                else if (timer == 30)
                    image_speed = -0.166666666666667
                else if (timer &gt; 30 &amp;&amp; timer &lt; 48)
                {
                    if (image_index &lt;= (-image_speed))
                    {
                        image_index = 0
                        image_speed = 0
                    }
                    else
                        image_speed = -0.166666666666667
                }
                else if (timer &gt;= 48)
                {
                    shootAmount++
                    if (shootAmount &lt; 3)
                        timer = 0
                    else
                    {
                        timer = 0
                        shootAmount = 0
                        phase = 4
                    }
                    
                }
                timer += 1
                break
            case 4:
                sprite_index = sprFlameStand
                image_index = 0
                image_speed = 0
                xspeed = 0
                timer += 1
                if (timer &gt;= 10)
                {
                    timer = 0
                    randomize()
                    if (secondFireballPhase == 0)
                    {
                        phase = choose(0, 0, 2, 2, 3)
                        jumprandom = choose(0,1,2)
                    }
                    else
                    {
                        phase = choose(0, 2)
                        jumprandom = choose(0,1,2)
                    }
                    if (phase == 3)
                        secondFireballPhase = 1
                    else
                        secondFireballPhase = 0
                }
                break
        }
        
    }
}
else
    image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// restore time and destroy additional projectiles.


with (objFlameProjectile)
{   
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objFlameFlameParticle)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objFlameFlame)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
