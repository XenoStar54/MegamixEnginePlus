<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGalaxyMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprGalaxyManMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

contactDamage = 4;

pose = sprGalaxyManPose;
poseImgSpeed = 0.1;

image_index = 1;
image_speed = 0;

imgStart = 0;
imgEnd = 0;
imgMod = 5;

phase = 0;
attackTimer = 0;
timer = 0;

grav = 0.25;

colorTimer = 0;
colorMod = 8;
c = 0;
color[0] = global.nesPalette[27];
color[1] = global.nesPalette[37];
color[2] = global.nesPalette[35];
color[3] = global.nesPalette[34];
color[4] = global.nesPalette[32];
color[5] = global.nesPalette[31];
color[6] = global.nesPalette[29];

bh = noone;

lastX = 0;
lastY = 0;

// A weakness animation for Galaxy Man. False by default, but if you want him to play a special animation for Concrete Shot turn this to true.
weaknessAnim = false;

// healthbar
healthBarPrimaryColor[1] = 37;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_9.nsf";
musicType = "VGM";
musicTrackNumber = 16;
musicVolume = 1.4;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 2);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 4);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 0);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 3);
enemyDamageValue(objChillSpikeLanded, 4);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 4);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep()){

    colorTimer++;
    if (colorTimer mod colorMod == 0){
        c = (c + 1) mod array_length_1d(color);
        //show_debug_message(string(color[c]));
    }
    
    if (!(imgStart == 0 &amp;&amp; imgEnd == 0)){
        if (timer mod imgMod == 0){
            if (image_index &gt;= imgEnd) image_index = imgStart;
            else image_index++;
        }
    }

    if (isIntro){
    
        calibrateDirection();
    
    }

    if (isFight){
    
        switch(phase){
        
            case -1:
                xspeed = 0;
                if (timer &lt;= sprite_get_number(sprGalaxyManWeakness)*colorMod){
                    timer++;
                    if (timer mod colorMod == 0){
                        image_index++;
                    }
                }
                else{
                    sprite_index = sprGalaxyMan;
                    image_index = 0;
                    timer = 0;
                    phase = 0;
                }
            
            break;
        
            case 0: //wait
            
                if (timer &lt; 20){
                
                    if (timer &lt;= 0){
                        sprite_index = sprGalaxyMan;
                        image_index = 0;
                        imgStart = 0;
                        imgEnd = 0;
                        
                    }
                    
                    timer++;
                
                }
                else{ //choose phase
                
                    phase = choose(1, 2);
                    timer = 0;
                    attackTimer = 0;
                    calibrateDirection();
                
                }
            
            break;
            
            case 1: //rise up
            
                timer++;
                if (timer == 0){
                    image_index = 1;
                }
                else if (timer == 4){
                    image_index = 7;
                }
                else if (timer == 8){
                    image_index = 3;
                    imgStart = 4;
                    imgEnd = 5;
                    xspeed = image_xscale*4;
                    y -= sign(image_yscale)*2;
                    ground = false;
                }
                if (timer &gt; 8){
                    if (attackTimer == 0){
                        grav = 0;
                        yspeed -= sign(image_yscale)*0.05;
                        if (xcoll != 0){
                            attackTimer = 1;
                            xspeed = 0;
                            yspeed = 0;
                            imgStart = 0;
                            imgEnd = 0;
                            image_index = 1;
                            grav = 0.25;
                        }
                    }
                    else{
                        if (ground){
                            phase = 0;
                            timer = 0;
                            attackTimer = 0;
                        }
                    }
                }
            
            break;
            
            case 2: //jump up
                if (timer == 0){
                    xspeed = image_xscale*3;
                    yspeed = (image_yscale)*-7;
                    image_index = 1;
                    timer = choose(1, 2, 2, 2, 2); //determine whether or not black hole is shot
                }
                if (timer == 1){
                    if (round(yspeed) == 0){
                        image_index = 3;
                        imgStart = 4;
                        imgEnd = 5;
                        grav = 0;
                        timer = 0;
                        phase = 3;
                    }
                }
                if (timer == 2){
                    if (round(yspeed) == 0){
                        if (attackTimer &lt; 12){
                            xspeed = 0;
                            yspeed = 0;
                            grav = 0;
                            attackTimer++;
                            if (attackTimer == 4){
                                image_index = 6;
                                bh = instance_create(x, y, objGalaxyBH);
                                bh.yspeed = image_yscale*0.5;
                                bh.xspeed = sign(image_xscale);
                            }
                            if (attackTimer == 8){
                                image_index = 7;
                            }
                        }
                        else{
                            image_index = 3;
                            imgStart = 4;
                            imgEnd = 5;
                            grav = 0;
                            timer = 0;
                            phase = 3;
                            attackTimer = 0;
                            xspeed = image_xscale*3;
                        }
                    }
                }
            break;
            
            case 3:
                if (timer &lt; 135){
                    timer++;
                    if (xcoll != 0){ 
                        xspeed = -xcoll;
                        image_xscale *= -1;
                    }
                    yspeed = cos(timer/10)*-2;
                }
                else if (timer == 135){
                    if (instance_exists(bh) &amp;&amp; bh != noone){
                        lastX = x;
                        lastY = y;
                        timer = 0;
                        grav = 0;
                        imgStart = 0;
                        imgEnd = 0;
                        image_index = 3;
                        xspeed = 0;
                        yspeed = 0;
                        phase = 4;
                    }
                    else{
                        timer++;
                        grav = 0.25;
                        imgStart = 0;
                        imgEnd = 0;
                        image_index = 1;
                        xspeed = 0;
                        yspeed = 0;
                    }
                }
                else{
                    if (ground){
                        image_index = 0;
                        timer = 0;
                        attackTimer = 0;
                        phase = 0;
                    }
                }
            break;
            
            case 4:
            
                if (attackTimer == 0){
                    timer++;
                    if (timer == colorMod) image_index = 8;
                    else if (timer == colorMod*2){
                        if (bh)
                        {
                            x = bh.x;
                        }
                        // prevent Galaxy Man from going into walls and other strange stuff
                        if checkSolid(0,0)
                        {
                            if instance_exists(objMegaman)
                            {
                                if x &lt; objMegaman.x
                                {
                                    x += 10;
                                }
                                else
                                {
                                    x-= 10;
                                }
                            }   
                        }
                        visible = false;
                        yspeed = 20;
                        image_index = 9;
                        canDamage = false;
                    }
                    else if (timer == colorMod*3){
                        yspeed = 0;
                        visible = true;
                        calibrateDirection();
                        canDamage = true;
                    }
                    else if (timer == colorMod*4){
                        image_index = 2;
                        attackTimer = 1;
                        timer = 0;
                    }
                }
                if (attackTimer == 1){
                    if (timer &lt; 90){
                        timer++;
                        if (timer == 10) image_index = 0;
                        if (timer == 80) image_index = 2;
                    }
                    else{
                        attackTimer = 2;
                        timer = 0;
                    }
                }
                if (attackTimer == 2){
                    timer++;
                    if (timer == colorMod) image_index = 9;
                    else if (timer == colorMod*2){
                        x = lastX;
                        y = lastY;
                        visible = false;
                        image_index = 8;
                        canDamage = false;
                    }
                    else if (timer == colorMod*3){
                        visible = true;
                        calibrateDirection();
                        canDamage = true;
                    }
                    else if (timer == colorMod*4){
                        image_index = 3;
                        attackTimer = 0;
                        timer = 0;
                        phase = 3;
                        xspeed = image_xscale*3;
                        imgStart = 4;
                        imgEnd = 5;
                    }
                }
                
            break;
        
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index = sprGalaxyManWeakness) other.guardCancel = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with(objGalaxyBH)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
audio_stop_sound(sfxBlackHoleBomb);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (weaknessAnim){

    if (other.object_index == objConcreteShot &amp;&amp; iFrames &gt; 0)
    {
        imgStart = 0;
        imgEnd = 0;
        image_index = 0;
        grav = 0.25;
        yspeed = 0;
        xspeed = 0;
        phase = -1;
        timer = 0;
        sprite_index = sprGalaxyManWeakness;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (sprite_index == sprGalaxyMan){

    draw_sprite_ext(sprGalaxyManMask, image_index, x, y, image_xscale, image_yscale, image_angle, color[c], image_alpha);

}

if (sprite_index == sprGalaxyManPose){

    draw_sprite_ext(sprGalaxyManPoseMask, image_index, x, y, image_xscale, image_yscale, image_angle, color[c], image_alpha);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
