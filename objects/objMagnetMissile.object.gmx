<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagnetMissile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 2;

penetrate = 0;
pierces = 0;

isController = 0;

for (var i = 0; i &lt; 6; i++)
{
    controllerTargets[i] = noone;
    crosshairFrame[i] = 0;
}

// corner animation
hasTurnedCorner = false;

// Movement
timer = 0;
newAngle = 0;
angle = 0;
animFrame = 0;
spd = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_xscale == -1)
{
    image_xscale = 1;
    angle = 180;
}

image_yscale = 1;

event_inherited();

if (isController) // Code for the controller
{
    if (instance_exists(parent))
    {
        x = parent.x;
        y = parent.y;
    }
    else
    {
        instance_destroy();
        exit;
    }
    
    if (!global.frozen)
    {
        // Amount of targets - based on the chargeTimer
        var n = array_length_1d(controllerTargets);
        var maxTarget = min(parent.chargeTimer div 10, global.ammo[parent.playerID, global.weapon[parent.playerID]]);
        var removed = false;
        for (var i = 0; i &lt; n; i++)
        {
            if (instance_exists(controllerTargets[i]))
            {
                if (!controllerTargets[i].dead &amp;&amp; controllerTargets[i].canHit)
                    continue;
            }
            controllerTargets[i] = noone;
        }
        
        // Clean up spots in the array that contain IDs of dead/unhittable targets
        // And refill them with new targets
        var j = 0;
        for (var i = 0; j &lt; maxTarget &amp;&amp; i &lt; array_length_1d(controllerTargets); i++)
        {
            if (!controllerTargets[i])
            {
                event_user(0);
                controllerTargets[i] = target;
                crosshairFrame[i] = 0;
                if (target != noone)
                    j += 1;
            }
            else
                j += 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with (other)
{
    if (!global.frozen &amp;&amp; !global.switchingSections)
    {
        if(hasTurnedCorner)
        {
            if(image_index == 4 || image_index == 5)
            {
                image_index = 1;
                xspeed = 0;
                yspeed = -6;
            }
            else if(image_index == 6 || image_index == 7)
            {
                image_index = 2;   
                xspeed = 0;
                yspeed = 6;
            }
        }
    
        // to flip Magnet Missile properly, this must be included
        if (xspeed &gt; 0)
        {
            image_index = 0;
        }
        else if (xspeed &lt; 0)
        {
            image_index = 3;
        }
    
        if (!isController) // Code for the missiles
        {
            target = controllerTargets[0];
            if (!instance_exists(target))
            {
                event_user(0);
            }
            else if (target.dead)
            {
                event_user(0);
            }
            
            if (target != controllerTargets[0])
            {
                controllerTargets[0] = target;
                crosshairFrame[0] = 0;
            }
            timer++;
            
            if (instance_exists(target)) // Aiming
            {
                // check for x position being the same. The comparisons are to prevent minor positioning glitches
                if (x &gt; target.x - 3 &amp;&amp; x &lt; target.x + 3 &amp;&amp; xspeed != 0)
                {
                    // if target is above, turn the missile up and speed it up
                    if (target.y &lt;= y)
                    {
                        if(!hasTurnedCorner)
                        {
                            xspeed = 0;
                            if(image_xscale &lt; 0)
                            {
                                image_index = 4;
                            }
                            else
                            {
                                image_index = 5;
                            }
                            hasTurnedCorner = true;
                        }
                        else
                        {
                            image_index = 1;
                            xspeed = 0;
                            yspeed = -6;
                        }
                    }
                    // otherwise, turn missile down
                    else
                    {
                        if(!hasTurnedCorner)
                        {
                            xspeed = 0;
                            if(image_xscale &lt; 0)
                            {
                                image_index = 7;
                            }
                            else
                            {
                                image_index = 6;
                            }
                            hasTurnedCorner = true;
                        }
                        else
                        {
                            image_index = 2;   
                            xspeed = 0;
                            yspeed = 6;
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ammo[playerID, global.weapon[playerID]] &lt;= 0)
{
    with (objMagnetMissile)
    {
        if (isController)
        {
            instance_destroy();
        }
    }
    exit;
}

// for some reason, this weapon does not flip its image properly, most likely because it is built off of Homing Sniper. Extra images have been included in the spritesheet to account for this

var bulletLimit = 2;
var weaponCost = 2;
var action = 1; // 0 - no frame; 1 - shoot; 2 - throw
var willStop = 0; // If this is 1, the player will halt on shooting ala Metal Blade.

var chargeTime = 60; // Set charge time for this weapon
var initChargeTime = 20;

if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    i = fireWeapon(20, 0, objMagnetMissile, bulletLimit, weaponCost, action, willStop);
    if (i)
    {           
        i.xspeed = 4 * image_xscale;
        playSFX(sfxMissileLaunch);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("MAGNET MISSILE", global.nesPalette[19], global.nesPalette[13], sprWeaponIconsMagnetMissile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Targeting
target = noone;

var targetsToIgnore;
targetsToIgnore[0] = -1;

with (object_index)
{
    if (!isController)
    {
        if (instance_exists(controllerTargets[0]) &amp;&amp; !controllerTargets[0].dead &amp;&amp; controllerTargets[0].canHit)
        {
            controllerTargets[0].canHit *= -1;
            if (targetsToIgnore[0] != -1)
                targetsToIgnore[array_length_1d(targetsToIgnore)] = controllerTargets[0];
            else
                targetsToIgnore[0] = controllerTargets[0];
        }
    }
}

with (objDestroyableBlock)
{
    if (weakness != other.object_index)
        canHit *= -1;
}

if (isController)
{
    for (var i = 0; i &lt; array_length_1d(controllerTargets); i++)
    {
        if (instance_exists(controllerTargets[i]))
        {
            controllerTargets[i].canHit *= -1;
            if (targetsToIgnore[0] != -1)
                targetsToIgnore[array_length_1d(targetsToIgnore)] = controllerTargets[i];
            else
                targetsToIgnore[0] = controllerTargets[i];
        }
        else
        {
            controllerTargets[i] = noone;
        }
    }
}

setTargetStep();

for (var i = 0; i &lt; array_length_1d(targetsToIgnore); i++)
{
    with (targetsToIgnore[i])
    {
        canHit *= -1;
    }
}

if (!instance_exists(target) &amp;&amp; targetsToIgnore[0] != -1) // Find the least frequent target
{
    var n = array_length_1d(targetsToIgnore);
    if (n &gt; 0)
    {
        quickSort(targetsToIgnore);
        var min_count = 100;
        var curr_count = 1;
        for (var i = 1; i &lt; n; i++)
        {
            if (targetsToIgnore[i] == targetsToIgnore[i - 1])
                curr_count++;
            else
            {
                if (curr_count &lt; min_count)
                {
                    min_count = curr_count;
                    target = targetsToIgnore[i - 1];
                }
                curr_count = 1;
            }
        }
        
        // If last element is least frequent
        if (curr_count &lt; min_count)
        {
            min_count = curr_count;
            target = targetsToIgnore[n - 1];
        }
        if (!instance_exists(target))
        {
            if (!targetsToIgnore[n - 1].dead)
                target = targetsToIgnore[n - 1];
        }
        else if (target.dead)
        {
            if (!targetsToIgnore[n - 1].dead)
                target = targetsToIgnore[n - 1];
        }
    }
}

with (objDestroyableBlock)
{
    if (weakness != other.object_index)
        canHit *= -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
