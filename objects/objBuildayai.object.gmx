<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTopSolid</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this object will fly when shot, building the level on its way
event_inherited();

healthpointsStart = 256;
healthpoints = healthpointsStart;
blockCollision = 0;
grav = 0;
canDamage = false;
stopOnFlash = false;

//@cc: direction of flight in angle degrees
dir = 0;
// 0 - right
// 90 - up
// 225 - diagonal down left

// if builderFlag is positive, this buildayai will only trigger blocks with the same builderFlag
// if builderFlag is 0, this buildayai will trigger every block it meets
// if builderFlag is negative, this buildayai will trigger all blocks with a positive flag except the one that is a negative of his
builderFlag = 0;

hoverTimer = 0;
hoverPeriod = 60;
hoverAmplitudeX = 0;
hoverAmplitudeY = 8;
ellipseBias = 0;
windupTime = 10;

phase = 0;

spd = 0;
spdMin = 2;
spdMax = 4;
acc = 0.25;

moveToPointOnHit = 0;
moveToX = x;
moveToY = y;

respawnInViewTimer = 0;
respawnInViewTimerMax = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(phase == 0)
    {
        if(canDamage*contactDamage)
        {
            if(target)
            {
                var detected = false;
                
                // distance from point to line
                var x1 = bboxGetXCenter()+cos(degtorad(dir))*8*image_xscale;
                var y1 = bboxGetYCenter()-sin(degtorad(dir))*8*image_yscale;
                var x2 = bboxGetXCenter()+cos(degtorad(dir+180))*8*image_xscale;
                var y2 = bboxGetYCenter()-sin(degtorad(dir+180))*8*image_yscale;
                var x0 = bboxGetXCenterObject(target);
                var y0 = bboxGetYCenterObject(target);
                
                if((abs((x2-x1)*(y1-y0)-(x1-x0)*(y2-y1))/sqrt(power(x2-x1,2)+power(y2-y1,2))) &lt; detectionZone
                    &amp;&amp; abs(angle_difference(point_direction(bboxGetXCenter(),bboxGetYCenter(),x0,y0),
                    point_direction(0,0,cos(degtorad(dir))*8*image_xscale,
                    -sin(degtorad(dir))*8*image_yscale))) &lt; 90) detected = true;
                
                if(detected)
                {
                    event_user(0);
                }
            }
        }
        else
        {
            if(hoverPeriod != 0 &amp;&amp; (hoverAmplitudeX != 0 || hoverAmplitudeY != 0))
            {
                if(hoverAmplitudeX == 0) yspeed = cos(2*pi*hoverTimer/hoverPeriod)*hoverAmplitudeY*2*pi/hoverPeriod;
                else if(hoverAmplitudeY == 0) xspeed = cos(2*pi*hoverTimer/hoverPeriod)*hoverAmplitudeX*2*pi/hoverPeriod;
                else
                {
                    if(ellipseBias)
                    {
                        xspeed = sin(2*pi*hoverTimer/hoverPeriod)*hoverAmplitudeX*2*pi/hoverPeriod;
                        yspeed = cos(2*pi*hoverTimer/hoverPeriod)*hoverAmplitudeY*2*pi/hoverPeriod;
                    }
                    else
                    {
                        xspeed = cos(2*pi*hoverTimer/hoverPeriod)*hoverAmplitudeX*2*pi/hoverPeriod;
                        yspeed = sin(2*pi*hoverTimer/hoverPeriod)*hoverAmplitudeY*2*pi/hoverPeriod;
                    }
                }
                hoverTimer++;
            }
        }
    }
    else if(phase == 1)
    {
        if(hoverTimer &lt; windupTime) hoverTimer++;
        else
        {
            xspeed = cos(degtorad(dir))*spd;
            yspeed = -sin(degtorad(dir))*spd;
            if(spd &lt; spdMax) spd += acc;
            
            with(objBuildayaiBlock) if(!dead &amp;&amp; place_meeting(x,y,other))
            {
                if(other.builderFlag == 0 || builderFlag == 0
                    || (other.builderFlag &gt; 0 &amp;&amp; builderFlag == other.builderFlag)
                    || (other.builderFlag &lt; 0 &amp;&amp; builderFlag != -other.builderFlag))
                {
                    if(state == 0) event_user(0);
                }
            }
        }
    }
}
else if(!global.frozen &amp;&amp; dead &amp;&amp; !(-!global.timeStopped * stopOnFlash))
{
    if(respawnInViewTimerMax &gt; 0)
    {
        respawnInViewTimer++;
        if(respawnInViewTimer &gt; respawnInViewTimerMax)
        {
            if(respawnInViewTimer &gt; respawnInViewTimerMax+15)
            {
                dead = false;
                event_user(EV_SPAWN);
            }
            else
            {
                var particle = instance_create(bboxGetXCenter(), bboxGetYCenter(), objSingleLoopEffect);
                particle.image_speed = 0.3;
                particle.sprite_index = sprFlashTwinkle;
                particle.depth = depth-1;
                particle.direction = random(360);
                particle.speed = 1;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hoverTimer = 0;
phase = 0;
canHit = true;
spd = spdMin;
respawnInViewTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpoints = healthpointsStart;
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(phase == 0)
{
    phase = 1;
    xspeed = 0;
    yspeed = 0;
    hoverTimer = 0;
    canHit = false;
    playSFX(sfxCyberGabyoallBoost);
    if(moveToPointOnHit)
    {
        xspeed = (moveToX-x)/windupTime;
        yspeed = (moveToY-y)/windupTime;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
