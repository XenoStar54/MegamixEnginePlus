<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWilyMachine1A</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = 0;
healthpointsStart = 28;
healthpoints = healthpointsStart;
contactDamage = 4;
ground = false;
hasTriggeredFall = false;
introType = 0;
bossTriggered = true;
delayUse = false;
storeSpeed = 0;
hasFired = false;
grav = 0;
hitInvul = 0;

phase = 0;
timer = 0;
distance = 64;
backDistance = 64;
initPos = xstart;
attackInterval = 32;
dir = 0;
spd = 1/3;
gunDir = image_xscale;

dropItemAnyway = 0;

mask_index = mskWilyMachine1A;
spriteNormal = sprWilyMachine1A;
spriteIntro = sprWilySaucerMM1;
spriteIntro1 = sprWilyMachine1AIntro1;
spriteIntro2 = sprWilyMachine1AIntro2;
spriteIntro3 = sprWilyMachine1AIntro3;
spriteHurt = sprWilyMachine1AHurt;
spriteGun = sprWilyMachine1AGun;
gunPosX = 38;
gunPosY = 24;

myHurtbox = noone;
nextForm = objWilyMachine1B;
nextFormScript = scrNoEffect;
nextFormArgs = makeArray(0);
nextFormCode = "";

// Health Bars
healthBarPrimaryColor[1] = 18;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_1.nsf";
musicType = "VGM";
musicTrackNumber = 13;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objThunderBeam, 2);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 4);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (!global.frozen)
{
    if (startIntro)
    {
        calibrateDirection();
        x += image_xscale * view_wview;
        sprite_index = spriteIntro;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravStart;
        image_speed = 0.15;
        timer = 0;
        myHurtbox = instance_create(x,y,objWilyMachineHurtbox);
        myHurtbox.motherObject = self;
        canDamage = false;
    }
    else if (isIntro)
    {
        // custom intro:
        if (x != initPos &amp;&amp; !hasTriggeredFall)
        {
            if(abs(x - initPos) &gt; 2) x -= 2*image_xscale;
            else x = initPos;
        }
        else if (x == initPos || hasTriggeredFall)
        {
            if (!hasTriggeredFall)
            {
                hasTriggeredFall = true;
            }
            x = initPos;
            timer++;
            if(timer == 32)
            {
                sprite_index = spriteIntro1;
                image_speed = 0.3;
            }
            else if(timer == 64)
            {
                sprite_index = spriteIntro2;
            }
            else if(timer == 96)
            {
                sprite_index = spriteIntro3;
            }
            else if(timer &gt;= 128)
            {
                timer = 0;
                phase = 0;
                sprite_index = spriteNormal;
                canFillHealthBar = true;
                isIntro = false;
                blockCollision = blockCollisionStart;
                dir = image_xscale;
                canDamage = true;
                gunDir = image_xscale;
            }
        }
    }
}
if (entityCanStep())
{
    if(isFight)
    {
        // move
        var leftEdge = min(initPos-backDistance*image_xscale,initPos+distance*image_xscale);
        var rightEdge = max(initPos-backDistance*image_xscale,initPos+distance*image_xscale);
        if(x &lt;= leftEdge) dir = 1;
        else if(x &gt;= rightEdge) dir = -1;
        xspeed = spd*dir;
        if(target)
        {
            if(target.x &gt; x+gunPosX*image_xscale)gunDir = 1;
            else gunDir = -1;
        }
        // attack
        timer++;
        if(timer &gt;= attackInterval)
        {
            timer = 0;
            var bullet = instance_create(x+gunPosX*image_xscale+11*gunDir,y+(gunPosY-11)*image_yscale,objWilyMachine1AProjectile);
            bullet.grav = 0.25*image_yscale;
            bullet.image_xscale = image_xscale;
            bullet.image_yscale = image_yscale;
            bullet.yspeed = -4*image_yscale;
            with(bullet)
            {
                if(target) xspeed = xSpeedAim(x,y,target.x,target.y,yspeed,grav);
                else xspeed = image_xscale;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objWilyMachine1AProjectile) instance_destroy();
with(myHurtbox) instance_destroy();
if(nextForm != noone)
{
    musicStore = "";
    with(instance_create(x,y,nextForm))
    {
        image_xscale = other.image_xscale;
        image_yscale = other.image_yscale;
        distance = other.distance;
        backDistance = other.backDistance;
        initPos = other.initPos;
        dir = other.dir;
        spd = other.spd;
        respawn = false;
        music = "";
        itemDrop = other.itemDrop;
        useEndStageBehavior = other.useEndStageBehavior;
        musicStore = other.musicStore;
        musicTypeStore = other.musicTypeStore;
        musicLoopStartStore = other.musicLoopStartStore;
        musicLoopEndStore = other.musicLoopEndStore;
        musicLoopStore = other.musicLoopStore;
        musicVolumeStore = other.musicVolumeStore;
        musicTrackNumberStore = other.musicTrackNumberStore;
        elementName = other.elementName;
        elementCode = other.elementCode;
        if(other.nextFormScript != scrNoEffect) scriptExecuteNargs(other.nextFormScript,other.nextFormArgs);
        if(other.nextFormCode != "") stringExecutePartial(other.nextFormCode);
    }
    useEndStageBehavior = false;
    if(!dropItemAnyway) itemDrop = -1;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

iFrames = 4;

flashTimer = iFrames;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if(isFight)
        {
            if ((iFrames mod 4 &lt; 2) || !iFrames) // itsa me
            {
                sprite_index = spriteNormal;
            }
            else // im hit
            {
                sprite_index = spriteHurt;
            }
        }
        drawSelf();
        if(sprite_index == spriteNormal || sprite_index == spriteHurt)
        {
            draw_sprite_ext(spriteGun,0,x+gunPosX*image_xscale,y+gunPosY*image_yscale,gunDir,image_yscale,image_angle,c_white,image_alpha);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
