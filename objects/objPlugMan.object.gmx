<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlugJump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprChillMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprPlugIntro;
poseImgSpeed = 5 / 40;
contactDamage = 8;
ground = false;
attackTimer = 0;
jshock = 0
shock = 0
j3 = 0


// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 145;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;
ballImage = 0;
timescale = 1;
shootX = 0;

//speed
xspeed = 0
yspeed = 0

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

//@cc use this if you want to disable Chill Man's spread jump attack.
spreadAttack = false;

shotsToFire = 2; //@cc use this if you want to determine how many chill spikes chill man fires. more than 3 is excessive, as he alternates between firing at the floor and wall.
if (global.difficulty == DIFF_HARD)
{
    spreadAttack = true;
    shotsToFire = 3;
}
else
{
    spreadAttack = false;
    if (global.difficulty == DIFF_EASY)
        shotsToFire = 1;
    else
        shotsToFire = 2;
}

manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[17];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Music
music = "Mega_Man_9.nsf";
musicType = "VGM";
musicTrackNumber = 16;
musicVolume = 1.4;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 2);
enemyDamageValue(objBreakDash, 5);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objSakugarne, 3);
enemyDamageValue(objSuperArrow, 4);
enemyDamageValue(objWireAdapter, 12);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 3);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 5);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 3);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBlockDropper, 2);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(2, 2);
}
if (entityCanStep())
{
    if (isFight)
    {
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.25;
        }
        
        // resets the image timer if chill man ever changes poses
        if (pose != sprite_index)
        {
            pose = sprite_index;
            imageTimer = 0;
        }
        
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this is the animation system. don't touch this.
        imageTimer += 1;
        if (imageTimer &gt;= imageTimerMax &amp;&amp; image_index &lt; image_number - 1)
        {
            imageTimer = 0;
            image_index += 1;
        }
        if (imageTimer &gt;= imageTimerMax &amp;&amp; image_index == image_number - 1)
        {
            imageTimer = 0;
            image_index = imageNoMin;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(2, 5, 9);
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        // slow down chill man if he's in this phase and still moving.
        if (ground)
        {
            if (xspeed &gt; 0)
                xspeed = 0;
            else if (xspeed &lt; 0)
                xspeed = 0;
            if (abs(xspeed) &lt;= 0.25)
                xspeed = 0;
            
        }
        
        switch (phase)
        {
            case 0: // idle 
                calibrateDirection();
                sprite_index = sprPlugMan;
                if (attackTimer &gt;= 45)
                {
                    phase = 1;
                    attackTimer = 0;
                }
                break;
                
            case 1: // Press ground
            sprite_index = sprPlugPress;
            
            if (attackTimer &lt; 5)
            
            if (attackTimer == 6)
            {
            image_index = 0
            }
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 6)
                {
                    attackTimer = 0;
                    if(j3 == 1 || jshock == 1 || shock == 1) // 1 Content
                    phase = choose(2, 5, 9);
                    
                    if(j3 == 2) // j3 2
                    phase = choose(2, 9);
                    if(jshock == 2) // jshock 2
                    phase = choose(2, 5);
                    if(shock == 2) // shock 2
                    phase = choose(5, 9)
                    
                    if(!j3 &amp;&amp; !jshock &amp;&amp; !shock) //No Content
                    phase = choose(2,5,9)
                    
                    pBall = choose(0,1)
                    
                }
                break; 
                
            
                
            case 2: // Plug Shot
            sprite_index = sprPlugAttack;
            imageNoMin = 0;
            imageTimerMax = 3;
            if (attackTimer &lt; 10)
            
            
            if (attackTimer == 20)
            {}
            if (attackTimer == 20 &amp;&amp; pBall)
            {
            playSFX(sfxPlugShot);
            var i = instance_create(x + 25 * image_xscale, y + 10, objPlug);
                        i.image_xscale = image_xscale;
                        i.sprite_index = sprPlugBallboss;
                        i.timescale = timescale;
                        i.parent = id;
            }
            if (attackTimer == 30 &amp;&amp; !pBall)
            {
            playSFX(sfxPlugShot);
            var i = instance_create(x + 25 * image_xscale, y + 10, objPlug);
                        i.image_xscale = image_xscale;
                        i.sprite_index = sprPlugBallboss;
                        i.timescale = timescale;
                        i.parent = id;
            }
            if (attackTimer == 46 &amp;&amp; pBall)
            {
            playSFX(sfxPlugShot);
            var i = instance_create(x + 25 * image_xscale, y + 10, objPlug);
                        i.image_xscale = image_xscale;
                        i.sprite_index = sprPlugBallboss;
                        i.timescale = timescale;
                        i.parent = id;
            }
            
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 50)
                {
                    attackTimer = 0;
                    j3 = 0
                    jshock = 0
                    shock++;
                    phase = 0;
                    
                }
                break;
                
                
                case 5: // jump!  one two three!!!
                xspeed = image_xscale * 0.6;
                if (attackTimer &lt; 1)
                {
                    
                }
                if (attackTimer == 1)
                {
                    sprite_index = sprPlugJump;
                    delay = 3;
                    yspeed = -2.9;
                    xspeed = image_xscale * 0.6;
                    
                    
                }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 2)
                {
                    calibrateDirection();
                    yspeed = -2.9;
                    xspeed = image_xscale * 0.6;
                    attackTimer = 0;
                    phase = 6;
                
                }
                
                break;
                
                case 6: // jump!  one two three!!!
                if (attackTimer &lt; 5)
                {
                    
                }
                if (attackTimer == 6)
                {
                    sprite_index = sprPlugJump;
                    delay = 3;
                    yspeed = -2.9;
                    xspeed = 0.6 * image_xscale;
                    
                    
                }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 6)
                {
                    calibrateDirection();
                    yspeed = -2.9;
                    xspeed = 0.6 * image_xscale;
                    attackTimer = 0;
                    phase = 7;
                
                }
                
                break;
                
                case 7: // jump!  one two three!!!
                if (attackTimer &lt; 5)
                {
                    
                }
                if (attackTimer == 6)
                {
                    sprite_index = sprPlugJump;
                    delay = 4;
                    yspeed = -2.9;
                    xspeed = 0.6 * image_xscale;
                    
                    
                }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 6)
                {
                    attackTimer = 0;
                    j3++;
                    jshock = 0
                    shock = 0
                    phase = 0;               
                }
                
                break;
                
                
                case 9: // jump!  one two three!!!
                
                if (attackTimer &lt; 1)
                {
                    
                }
                if (attackTimer == 1)
                {
                if instance_exists(objMegaman){
                    sprite_index = sprPlugJump;
                    blockCollision = 0;
                    with(target){                        
                            with(other){
                                shootX = other.x;
                                yspeed = -6;
                                xspeed = xSpeedAim(x, y, shootX, y, yspeed, grav, 5);
                                image_xscale = sign(xspeed);
                                ground = false;
                            }             
                        }
                    }else{
                    phase = 999
                    }
                }
                
                if (attackTimer == 30)
                {
                blockCollision = 1;
                 sprite_index = sprPlugShot1;   
                }
                if (attackTimer == 32)
                {
                 sprite_index = sprPlugShot2;
                 playSFX(sfxPlugShot);
                      var i = instance_create(x + 16 * image_xscale, y + 10, objPlug);
                        
                        i.image_xscale = image_xscale;
                        i.sprite_index = sprPlugBallboss;
                        i.timescale = timescale;
                        i.parent = id;   
                }
                if (attackTimer == 34)
                {
                 sprite_index = sprPlugShot3;   
                }
                if (attackTimer == 36)
                {
                 sprite_index = sprPlugJump;   
                }
                
                if (ground)
                {   
                    image_index = 0
                    jshock++;
                    j3 = 0
                    shock = 0
                    phase = 10;
                    attackTimer = 0;
                }
                break;
 
             case 10: // Press ground
            sprite_index = sprPlugPress;
            image_index = 0
            
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            {}
            if (attackTimer == 10)
            {
            image_index = 0
            }
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 10)
                {
                    attackTimer = 0;
                    phase = 0;
                }
                break; 
        }
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objPlugShot)
    instance_destroy();
with (objPlug)
    instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
