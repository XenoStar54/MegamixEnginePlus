<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDrillun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>sprDrillunMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// I have updated Drillun to be usable in any direction by setting its image_angle

event_inherited();

respawn = true;

healthpointsStart = 3;
healthpoints = healthpointsStart;
contactDamage = 5;
contactStart = contactDamage;

isSolid = 2;

grav = 0;

// Enemy specific code
image_speed = 0.2;
alarmStop = 0;

phase = 0;
timer = 0;
detectionZone = 48;

drillSpd = 2.5;
returnSpd = 0.5;

stopReturnOnBlock = 0;
stopReturnOnOrigin = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// I have updated Drillun to be usable in any direction by setting its image_angle

event_inherited();

if (entityCanStep())
{
    if(phase == 0) // observe target
    {
        if(target)
        {
            var detected = false;
            
            // distance from point to line
            var x1 = bboxGetXCenter()+cos(degtorad(image_angle+270))*8*image_xscale;
            var y1 = bboxGetYCenter()-sin(degtorad(image_angle+270))*8*image_yscale;
            var x2 = bboxGetXCenter()+cos(degtorad(image_angle+270+180))*8*image_xscale;
            var y2 = bboxGetYCenter()-sin(degtorad(image_angle+270+180))*8*image_yscale;
            var x0 = bboxGetXCenterObject(target);
            var y0 = bboxGetYCenterObject(target);
            
            if((abs((x2-x1)*(y1-y0)-(x1-x0)*(y2-y1))/sqrt(power(x2-x1,2)+power(y2-y1,2))) &lt; detectionZone
                &amp;&amp; abs(angle_difference(point_direction(bboxGetXCenter(),bboxGetYCenter(),x0,y0),point_direction(0,0,cos(degtorad(image_angle+270))*8*image_xscale,-sin(degtorad(image_angle+270))*8*image_yscale))) &lt; 90) detected = true;
            
            if(detected)
            {
                phase = 1;
                
                xspeed = cos(degtorad(image_angle+270))*drillSpd*image_xscale;
                yspeed = -sin(degtorad(image_angle+270))*drillSpd*image_yscale;
            }
        }
    }
    else if(phase == 1) // drill
    {
        if(xcoll != 0 || ycoll != 0)
        {
            xspeed = 0;
            yspeed = 0;
            phase = 2;
            timer = 0;
        }
    }
    else if(phase == 2) // wait
    {
        timer++;
        if(timer &gt;= 21)
        {
            timer = 0;
            phase = 3;
            
            xspeed = cos(degtorad(image_angle+270 + 180))*returnSpd*image_xscale;
            yspeed = -sin(degtorad(image_angle+270 + 180))*returnSpd*image_yscale;
        }
    }
    else if(phase == 3) // return
    {
        if(stopReturnOnBlock) // stop when blocked by something
        {
            if(xcoll != 0 || ycoll != 0)
            {
                xspeed = 0;
                yspeed = 0;
                phase = 0;
            }
        }
        else
        {
            xspeed = cos(degtorad(image_angle+270 + 180))*returnSpd*image_xscale;
            yspeed = -sin(degtorad(image_angle+270 + 180))*returnSpd*image_yscale;
        }
        
        if(stopReturnOnOrigin) // stop when found origin
        {
            if(abs(xstart - x) &lt;= abs(xspeed)) x = xstart;
            if(abs(ystart - y) &lt;= abs(yspeed)) y = ystart;
            
            if(xstart == x &amp;&amp; ystart == y)
            {
                xspeed = 0;
                yspeed = 0;
                phase = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

phase = 0;
timer = 0;

// prevent being stuck in return phase
if(!stopReturnOnBlock &amp;&amp; !stopReturnOnOrigin) stopReturnOnOrigin = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
