<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFluorescentBulb</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0;
canHit = false;
isSolid = 1;
animTimer = 0;

despawnRange = -1;
respawnRange = -1;

grav = 0;
blockCollision = false;
bubbleTimer = -1;
timer = 0;
phase = 0; // 0: descending to ystart; 1: normal; 2: go back to section top

// @cc: platform modding values
// moveSpd: how quick the object goes when stepped on; negative values make it go the other way first
// initWait: how long the object initially waits before going
// pauseWait: how long the object waits before changing direction
// moveTime: how long the object moves up/down
// descendSpd: how quick the platform descends from/ascends to the ceiling; when negative, the anchor point is the floor instead
moveSpd = 0.75;
initWait = 12;
pauseWait = 28;
moveTime = 63;
descendSpd = 3;

// @cc: the way this gimmick is activated
// 0: on by default, no way to turn it off
// 1: turns on when certain sources of darkness are active and off when none are
// 2: turns on when associated switch is enabled and off when disabled
activationMethod = 1;
// if activation method isn't 0, it inverts the activation condition
invertActivationMethod = 0;

darknessSource[0] = obj100WattonVoid;
darknessSource[1] = objDarkness;

myFlag = 999;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    var pressed = false;
    with (prtEntity)
        if (blockCollision &amp;&amp; !dead)
            if (ground &amp;&amp; place_meeting(x, y + image_yscale, other))
                pressed = true;
    
    switch(phase)
    {
        case 0: // descending from ceiling
            visible = true;
            yspeed = sign(ystart - y)*abs(descendSpd);
            if(abs(ystart - y) &lt; abs(yspeed))
            {
                yspeed = ystart - y;
                phase = 1;
            }
            break;
        case 1: // move cyclically up and down
            if(pressed)
            {
                timer++;
                if(timer &lt; initWait) yspeed = 0;
                else if(timer &lt; initWait+moveTime) yspeed = moveSpd;
                else if(timer &lt; initWait+moveTime+pauseWait) yspeed = 0;
                else if(timer &lt; initWait+moveTime+pauseWait+moveTime) yspeed = -moveSpd;
                else if(timer &lt; initWait+moveTime+pauseWait+moveTime+pauseWait) yspeed = 0;
                else
                {
                    timer = initWait;
                    yspeed = moveSpd;
                }
            }
            else yspeed = 0;
            break;
        case 2: // retreat into ceiling
            yspeed = -descendSpd;
            if(y &lt; global.sectionTop &amp;&amp; descendSpd &gt; 0) event_user(0);
            else if(y &gt; global.sectionBottom &amp;&amp; descendSpd &lt; 0) event_user(0);
            break;
    }
    
    switch(activationMethod)
    {
        case 1: // on when darkness detected
            var isDark = 0;
            for(var i = 0; i &lt; array_length_1d(darknessSource); i++)
            {
                with(darknessSource[i]) if(image_alpha &gt; 0)
                {
                    isDark = 1;
                    i = array_length_1d(other.darknessSource);
                }
            }
            if(isDark xor invertActivationMethod)
            {
                if(phase == -1 || phase == 2) phase = 0;
            }
            else
            {
                if(phase != 2) phase = 2;
            }
            break;
        case 2: // follows switch state of its flag
            if(global.flag[myFlag] xor invertActivationMethod)
            {
                if(phase == -1 || phase == 2) phase = 0;
            }
            else
            {
                if(phase != 2) phase = 2;
            }
            break;
        default: // always on
            if(phase == -1 || phase == 2) phase = 0;
            break;
    }
    
    var animTable = makeArray(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 3, 0);
    animTimer = (animTimer + 1) mod (array_length_1d(animTable) * 4);
    image_index = animTable[animTimer div 4];
    
    isSolid = visible;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// platform setup
if(descendSpd == 0) descendSpd = 3;
if(descendSpd &gt; 0) y = global.sectionTop;
else y = global.sectionBottom;
visible = false;
animTimer = 0;
phase = -1;
timer = 0;
xspeed = 0;
yspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
