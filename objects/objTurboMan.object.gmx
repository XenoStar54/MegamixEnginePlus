<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTurboMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprChillMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

customPose = true;
hasTriggeredFall = false;
introType = 1;
contactDamage = 6;
ground = false;
attackTimer = 0;

suck = 0
sucks = 0
suckSpeed = 1.1;
cartTime = 0
cartTimeMax = 0
cart = 0
speedDown = 0
effect = 0

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 999;
phase = 1;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;


manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[2];
healthBarSecondaryColor[1] = global.nesPalette[34];

music = "MM7Boss.nsf";
musicType = "VGM";
musicTrackNumber = 0;
musicVolume = 1;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 4);
enemyDamageValue(objMagnetMissile, 0);
enemyDamageValue(objGeminiLaser, 4);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 0);

// MM8
enemyDamageValue(objHomingSniper, 2);

// MM9
enemyDamageValue(objConcreteShot, 0);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 4);

// MM10
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 1);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objGrabBuster, 4);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objIceWall, 4);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1.5, 1.5);
}
if (entityCanStep())
{
    
    // Fire Man's custom intro
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravAccel;
        calibrateDirection();
    }
    else if (isIntro)
    {
        // custom intro:
        if (attackTimer == 0) &amp;&amp; (introType == 1)
        {
            image_index = 8;
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            //gus Effect
            if (attackTimer == 45 || attackTimer == 51 || attackTimer == 57 || attackTimer == 80 || attackTimer == 86 || attackTimer == 92){
            gus = instance_create(x - (image_xscale * 18), y - 15, objTurbogus);
            gus.image_xscale = image_xscale;
            gus2 = instance_create(x - (image_xscale * 14), y - 17, objTurbogus);
            gus2.image_xscale = image_xscale;
            }         

            // since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            y = ystart;
            attackTimer++;
            if (attackTimer &lt; 8){
            image_index = 2;                
            }
            if (attackTimer == 2){            
            playSFX(sfxKnightLand)
            }  
                    
            if (attackTimer == 15)           
                image_index = 1;  
                      
            if (attackTimer == 45)        
                image_index = 2;                
            if (attackTimer == 48)            
                image_index = 1;
            if (attackTimer == 51)            
                image_index = 2;
            if (attackTimer == 54)            
                image_index = 1;
            if (attackTimer == 57)            
                image_index = 2;
            if (attackTimer == 60)            
                image_index = 1;
            
            if (attackTimer == 80)        
                image_index = 2;
            if (attackTimer == 83)            
                image_index = 1;
            if (attackTimer == 86)            
                image_index = 2;
            if (attackTimer == 89)            
                image_index = 1;
            if (attackTimer == 92)            
                image_index = 2;
            if (attackTimer == 95)            
                image_index = 1;
            
            if (attackTimer == 140)
            {
                image_speed = 0;
                isIntro = false;
                attackTimer = 0;
                blockCollision = blockCollisionStart;
                canFillHealthBar = true;
            }
        }
    
        
    }
    if (isFight)
    {
        // this sets up chill man's movement variables.
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.25;
        }
        
        if (suck)
        {
            with (objMegaman)
                    {
                        if (id == other.id)
                            continue;
                        if (!dead)
                        {
                            if (climbing)
                            {
                                continue;
                            }
                            
                            
                            with (other)
                            {
                                if (collision_rectangle(x, view_yview, x + image_xscale * view_wview, view_yview + view_hview, other.id, false, false))
                                {
                                    with (other)
                                    {
                                        shiftObject(-other.suckSpeed * other.image_xscale, 0, 1);
                                    }
                                }
                            }
                        }
                    }
        }
        else
        {}
        
        if(cart){
        cart = false
        playSFX(sfxTurbo, true);
        }
        
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(1,1.5,3, 4);
        }
        
        switch (phase)
        {
            case 0: // idle 
                image_index = 0
                
                if (attackTimer &gt;= 1)
                {
                    phase = 1                 
                    attackTimer = 0;
                }
                break;
                
           case 1: // Make Turbo Fire
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            if (attackTimer == 1){ 
            image_index = 3
            calibrateDirection();
            }
            if (attackTimer == 5)             
            image_index = 4
            if (attackTimer == 15)            
            image_index = 5
            if (attackTimer == 25)
            { 
            image_index = 6
            if (!instance_exists(objTurboFire))
                {
                    guard = 1;
                    var i;
                    for (i = 0; i &lt; 4; i += 1)
                    {
                        WS = instance_create(x, y, objTurboFire);
                        WS.cAngle = degtorad(90 * i);
                        WS.image_xscale = image_xscale;
                    }
                    playSFX(sfxSolarManSun);
                }
            }
            if (attackTimer == 30) 
            image_index = 7
            if (attackTimer == 60){                      
               yspeed = -7
               image_index = 8    
            }                     
            if (yspeed &gt;= 0 &amp;&amp; attackTimer &gt;= 61){
            pauseGravity = true
            phase = 2
            attackTimer = 0
            yspeed = 0
            }        
            
            break;
            
            case 2: // Shoot Turbo Fire
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            if (attackTimer == 15) 
            image_index = 9           
            if (attackTimer == 20){           
            image_index = 10
            with(objTurboFire)
            phase = 2
            firemask = instance_create(x + (image_xscale * 0), y, objTurboFireMask);
            firemask.image_xscale = image_xscale;
            }
                
            if (yspeed &gt;= 0 &amp;&amp; attackTimer &gt;= 80){
            pauseGravity = false
            image_index = 8
              if(ground){
                xspeed = 0
                yspeed = 0
                attackTimer = 0
                phase = 3
                
                }
            }        
            
            break;
            
            
                    
            case 3: // Sucks          
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            if (attackTimer == 1){ 
            image_index = 2
            playSFX(sfxKnightLand)
            }            
            if (attackTimer == 5)
            image_index = 1
            if (attackTimer == 45){ 
            image_index = 3
            }
            if (attackTimer == 50)             
            image_index = 4
            if (attackTimer == 55)            
            image_index = 5
            if (attackTimer == 65)            
            image_index = 1
            //AAAA
            if (attackTimer == 75){  
                suck = true     
                image_index = 2;    
                gus = instance_create(x - (image_xscale * 18), y - 15, objTurbogus);
                gus.image_xscale = image_xscale;
                gus2 = instance_create(x - (image_xscale * 14), y - 17, objTurbogus);
                gus2.image_xscale = image_xscale; 
                }           
            if (attackTimer == 78)            
                image_index = 1;
            if (attackTimer &gt;= 81)  
               if(sucks == 12){
               sucks = 0
               suck = false
               attackTimer = 0
               phase = 4
               }
               else{
               attackTimer = 74
               sucks++
               }
                         
               
            
            
            break;
            
            case 4: // Cart 
            if (attackTimer &gt;= 40 &amp;&amp; attackTimer &lt;=cartTimeMax){
            cartTime +=1
            if (!instance_exists(objTurbogus)){
            gus = instance_create(x - (image_xscale * 18), y + 8, objTurbogus);
            gus.image_xscale = image_xscale;
            gus2 = instance_create(x - (image_xscale * 14), y + 10, objTurbogus);
            gus2.image_xscale = image_xscale; 
            }
            }
            
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)           
            image_index = 2
            if (attackTimer == 5)           
            image_index = 1
            if (attackTimer == 10)           
            image_index = 2
            if (attackTimer == 15)           
            image_index = 1
            if (attackTimer == 20)           
            image_index = 2
            if (attackTimer == 25)           
            image_index = 1
            if (attackTimer == 35)           
            image_index = 11
            if (attackTimer == 40){
            cart = true
            sprite_index = sprTurboCart
            mask_index = sprTurboCartMask
            image_speed = 0.45
            cartTimeMax = choose(60,70,80,90,120)
            }
            if (attackTimer == cartTimeMax){
            stopSFX(sfxTurbo)
            xspeed = 7.5 * image_xscale;
            cart = false
            effect = true
            playSFX(sfxRushCycle1)
            }
            
            if (attackTimer &gt;= cartTimeMax &amp;&amp; effect){
            xd = (x - (10 * image_xscale))
                        if positionCollision(xd, (bbox_bottom + 1))
                        {
                            i = instance_create(xd, (bbox_bottom - 1), objSlideDust)
                            i.image_xscale = image_xscale
                            i.vspeed = -0.5
                            i.hspeed = ((-xspeed) / 8)
                        }
            }
            
            if ((bbox_left &lt;= view_xview + 64 &amp;&amp; /* image_xscale */ image_xscale == -1)
                    || (bbox_right &gt;= view_xview + view_wview - 64 &amp;&amp; /* image_xscale */ image_xscale == 1)
                    || (checkSolid(/* image_xscale */ image_xscale * 48, 0) || (xcoll * image_xscale &gt; 0)))
            {
            xspeed = 4.5 * image_xscale;
            sprite_index = sprTurboMan
            mask_index = sprChillMask
            image_speed = 0
            image_index = 12
            }
            
            if ((bbox_left &lt;= view_xview + 48 &amp;&amp; /* image_xscale */ image_xscale == -1)
                    || (bbox_right &gt;= view_xview + view_wview - 48 &amp;&amp; /* image_xscale */ image_xscale == 1)
                    || (checkSolid(/* image_xscale */ image_xscale * 32, 0) || (xcoll * image_xscale &gt; 0)))
            {
            xspeed = 2.5 * image_xscale;
            image_index = 1            
            }
            
            if ((bbox_left &lt;= view_xview + 32 &amp;&amp; /* image_xscale */ image_xscale == -1)
                    || (bbox_right &gt;= view_xview + view_wview - 32 &amp;&amp; /* image_xscale */ image_xscale == 1)
                    || (checkSolid(/* image_xscale */ image_xscale * 16, 0) || (xcoll * image_xscale &gt; 0)))
            {
            xspeed = 0;
            image_index = 0
            effect = false
            }
            
            if(xcoll != 0){
            sprite_index = sprTurboMan
            mask_index = sprChillMask
            image_speed = 0
            image_index = 0
            xspeed = 0;
            effect = false
            attackTimer = 140
            }
            
            
            
            
            
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 150)
            {
                    attackTimer = choose(0,34)
                    if(attackTimer == 0)
                    phase = 1;                    
                    calibrateDirection();
            }
            break;
        
        }   
      
      
    }
}
else
{ }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// guard if spinning
if (suck || sprite_index == sprTurboCart)
{
    other.guardCancel = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objKabatoncueMissile)
    instance_destroy();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
