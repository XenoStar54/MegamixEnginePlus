<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTomahawkMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskTomahawkMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
xOff = 0;
contactDamage = 4;
pose = sprTomahawkManPose;
poseImgSpeed = 1;
ground = false;
timer = 0;
hasTriggeredFall = false;
introType = 3;
bossTriggered = true;
phase = 0;
hasFired = false;
grav = 0.25;

moveTracker = -1;
previousMoveTracker = -2;

// Health Bar
healthBarPrimaryColor[1] = 14;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_6.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 2);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 2);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 4);
enemyDamageValue(objSearchSnake, 2);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1);

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 4);

// MM7
enemyDamageValue(objSlashClaw, 0);

// MM8
enemyDamageValue(objHomingSniper, 0);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSolarBlaze, 2);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 0);
enemyDamageValue(objTenguDash, 0);
enemyDamageValue(objTenguDisk, 0);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        phase = 0;
        timer = 0;
        moveTracker = -1;
        previousMoveTracker = -2;
    }
    else if(isFight)
    {
        if(sprite_index != sprTomahawkMan)
        {
            sprite_index = sprTomahawkMan;
            image_index = 0;
        }
        if(phase == 0) // rng next move
        {
            image_index = 0;
            calibrateDirection();
            var rng = choose(1,2,3);
            while(rng == moveTracker &amp;&amp; rng == previousMoveTracker) rng = choose(1,2,3);
            phase = rng;
            timer = 0;
            previousMoveTracker = moveTracker;
            moveTracker = rng;
        }
        else if(phase == 1) // feathers
        {
            timer++;
            if(timer &lt; 9)
            {
                image_index = 1;
                calibrateDirection();
            }
            else if(timer &lt; 13)
            {
                image_index = 2;
                calibrateDirection();
            }
            else if(timer &lt; 15)
            {
                image_index = 3;
                calibrateDirection();
            }
            else if(timer == 15)
            {
                image_index = 3;
                playSFX(sfxEnemyShoot);
                for(var i = 0; i &lt; 3; i++)
                {
                    var feather = instance_create(x+25*image_xscale,y-(8+i*2)*image_yscale,objTomahawkManFeather);
                    feather.image_xscale = image_xscale;
                    feather.xspeed = (2+i)*image_xscale;
                }
            }
            else if(timer &lt; 44)
            {
                image_index = 3;
            }
            else if(timer &lt; 45)
            {
                image_index = 1;
            }
            else if(timer &lt; 115)
            {
                image_index = 0;
                calibrateDirection();
            }
            else
            {
                timer = 0;
                phase = 0;
                calibrateDirection();
            }
        }
        else if(phase == 2) // tomahawk
        {
            timer++;
            if(timer &lt; 9)
            {
                image_index = 5;
                calibrateDirection();
            }
            else if(timer &lt; 13)
            {
                image_index = 6;
                calibrateDirection();
            }
            else if(timer &lt; 14)
            {
                image_index = 7;
                calibrateDirection();
            }
            else if(timer == 14)
            {
                image_index = 7;
                playSFX(sfxEnemyShoot);
                var tomahawk = instance_create(x,y,objTomahawkManFeather);
                tomahawk.sprite_index = sprTomahawkManTomahawk;
                tomahawk.image_speed = 0.3;
                tomahawk.image_xscale = image_xscale;
                tomahawk.image_yscale = image_yscale;
                tomahawk.grav = -0.05*image_yscale;
                tomahawk.xspeed = 4*image_xscale;
                tomahawk.yspeed = 0.5*image_yscale;
            }
            else if(timer &lt; 32)
            {
                image_index = 7;
            }
            else if(timer &lt; 84)
            {
                image_index = 0;
                calibrateDirection();
            }
            else
            {
                timer = 0;
                phase = 0;
                calibrateDirection();
            }
        }
        else if(phase == 3) // jump
        {
            xSpeedTurnaround();
            if(ground)
            {
                if(timer == 0)
                {
                    calibrateDirection();
                    timer++;
                    xspeed = 2*image_xscale;
                    yspeed = -image_yscale*choose(1.5,5,6.5);
                    image_index = 8;
                }
                else
                {
                    xspeed = 0;
                    calibrateDirection();
                    if(timer == 1) playSFX(sfxClamp);
                    timer++;
                    if(timer &lt; 6)
                    {
                        image_index = 4;
                    }
                    else if(timer &lt; 38)
                    {
                        image_index = 0;
                    }
                    else
                    {
                        timer = 0;
                        phase = 0;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objTomahawkManFeather)
{
    if(sprite_index == sprTomahawkManTomahawk) instance_create(x, y, objExplosion);
    instance_destroy();
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
