<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBusterRodGRodParts</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>mskBusterRodGRod</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 3;
grav = 0;
blockCollision = 0;
canHit = true;
penetrate = 1;
pierces = 2;
reflectable = 0;

// constants
moveSpeed = 7;
stopAtPlayer = true;

rod0Length = 24 * 4;
rod30Length = 21 * 8;
rod45Length = 16 * 8;

headImgIndex = 0;
headImgSpd = 0.2;
// variables
rodDir = 1;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{                      
    // covert 30 angles to the sprites's true angle of arctan(1/2)
    var m = image_angle mod 90;
    if (m == 30 || m == 60)
    {
        image_angle = (image_angle div 90) * 90;
        if (m == 30)
        { 
            image_angle += radtodeg(arctan(1/2));
        }
        else
        {
            image_angle += (90 - radtodeg(arctan(1/2)));
        }
    }
    
    // E X P A N D  D O N G
    image_xscale += moveSpeed * rodDir;
    if (image_angle mod 90 == 0)
    {
        if (image_xscale &gt;= rod0Length)
        {
            image_xscale = rod0Length;
            rodDir = -1;
        }
    }
    else if (image_angle mod 45 == 0)
    {
        if (image_xscale &gt;= rod45Length)
        {
            image_xscale = rod45Length;
            rodDir = -1;
        }
    }
    else
    {
        if (image_xscale &gt;= rod30Length)
        {
            image_xscale = rod30Length;
            rodDir = -1;
        }
    }
    
    // retract when solids are hit
    if (place_meeting(x, y, objSolid) || place_meeting(x, y, prtBossDoor)
        || place_meeting(x, y, objSpike))
    {
        rodDir = -1;
    }
    
    // retract if going straight and it's passed the player
    if (stopAtPlayer)
    {
        if (instance_exists(target))
        {
            if ((image_angle == 0 &amp;&amp; bbox_right &gt;= target.bbox_right)
                || (image_angle = 180 &amp;&amp; bbox_left &lt;= target.bbox_left))
            {
                rodDir = -1;
            }
        }
    }
    
    // destroy
    if (image_xscale &lt;= 0)
    {
        instance_destroy();
    }
    
    // animation
    headImgIndex += headImgSpd;
    if (headImgIndex &gt;= 2)
    {
        headImgIndex = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_GUARD
other.guardCancel = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw rod

image_yscale = 1 - 2 * (loopDegrees(image_angle) &gt; 90 &amp;&amp; loopDegrees(image_angle) &lt;= 270 // make shine always be on top/left
    &amp;&amp; !(loopDegrees(image_angle) == 270 &amp;&amp; parentXScale &gt; 0)); // don't flip when stabbing down and facing right

if (image_angle mod 90 == 0)
{
    // straight
    var i;
    for (i = 0; i &lt; image_xscale; i++)
    {
        draw_sprite_ext(sprite_index, 1, floor(x - i * cos(degtorad(image_angle + 180))), floor(y - i * sin(degtorad(image_angle))),
            1, image_yscale, image_angle, c_white, 1);
    }
    
    // head
    draw_sprite_ext(sprBusterRodGRodHead, headImgIndex div 1, floor(x + image_xscale * cos(degtorad(image_angle))), floor(y - image_xscale * sin(degtorad(image_angle))), 1, 1, image_angle, c_white, image_alpha);
}
else if (image_angle mod 45 == 0)
{
    // 45 diagonal
    for (var i = 0; i &lt;= image_xscale; i += 1.4142) // a^2 + b^2 = c^2
    {
        draw_sprite_ext(sprite_index, 2, floor(x + i * cos(degtorad(image_angle))), floor(y - i * sin(degtorad(image_angle))), 1, 1, image_angle - 45, c_white, image_alpha);
    }
    
    // head
    var xscale = 1 - 2 * (loopDegrees(image_angle) &gt; 90 &amp;&amp; loopDegrees(image_angle) &lt;= 270); 
    draw_sprite_ext(sprBusterRodGRodHead, 4 + headImgIndex div 1, floor(x + image_xscale * cos(degtorad(image_angle))), floor(y - image_xscale * sin(degtorad(image_angle))), xscale, 1, 0, c_white, image_alpha);
}
else
{
    // arctan(1/2) aka 26.56505 diagonal'
    for (i = 0; i &lt;= image_xscale; i += 1.118) // a^2 + b^2 = c^2
    {
        draw_sprite_ext(sprite_index, 1, floor(x + i * cos(degtorad(image_angle))), floor(y - i * sin(degtorad(image_angle))), 1, image_yscale, ((image_angle + 45) div 90) * 90, c_white, image_alpha);
    }
    
    // head
    var img = 2;
    if (loopDegrees(image_angle) &gt; 225 &amp;&amp; loopDegrees(image_angle) &lt; 315)
    {
        img = 6;
    }
    
    var xscale = 1 - 2 * (loopDegrees(image_angle) &gt; 90 &amp;&amp; loopDegrees(image_angle) &lt;= 270); 
    draw_sprite_ext(sprBusterRodGRodHead, img + headImgIndex div 1, floor(x + image_xscale * cos(degtorad(image_angle))), floor(y - image_xscale * sin(degtorad(image_angle))), xscale, 1, 0, c_white, image_alpha);
}

// draw head
//draw_sprite_ext(sprite_index, 0, floor(x + image_xscale * cos(degtorad(image_angle))), floor(y - image_xscale * sin(degtorad(image_angle))), 1, 1, 0, c_white, image_alpha);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
