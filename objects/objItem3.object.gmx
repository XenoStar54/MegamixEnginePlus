<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprItem3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 1;

contactDamage = 0;

penetrate = 0;
pierces = 0;

isSolid = 2;
blockCollision = 1;
doesTransition = 0;

// vars
timer = 0;
xSpd = 1;
ySpd = -0.5;
bounceSpd = -3.6;
climbing = false;
steppedOn = false;
wallDir = 0;
wallEntity = noone;
entityXOffset = 0;
entityYOffset = 0;
decreaseAmmoTimer = 0;
decreaseAmmoTimerMax = 26;

y = round(y);
image_speed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// snap to wall entity
if (instance_exists(wallEntity))
{
    var prevX = x;
    var prevY = y;
    x = wallEntity.x - entityXOffset;
    y = wallEntity.y - entityYOffset;
    
    // snap player to us when being moved by the wall
    with (parent)
    {
        if (ground &amp;&amp; collision_rectangle(bbox_left, bbox_top + 1, bbox_right, bbox_bottom + 1, other, false, false))
        {
            shiftObject(other.x - prevX, other.y - prevY, true);
        }
    }
}

// entity stuff
event_inherited();

// get new wall entity offset
if (instance_exists(wallEntity))
{
    entityXOffset = wallEntity.x - x;
    entityYOffset = wallEntity.y - y;
}

// behavior
if (!global.frozen)
{
    if (!climbing)
    {
        xspeed = xSpd * image_xscale;
        grav = gravAccel * image_yscale;
        
        // bouncing on ground
        if (ycoll != 0 &amp;&amp; sign(ycoll) == image_yscale)
        {
            yspeed = bounceSpd * sign(ycoll);
        }
        
        // start sticking to wall
        if (xcoll != 0)
        {
            climbing = true;
            xspeed = 0;
            yspeed = 0;
            grav = 0;
            wallDir = sign(xcoll);
            
            var list = collisionRectangleList(bbox_left + xcoll, bbox_top, bbox_right + xcoll, bbox_bottom, prtEntity, true, true)
            if (list != noone)
            {
                for (var i = 0; i &lt; ds_list_size(list); i++)
                {
                    var a = ds_list_find_value(list, i);
                    if (instance_exists(a))
                    {
                        if (a.isSolid == 1)
                        {
                            wallEntity = a;
                            entityXOffset = a.x - x;
                            entityYOffset = a.y - y;
                            break;
                        }
                    }
                }
                
                ds_list_destroy(list);
            }
        }
    }
    else
    {
        // climbing on wall
        var rise = !steppedOn;
        with (objMegaman)
        {
            if (ground &amp;&amp; collision_rectangle(bbox_left, bbox_top + image_yscale * 4, bbox_right, bbox_bottom + image_yscale * 4, other, false, false)
                &amp;&amp; ((image_yscale &gt; 0 &amp;&amp; bbox_bottom &lt;= other.bbox_top - other.yspeed)
                    || (image_yscale &lt; 0 &amp;&amp; bbox_top &gt;= other.bbox_bottom - other.yspeed)))
            {
                other.steppedOn = true; // L-LEWD!!!
                rise = true;
            }
        }
        
        if (rise)
        {
            yspeed = ySpd * image_yscale;
        }
        else
        {
            yspeed = -ySpd * image_yscale;
        }
        
        // don't go off walls
        
        // check for solid entities
        var b = false;
        var list = collisionRectangleList(bbox_left + wallDir * 4,
            bbox_top + sprite_height * sign(yspeed),
            bbox_right + wallDir * 4,
            bbox_bottom + sprite_height * sign(yspeed),
            prtEntity, true, true)
        if (list != noone)
        {
            for (var i = 0; i &lt; ds_list_size(list); i++)
            {
                var a = ds_list_find_value(list, i);
                if (instance_exists(a))
                {
                    if (a.isSolid == 1)
                    {
                        b = true;
                        break;
                    }
                }
            }
            
            ds_list_destroy(list);
        }
        
        // check static solids
        if (!place_meeting(x + wallDir, y + sprite_height * sign(yspeed), objSolid)
            &amp;&amp; !place_meeting(x + wallDir, y + sprite_height * sign(yspeed), objSpike)
            &amp;&amp; !place_meeting(x + wallDir, y + sprite_height * sign(yspeed), prtBossDoor)
            &amp;&amp; !b)
        {
            if (sign(yspeed) == -image_yscale)
            {
                // stay at top of wall edge so player can jump off safely
                yspeed = 0;
            }
            else
            {
                // delet this
                event_user(EV_DEATH);
                instance_create(x, y, objExplosion);
            }
        }
        
        // update wall entity
        var list = collisionRectangleList(bbox_left + wallDir * 4, bbox_top,
            bbox_right + wallDir * 4, bbox_bottom,
            prtEntity, true, true)
        if (list != noone)
        {
            for (var i = 0; i &lt; ds_list_size(list); i++)
            {
                var a = ds_list_find_value(list, i);
                if (instance_exists(a))
                {
                    if (a.isSolid == 1 &amp;&amp; (!instance_exists(wallEntity)
                            || (a != wallEntity &amp;&amp; ds_list_find_index(list, wallEntity) &lt; 0)))
                    {
                        wallEntity = a;
                        entityXOffset = a.x - x;
                        entityYOffset = a.y - y;
                        
                        break;
                    }
                }
            }
            
            ds_list_destroy(list);
        }
        else
        {
            // no wall entity anymore
            wallEntity = noone;
        }
    }
    
    // drain energy
    decreaseAmmoTimer++;
    if (decreaseAmmoTimer &gt;= decreaseAmmoTimerMax)
    {
         decreaseAmmoTimer = 0;
         global.ammo[playerID, global.weapon[playerID]] -= 1;
        if (global.ammo[playerID, global.weapon[playerID]] &lt;= 0)
        {
            global.ammo[playerID, global.weapon[playerID]] = 0;
        }   
    }
    
    // delete
    if (global.ammo[playerID, global.weapon[playerID]] &lt;= 0
        || (climbing
            &amp;&amp; (ycoll != 0|| (!checkSolid(wallDir, 0, false, true)
                &amp;&amp; !instance_exists(wallEntity)))))
    {
        event_user(EV_DEATH);
        instance_create(x, y, objExplosion);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_WEAPON_CONTROL
var _canSpawn = global.ammo[playerID, global.weapon[playerID]] &gt; 0;
with (objItem3)
{
    if (playerID == other.playerID)
    {
        _canSpawn = false;
    }
}

if (_canSpawn)
{
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
    {
        var i = fireWeapon(3, -4, objItem3, 1, 0, 2, 0);
        with (i)
        {
            xspeed = xSpd * image_xscale;
            yspeed = bounceSpd * image_yscale;
            
            // shunt out of wall by the shortest distance
            var prevX = x;
            var timeout = 0;
            while (checkSolid(0, 0, false, true))
            {
                x -= sign(xspeed);
                timeout++;
                if (timeout &gt;= view_wview[0])
                {
                    instance_destroy();
                    break;
                }
            }
            
            var newX = x;
            x = prevX;
            
            var prevY = y;
            timeout = 0;
            while (checkSolid(0, 0, false, true))
            {
                y -= sign(yspeed);
                timeout++;
                if (timeout &gt;= view_hview[0])
                {
                    if (instance_exists(id))
                    {
                        instance_destroy();
                    }
                    
                    break;
                }
            }
            
            var newY = y;
            y = prevY;
            
            if (abs(newX - prevX) &lt;= abs(newY - prevY))
            {
                x = newX;
            }
            else
            {
                y = newY;
            }
        } 
    }
}

scrBusterControl(false, true, !_canSpawn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_WEAPON_SETUP
weaponSetup("ITEM-3", make_color_rgb(216, 40, 0), make_color_rgb(248, 248, 248), sprWeaponIconsItem3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
