<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprReboundStriker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 1;

image_speed = 0;

penetrate = 0;
pierces = 0;

dir = 0;
spd = 3;
spdInc = 0.5;
blockCollision = 1;

buffer = 0;

trackDamage = 1;
dmgInc = 0;
grav = 0;
gravMemo = 1;

hitCount = 5;
myAngle = 90-90*image_xscale;
animTimerA = 0;
animTimerB = 0;
animMode = 0;

aim = 0;
flashTimer = 4;
spinTimer = 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(hitCount &lt;= 0)
    {
        if(xcoll != 0 || ycoll != 0)
        {
            event_user(10);
            playSFX(sfxBallBounce);
            xspeed = 0;
            yspeed = 0;
        }
        else if(checkSolid(xspeed,yspeed,1,1) &amp;&amp; place_meeting(x+xspeed,y+yspeed,objSlopeR))
        {
            event_user(10);
            playSFX(sfxBallBounce);
            xspeed = 0;
            yspeed = 0;
        }
    }
    else
    {
        xspeed = cos(degtorad(myAngle))*spd;
        yspeed = -sin(degtorad(myAngle))*spd;
        if(xcoll != 0 || ycoll != 0)
        {
            if(hitCount &gt; 0) hitCount--;
            if(sign(ycoll) == -sign(gravMemo) &amp;&amp; target &amp;&amp; aim) // hit ceiling and target exists, AIM AT THEM
            {
                myAngle = point_direction(x,y,bboxGetXCenterObject(target),bboxGetYCenterObject(target));
            }
            else
            {
                if(ycoll != 0) // hit floor/ceiling, rebound keeping xspeed
                {
                    myAngle = point_direction(0,0,xspeed,-yspeed);
                }
                else // hit wall, rebound
                {
                    if(yspeed == 0) myAngle += 180-45*sign(xspeed)*sign(gravMemo);
                    else myAngle = point_direction(0,0,-xspeed,yspeed);
                }
            }
            trackDamage += dmgInc;
            spd += spdInc;
            playSFX(sfxBallBounce);
        }
        else if(checkSolid(xspeed,yspeed,1,1))
        {
            if(place_meeting(x+xspeed,y+yspeed,objSlopeR)) // slope detected
            {
                if(hitCount &gt; 0) hitCount--;
                trackDamage += dmgInc;
                spd += spdInc;
                playSFX(sfxBallBounce);
                var detectedSlope = instance_place(x+xspeed,y+yspeed,objSlopeR);
                if((detectedSlope.sprite_index == sprSlopeR &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0) || (detectedSlope.sprite_index == sprSlopeL &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0)) // right bottom slope
                {
                    /*
                         | /
                      --- /
                         /
                    reflection angle = slope angle + 90
                    output angle = input angle + (input angle - slope angle)*2
                    0 + (0-135)*2 = -270
                    270 + (270-135)*2 = 540
                    315 + (315-135) = 315
                    */
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (45+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeR &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0) || (detectedSlope.sprite_index == sprSlopeL &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0)) // left bottom slope
                {
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (135+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeR &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0) || (detectedSlope.sprite_index == sprSlopeL &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0)) // right top slope
                {
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (315+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeR &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0) || (detectedSlope.sprite_index == sprSlopeL &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0)) // left top slope
                {
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (225+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeRLong &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0) || (detectedSlope.sprite_index == sprSlopeLLong &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0)) // right bottom long slope
                {
                    /*
                    same formula but now angles are trickier
                    using trigonometry,
                      A = 1, B = 2, C = sqrt(5)
                      sin(alpha) = A/C =&gt; sin(alpha) = 1/sqrt(5)
                    therefore
                      alpha = asin(1/sqrt(5))
                      alpha ~ 26.56505117707798546204977698246
                    */
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (26.56505117707798546204977698246+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeRLong &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0) || (detectedSlope.sprite_index == sprSlopeLLong &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &gt; 0)) // left bottom long slope
                {
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (116.56505117707798546204977698246+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeRLong &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0) || (detectedSlope.sprite_index == sprSlopeLLong &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0)) // right top long slope
                {
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (296.56505117707798546204977698246+90))*2;
                }
                else if((detectedSlope.sprite_index == sprSlopeRLong &amp;&amp; detectedSlope.image_xscale &lt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0) || (detectedSlope.sprite_index == sprSlopeLLong &amp;&amp; detectedSlope.image_xscale &gt; 0 &amp;&amp; detectedSlope.image_yscale &lt; 0)) // left top long slope
                {
                    var prevAngle = myAngle;
                    myAngle = prevAngle + (prevAngle - (206.56505117707798546204977698246+90))*2;
                }
            }
        }
        xspeed = cos(degtorad(myAngle))*spd;
        yspeed = -sin(degtorad(myAngle))*spd;
    }
    contactDamage = max(1,floor(trackDamage));
    
    // animate
    if(hitCount &lt;= 1) animMode = 1;
    else animMode = 0;
    animTimerA+=(1/flashTimer);
    animTimerB+=(1/spinTimer);
    image_index = (floor(animTimerB) mod 2) + (floor(animTimerA) mod 2)*2 + animMode*4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
{
    a = fireWeapon(18, 0, objReboundStriker, 2, 1.5, 2, 1);
    if (a)
    {
        playSFX(sfxBallBounce);
        a.myAngle = 180*(image_xscale &lt; 0) - yDir*45*image_xscale;
        a.image_xscale = image_xscale;
        a.image_yscale = image_yscale;
        a.gravMemo = gravDir;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("REBOUND STRIKER", global.nesPalette[4], global.nesPalette[31], sprWeaponIconsReboundStriker);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
instance_create(x,y,objExplosion);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
blockCollision = 0;
image_speed = 0;
grav = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead){

    draw_sprite(sprite_index, image_index, x, y);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
