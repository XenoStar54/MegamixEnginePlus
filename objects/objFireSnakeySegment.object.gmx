<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFireSnakeyBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 6;

respawn = false;
respawnRange = -1;
despawnRange = -1;
itemDrop = -1;

blockCollision = false;
grav = 0;
bubbleTimer = -1;
//noFlicker = true;

dieToSpikes = false;
isTargetable = false;

// variables
parent = noone;
follow = false;
distance = 0;
followDelay = 0;
followXSpeed = 0;
followYSpeed = 0;
followGrav = 0;
timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if (entityCanStep())
{
    image_xscale = parent.image_xscale;
    if (!follow)
    {
        // wiggle time
        y = parent.y + distance;
        x = parent.centerX + (parent.wiggleWidth / 2) * cos(degtorad(((y - parent.riseHeight) / parent.wiggleHeight) * 360 + parent.wiggleOffset + 180 * (image_xscale == -1))); 
        
        // splash (only when not jumping)
        var c1 = collision_line(bbox_left, y, bbox_right, y, objSpike, false, false);
        var c2 = collision_line(bbox_left, yprevious, bbox_right, yprevious, objSpike, false, false);
        var proceed = instance_exists(c1) ^^ instance_exists(c2); // XOR OPERATOR FOR THE WIN
        if (!proceed)
        {
            // search for damage spikes
            c1 = collision_line(bbox_left, y, bbox_right, y, objDamageSpike, false, false);
            c2 = collision_line(bbox_left, yprevious, bbox_right, yprevious, objDamageSpike, false, false);
            proceed = instance_exists(c1) ^^ instance_exists(c2); // XOR OPERATOR FOR THE WIN
        }
        
        if ((y &lt; parent.submergeHeight || yprevious &lt; parent.submergeHeight) &amp;&amp; proceed)
        {
            if (instance_exists(c2))
            {
                c1 = c2;
            }
            
            var s = instance_create(x, c1.bbox_top, objSlideDust);
            s.sprite_index = sprFireSnakeySplash;
            s.image_yscale = sign((c1.bbox_bottom + c1.bbox_top) / 2 - y);
            s.imgSpd = 1/6;
            s.alarm[0] = (1/s.imgSpd) * s.image_number;
            
            playSFX(sfxSolarBlazeSmall);
        }
    }
    else
    {
        // choo choo
        if (timer == followDelay)
        {
            xspeed = followXSpeed;
            yspeed = followYSpeed;
            grav = followGrav;
            timer++;
        }
        else if (timer &gt; followDelay)
        {
            xspeed = followXSpeed;
            
            // turning animation
            var a = radtodeg(arctan(-yspeed / abs(xspeed))); // angle of movement
            image_index = clamp(((90 + 45/2) - a) div 45, 0, 4);
            
            // finished jump
            if (parent.grav != followGrav
                &amp;&amp; y &gt;= parent.submergeHeight + sprite_get_yoffset(sprite_index)
                &amp;&amp; yspeed &gt; 0 &amp;&amp; y &gt; yprevious)
            {
                y = parent.submergeHeight + sprite_get_yoffset(sprite_index);
                xspeed = 0;
                yspeed = 0;
                grav = 0;
                followXSpeed = 0;
                followYSpeed = 0;
                followGrav = 0;
                timer = 0;
                follow = 0;
                image_index = 0;
            }
        }
        else
        {
            timer++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_REFLECT
other.guardCancel = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
