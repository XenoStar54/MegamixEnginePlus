<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprYellowDevil</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set up to be MM1's devil
// technically editable, but good luck figuring it out :v

event_inherited();

blockCollision = false;
healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprYellowDevil;
visible = false;
canHit = false;
canDamage = false;
contactDamage = 4;
bulletDmg = 4;
bulletSpd = 4;
ground = false;
introType = 2;
grav = 0;
phase = 0;
timer = 0;
blobSelector = 0;
initX = x;
oldX = x;
initY = y;

blobHeight[0] = 24;
blobHeight[1] = 8;
blobHeight[2] = 40;
blobHeight[3] = -8;
blobHeight[4] = 8;
blobHeight[5] = 24;
blobHeight[6] = -8;
blobHeight[7] = -24;
blobHeight[8] = 40;
blobHeight[9] = 24;
blobHeight[10] = 8;
blobHeight[11] = -24;
blobHeight[12] = -8;
blobHeight[13] = 24;
blobHeight[14] = -8;
blobHeight[15] = 8;
blobHeight[16] = -24;
blobHeight[17] = 40;
blobHeight[18] = 8;

blobDest[0] = 24;
blobDest[1] = 24;
blobDest[2] = 24;
blobDest[3] = 24;
blobDest[4] = 8;
blobDest[5] = 8;
blobDest[6] = 8;
blobDest[7] = 8;
blobDest[8] = -8;
blobDest[9] = -8;
blobDest[10] = -8;
blobDest[11] = -8;
blobDest[12] = -8;
blobDest[13] = -24;
blobDest[14] = -24;
blobDest[15] = -24;
blobDest[16] = -24;
blobDest[17] = -24;
blobDest[18] = -40;

eyePosBaseX = 12;
eyePosBaseY = -12;
eyePosMaxOffset = 15;
eyePosAngleRestriction = 45;
eyePosOffsetRestriction = 3;
eyePosMaxRandomizeTimes = 1;
eyeGenerated = 0;
shotDelay = 10;
shotFrame0 = 5;
shotFrame1 = 5;
shotFrame2 = 64;
hitInvun = 120;

//@cc time between blob spawns
interval = 25;

//@cc speed at which blobs go
blobVel = 5;

// Health Bar
healthBarPrimaryColor[1] = 18;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_1.nsf";
musicType = "VGM";
musicTrackNumber = 13;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 0);
enemyDamageValue(objThunderBeam, 4);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 2);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 4);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 4);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 2);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 2);

// MMI

// MMII
enemyDamageValue(objSakugarne, 3);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 4);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 2);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (isFight == true)
    {
        grav = 0;
        if(phase == 0) // set yourself up
        {
            eyeGenerated = 0;
            sprite_index = sprYDeye;
            visible = false;
            timer = 0;
            blobSelector = 0;
            image_xscale = sign(x - (view_xview + view_wview/2));
            phase = 1;
        }
        else if(phase == 1) // make blobs
        {
            visible = false;
            timer++;
            if(timer &gt;= interval)
            {
                timer = 0;
                var blob = instance_create(view_xview+(view_wview*(image_xscale &lt; 0)), initY+blobHeight[blobSelector], objYDblob);
                blob.image_xscale = image_xscale;
                blob.spd = abs(blobVel);
                blob.destX = initX+image_xscale*blobDest[blobSelector];
                blob.myBlobID = blobSelector;
                blobSelector++;
                if(blobSelector == array_length_1d(blobHeight))
                {
                    blobSelector = 0;
                    phase = 2;
                    timer = 0;
                    image_xscale *= -1;
                }
            }
        }
        else if(phase == 2) // get all blobs
        {
            var check = true;
            with(objYDblob)
            {
                if(phase != 2)check = false;
            }
            if(check)
            {
                phase = 3;
                var dist = 0;
                if(eyePosOffsetRestriction != 0)dist = irandom_range(0,floor(eyePosMaxOffset/eyePosOffsetRestriction))*eyePosOffsetRestriction;
                else dist = random_range(0,eyePosMaxOffset);
                var angle = 0;
                if(eyePosOffsetRestriction != 0)angle = irandom(floor(360/eyePosAngleRestriction))*eyePosAngleRestriction;
                else angle = random(360);
                x = initX + eyePosBaseX*image_xscale + cos(degtorad(angle))*dist;
                y = initY + eyePosBaseY - sin(degtorad(angle))*dist;
            }
        }
        else if(phase == 3) // open eye and shoot
        {
            timer++;
            if(timer &lt; shotDelay)
            {
                visible = false;
                canHit = false;
            }
            else if(timer &lt; shotDelay+shotFrame0) // 5 // 5 // 63
            {
                visible = true;
                image_index = 0;
                canHit = true;
            }
            else if(timer &lt; shotDelay+shotFrame0+shotFrame1)
            {
                image_index = 1;
            }
            else if(timer == shotDelay+shotFrame0+shotFrame1)
            {
                eyeGenerated++;
                image_index = 2;
                playSFX(sfxEnemyShootClassic);
                var bullet = instance_create(x,y,objEnemyBullet);
                bullet.contactDamage = bulletDmg;
                bullet.sprite_index = sprYDbullet;
                if(instance_exists(target))with(bullet)
                {
                    var angle = point_direction(spriteGetXCenter(), spriteGetYCenter(), spriteGetXCenterObject(target), spriteGetYCenterObject(target));
                    xspeed = cos(degtorad(angle)) * other.bulletSpd;
                    yspeed = -sin(degtorad(angle)) * other.bulletSpd;
                }
                else
                {
                    bullet.xspeed = image_xscale * bulletSpd;
                }
            }
            else if(timer &lt; shotDelay+shotFrame0+shotFrame1+shotFrame2)
            {
                image_index = 2;
            }
            else if(timer &lt; shotDelay+shotFrame0+shotFrame1+shotFrame2+shotFrame1)
            {
                image_index = 1;
            }
            else if(timer &lt; shotDelay+shotFrame0+shotFrame1+shotFrame2+shotFrame1+shotFrame0)
            {
                image_index = 0;
            }
            else if(timer == shotDelay+shotFrame0+shotFrame1+shotFrame2+shotFrame1+shotFrame0)
            {
                visible = false;
                canHit = false;
                iFrames = 0;
                if(eyeGenerated &lt; eyePosMaxRandomizeTimes)
                {
                    timer = 0;
                    phase = 2;
                }
            }
            else
            {
                eyeGenerated = 0;
                oldX = initX;
                var newX = view_xview + view_wview/2;
                newX += abs(initX - (view_xview + view_wview/2))*image_xscale;
                initX = newX;
                x = initX;
                
                phase = 4;
                timer = 0;
            }
        }
        else if(phase == 4) // move
        {
            visible = false;
            timer++;
            if(timer &gt;= interval)
            {
                timer = 0;
                with(objYDblob)with(other)
                {
                    if(other.y == initY+blobHeight[blobSelector] &amp;&amp; other.x == oldX-image_xscale*blobDest[blobSelector])
                    {
                        other.phase = 3;
                        other.image_xscale = image_xscale;
                        other.destX = initX+image_xscale*blobDest[blobSelector];
                        other.myBlobID = blobSelector;
                    }
                }
                blobSelector++;
                if(blobSelector == array_length_1d(blobHeight))
                {
                    blobSelector = 0;
                    phase = 2;
                    timer = 0;
                    image_xscale *= -1;
                }
            }
        }
    }
    else
    {
        visible = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = initX;
y = initY;
event_inherited();
with (objYDblob)instance_destroy();
with (objEnemyBullet)instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
