<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAchievementGetPopup</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawCompleteness = 0;
drawSpd = 1;
idleTimer = 0;
idleMax = 45;
phase = 0;
textWidth = 0;
textSpd = 1;
text = "ACHIEVEMENT GET!";

posLatch = 0;
if(instance_exists(objMegaman) &amp;&amp; objMegaman.y &lt; view_yview + view_hview/2) posLatch = 1;

playSFX(sfxUnlocked);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview;
y = view_yview;

if(true)
{
    if(phase == 0) // appear
    {
        if(drawCompleteness &lt; string_length(text) + 4) drawCompleteness += drawSpd;
        else
        {
            drawCompleteness = string_length(text) + 4;
            if(textWidth &lt; string_length(text)) textWidth += textSpd;
            else
            {
                textWidth = string_length(text);
                phase = 1;
            }
        }
    }
    else if(phase == 1) // allow people to read the popup
    {
        idleTimer++;
        if(idleTimer &gt; idleMax) phase = 2;
    }
    else if(phase == 2) // disappear
    {
        if(textWidth &gt; 0) textWidth -= textSpd;
        else
        {
            drawCompleteness -= drawSpd;
            if(drawCompleteness &lt;= 0) instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var drawPosX = view_xview + view_wview/2 - 4 - (string_length(text)+4)*4;
var drawPosY = view_yview + 8;
if(posLatch) drawPosY = view_yview + view_hview - 32;

// horizontally wiping bar
// if phase is less than 2, draw from left
// if phase is 2, draw until right
// that way bar will wipe itself from left to right, both on appearing and disappearing

draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_white);

if(phase &lt; 2)
{
    for(var i = 0; i &lt; drawCompleteness; i++)
    {
        draw_sprite(sprite_index,0,drawPosX+i*8,drawPosY);
        draw_sprite(sprite_index,0,drawPosX+i*8,drawPosY+16);
        var subImg = 1;
        if(i == 0 || i == drawCompleteness - 1) subImg = 0;
        draw_sprite(sprite_index,subImg,drawPosX+i*8,drawPosY+8);
    }
    
    if(floor(textWidth) &gt; 0)
    {
        draw_text(drawPosX+16,drawPosY+8,string_copy(text,1,floor(textWidth)));
    }
}
else
{
    for(var i = string_length(text)+4-drawCompleteness; i &lt; string_length(text)+4; i++)
    {
        draw_sprite(sprite_index,0,drawPosX+i*8,drawPosY);
        draw_sprite(sprite_index,0,drawPosX+i*8,drawPosY+16);
        var subImg = 1;
        if(i == 0 || i == string_length(text)+4 - 1) subImg = 0;
        draw_sprite(sprite_index,subImg,drawPosX+i*8,drawPosY+8);
    }
    
    if(floor(textWidth) &gt; 0)
    {
        draw_text(drawPosX+16+8*(string_length(text)-floor(textWidth)),drawPosY+8,string_copy(text,(string_length(text)-floor(textWidth))+1,string_length(text)));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
