<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBusterRodG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprCutMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

customPose = true;
contactDamage = 4;

// Healthbar colours
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 40;

// @cc whether buster rod g lives with 1 health and jump off stage when defeated
escapeOnDefeat = true;

// Music
music = "WilyTowerBossTheme.vgm"
musicType = "VGM"
musicTrackNumber = 0;
musicVolume = 1;
musicLoopSecondsStart = 0;
musicLoopSecondsEnd = 0;

// enemy variables
phase = 0;
subPhase = 0;
nextPhase = 1;
timer = 0;
counter = 0;
data = 0;
aimAngle = 0;
rod = noone;
clones = ds_list_create();

parentXScale = 1;

imgIndex = 0;
imgSpd = 0.17;

screenOffset = 56;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 2);

// mm1
enemyDamageValue(objRollingCutter, 3);
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objHyperBomb, 8);
enemyDamageValue(objFireStorm, 1);
enemyDamageValue(objThunderBeam, 1);

// mm2
enemyDamageValue(objAirShooter, 4);
//enemyDamageValue(objAtomicFire1, 1);
//enemyDamageValue(objAtomicFire2, 3);
//enemyDamageValue(objAtomicFire3, 9);
enemyDamageValue(objBubbleLead, 4);
enemyDamageValue(objCrashBomber, 1);
enemyDamageValue(objLeafShield, 1);
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objQuickBoomerang, 2);
stopOnFlash = false;

// mm3
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 8);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objNeedleCannon, 2);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objShadowBlade, 1);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objTopSpin, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(clones);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (startIntro)
    {
        imgIndex = 2; // fall with arms up
        visible = true;
        calibrateDirection();
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        grav = 0;
        y -= view_hview[0];
    }
    else if (isIntro)
    {
        switch (phase)
        {
            // falling into the screen
            case 0:
                imgIndex = 2;
                y += 4;
                grav = 0;
                if (y &gt;= ystart)
                {
                    y = ystart;
                    imgIndex = 0;
                    phase++;
                }
                
                break;
            
            // pose
            case 1:
                timer++;
                switch (timer div 4)
                {
                    // animation
                    case 0: imgIndex = 0; break;
                    
                    // SPEEN
                    case 1: imgIndex = 15; break;
                    case 2: imgIndex = 16; break;
                    case 3: imgIndex = 17; break;
                    case 4: imgIndex = 18; break;
                    case 5: imgIndex = 15; break;
                    case 6: imgIndex = 16; break;
                    case 7: imgIndex = 17; break;
                    case 8: imgIndex = 18; break;
                    case 9: imgIndex = 15; break;
                    case 10: imgIndex = 16; break;
                    case 11: imgIndex = 17; break;
                    case 12: imgIndex = 18; break;
                    
                    // put down pole
                    case 13: imgIndex = 19; break;
                    case 14: imgIndex = 3; break;
                    case 15: imgIndex = 3; break;
                    case 16: imgIndex = 0; break;
                    
                    // end
                    default:
                        timer = 0;
                        phase = 0;
                        
                        isIntro = false;
                        canFillHealthBar = true;
                        grav = gravStart;
                        blockCollision = blockCollisionStart;
                        break;
                }
                
                break;
        }
    }
    
    if (isFight)
    {
        switch (phase)
        {
            // stand and block projectiles
            case 0:
                calibrateDirection();
                
                counter++;
                
                switch (subPhase)
                {
                    // stand still and guard
                    case 0:
                        if (counter &gt;= 180)
                        {
                            counter = 0;
                            timer = 0;
                            phase = nextPhase;
                        }               
                        else if (instance_exists(target))
                        {
                            // block projectiles
                            if (global.keyShootPressed[target.playerID])
                            {
                                subPhase++;
                            }
                        }
                        
                        imgIndex = 0;
                        
                        break;
            
                    // spin staff
                    case 1:
                        imgIndex += 0.2;
                        if (imgIndex &lt; 20 || imgIndex &gt;= 22)
                        {
                            imgIndex = 20;
                        }
                        
                        timer++;
                        if (timer &gt;= 60)
                        {
                            timer = 0;
                            imgIndex = 0;
                            subPhase = 0;
                        }
                        
                        break;
                }
                
                break;
            
            // jab forward
            case 1:
                if (timer == 0 &amp;&amp; timer == 0)
                {
                    calibrateDirection();
                    
                    // pick amount of attacks
                    if (counter == 0)
                    {
                        data = irandom_range(3, 6);
                    }
                }
                
                if (timer &lt; 10)
                {
                    imgIndex = 3;
                    timer++;
                    if (timer == 10)
                    {
                        rod = instance_create(x + 21 * image_xscale, y + 5, objBusterRodGRod);
                        rod.image_angle = (image_xscale &lt; 0) * 180;
                        rod.parentXScale = image_xscale;
                    }
                }
                else
                {
                    // wait until rod is done extending
                    if (instance_exists(rod))
                    {
                        imgIndex = 4;
                    }
                    else
                    {
                        timer++;
                        if (timer == 11)
                        {
                            counter++;
                            
                            // end
                            if (counter &gt;= data)
                            {
                                timer = 0;
                                counter = 0;
                                data = 0;
                                phase = 0;
                                nextPhase = 2; // do airborn jabs after guarding again
                            }
                        }
                        else
                        {
                            // cooldown
                            if (timer &gt;= 35)
                            {
                                timer = 0;
                            }
                        }
                    }
                }
                
                break;
            
            // jump and do air jabs
            case 2:
                switch (subPhase)
                {
                    // jump into the air
                    case 0:
                        image_xscale = 1 - 2 * (x &gt; view_xview[0] + view_wview[0] / 2);
                        yspeed = ySpeedAim(y, y - 65, grav);
                        xspeed = xSpeedAim(x, y, x + 48 * image_xscale, y - 64, yspeed, grav);
                        imgIndex = 2;
                        subPhase++;
                        
                        break;
                    
                    // stop at peak of jump
                    case 1:
                        if (yspeed &gt;= 0)
                        {
                            grav = 0;
                            yspeed = 0;
                            xspeed = 0;
                            subPhase++;
                        }
                        
                        break;
                    
                    // attack
                    case 2:
                        if (timer == 0)
                        {
                            // decide number of attacks
                            if (counter == 0)
                            {
                                data = irandom_range(3, 6);
                            }
                            
                            // set aim
                            calibrateDirection();
                            if (instance_exists(target))
                            {
                                aimAngle = point_direction(x, y, target.x, target.y);
                                
                                // round to the nearest angle that's a multiple of 15
                                var b = aimAngle;
                                if (b mod 15 * 15 &gt; 15)
                                {
                                    b = b div 15 * 15 + 15;
                                }
                                else
                                {
                                    b = b div 15 * 15;
                                }
                                
                                // push out of invalid angles
                                if (b mod 90 == 15 || b mod 90 == 75)
                                {
                                    if (aimAngle &lt; b)
                                    {
                                        b -= 15;
                                    }
                                    else
                                    {
                                        b += 15;
                                    }
                                }
                                
                                // restrict directions we can aim at
                                b = loopDegrees(b);
                                if (withinDegreeRange(0, false, 180, false, b))
                                {
                                    b = 180 * (image_xscale &lt; 0);
                                }
                                
                                aimAngle = b;
                            }
                            else
                            {
                                aimAngle = 270 + 45 - 90 * (image_xscale &lt; 0);
                                imgIndex = 9;
                            }
                        }
                        
                        if (timer &lt; 10)
                        {
                            // ready-ing sprite
                            var sx = x;
                            var sy = y;
                            if (aimAngle == 270)
                            {
                                imgIndex = 13;
                                sx = 6 * image_xscale;
                                sy = 16;
                            }
                            else if (aimAngle mod 90 == 0)
                            {
                                imgIndex = 5;
                                sx = 17 * image_xscale;
                                sy = -3;
                            }
                            else if (aimAngle mod 45 == 0)
                            {
                                imgIndex = 9;
                                sx = 14 * image_xscale;
                                sy = 17;
                            }
                            else if (aimAngle == 180 + 30 || aimAngle == 360 - 30)
                            {
                                imgIndex = 7;
                                sx = 17 * image_xscale;
                                sy = 13;
                            }
                            else if (aimAngle == 270 - 30 || aimAngle == 270 + 30)
                            {
                                imgIndex = 11;
                                sx = 6 * image_xscale;
                                sy = 17;
                            }
                            
                            timer++;
                            if (timer == 10)
                            {
                                imgIndex++;
                                rod = instance_create(x + sx, y + sy, objBusterRodGRod);
                                rod.image_angle = aimAngle;
                                rod.parentXScale = image_xscale;
                                rod.rod0Length *= 2;
                                rod.stopAtPlayer = false;
                            }
                        }
                        else
                        {
                            if (!instance_exists(rod))
                            {
                                timer++;
                                
                                if (timer == 11)
                                {
                                    counter++;
                                    
                                    // end
                                    if (counter &gt;= data)
                                    {
                                        timer = 0;
                                        counter = 0;
                                        data = 0;
                                        subPhase++;
                                    }
                                }
                                else
                                {
                                    // cooldown
                                    if (timer &gt;= 35)
                                    {
                                        timer = 0;
                                    }
                                }
                            }
                        }
                
                        break;
                    
                    // fall down
                    case 3:
                        grav = gravStart;
                        imgIndex = 2;
                        if (ground)
                        {
                            imgIndex = 0;
                            subPhase = 0;
                            phase++;
                        }
                        
                        break;
                }
                
                break;
            
            // shadow clone jutsu
            case 3:
                switch (subPhase)
                {
                    // jump into position
                    case 0:
                        data = y;
                        
                        var tx = x;
                        var ty = y - 80;
                        if (x &gt; view_xview[0] + view_wview[0] / 2)
                        {
                            tx = view_xview[0] + view_wview[0] - screenOffset;
                        }
                        else
                        {
                            tx = view_xview[0] + screenOffset;
                        }
                        
                        yspeed = ySpeedAim(y, ty - 1, grav);
                        xspeed = xSpeedAim(x, y, tx, ty, yspeed, grav);
                        
                        image_xscale = sign(xspeed);
                        if (image_xscale == 0)
                        {
                            calibrateDirection();
                        }
                        
                        imgIndex = 2;
                        
                        subPhase++;
                        
                        break;
                    
                    // stop at the target position
                    case 1:
                        if (yspeed &gt;= 0)
                        {
                            yspeed = 0;
                            xspeed = 0;
                            grav = 0;
                            image_xscale = 1 - 2 * (x &gt; view_xview[0] + view_wview[0] / 2);
                            imgIndex = 0;
                            subPhase++;
                        }
                        
                        break;
                    
                    // shadow clones
                    case 2:
                        var next = ds_list_empty(clones);
                        if (!next)
                        {
                            var clone = ds_list_find_value(clones, ds_list_size(clones) - 1);
                            if (instance_exists(clone))
                            {
                                if (clone.phase &gt;= 3)
                                {
                                    next = true;
                                }
                            }
                        }
                        
                        timer++;
                        next = next || (timer &gt;= 45 &amp;&amp; counter &lt; 5);
                        
                        if (next)
                        {
                            timer = 0;
                            
                            if (counter &lt; 5)
                            {
                                var clone = instance_create(x, y, objBusterRodGShadowClone);
                                clone.sprite_index = sprite_index;
                                clone.image_index = 2;
                                clone.image_xscale = image_xscale;
                                clone.grav = gravStart;
                                clone.gravStart = gravStart;
                                
                                clone.groundTargetY = data;
                                
                                // spread out clone landing spots
                                var prevClone = noone;
                                if (ds_list_size(clones) &gt; 1)
                                {
                                    prevClone = ds_list_find_value(clones, ds_list_size(clones) - 1);
                                }
                                
                                do
                                {
                                    clone.groundTargetX = x + irandom_range(16, 16 + (view_wview[0] - screenOffset * 2 - 32)) * image_xscale;
                                }
                                until (!instance_exists(prevClone) || abs(clone.groundTargetX - prevClone.groundTargetX) &gt;= 48)
                                
                                // end target
                                if (x &gt; view_xview[0] + view_wview[0] / 2)
                                {
                                    clone.endTargetX = view_xview[0] + screenOffset;
                                }
                                else
                                {
                                    clone.endTargetX = view_xview[0] + view_wview[0] - screenOffset;
                                }
                                
                                clone.endTargetY = y;
                                
                                ds_list_add(clones, clone);
                                
                                counter++;
                                if (counter == 5)
                                {
                                    // move to new position
                                    if (x &gt; view_xview[0] + view_wview[0] / 2)
                                    {
                                        x = view_xview[0] + screenOffset;
                                    }
                                    else
                                    {
                                        x = view_xview[0] + view_wview[0] - screenOffset;
                                    }
                                    
                                    image_xscale = -image_xscale;
                                }
                            }
                            else
                            {
                                // destroy clones
                                for (var i = 0; i &lt; ds_list_size(clones); i++)
                                {
                                    with (ds_list_find_value(clones, i))
                                    {
                                        instance_destroy();
                                    }
                                }
                                
                                ds_list_clear(clones);
                                
                                // next
                                counter = 0;
                                data = 0;
                                grav = gravStart;
                                imgIndex = 2;
                                subPhase++;
                            }
                        }
                        
                        break;
                    
                    // fall back to the ground
                    case 3:
                        if (ground)
                        {
                            subPhase = 0;
                            phase = 0;
                            nextPhase = 1;
                            imgIndex = 0;
                        }
                        
                        break;
                }
                
                break;
            
            // escape after defeat
            case 4:
                switch (subPhase)
                {
                    // kneel until boss fight is over (multiple bosses
                    case 0:
                        imgIndex = 23;
                        
                        timer++;
                        if (timer &gt;= 120)
                        {
                            timer = 0;
                            subPhase++;
                        }
                        
                        break;   
                    
                    // jump away
                    case 1:
                        imgIndex = 24;
                        xspeed = 0;
                        yspeed = -5;
                        blockCollision = false;
                        grav = 0;
                        
                        if (bbox_bottom &lt; view_yview[0])
                        {
                            // reset
                            phase = 0;
                            subPhase = 0;
                            nextPhase = 1;
                            imgIndex = 0;
                            yspeed = 0;
                            xspeed = 0;
                            
                            // real death
                            wasKilled = true;
                            active = false;
                            if (destroyOnDeath)
                            {
                                instance_destroy();
                            }
                        }
                        break;
                }
                
                break;
        }
    }   
}

image_index = imgIndex div 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_GUARD

// reflect projectiles
if (imgIndex &gt;= 20 &amp;&amp; imgIndex &lt; 22)
{
    if (collision_rectangle(x + 13 * image_xscale, bbox_top, x + 13 + 7, bbox_bottom, other, true, false))
    {
        other.guardCancel = 4;
    }
}


if (other.object_index == objAtomicFire)
{
    switch (other.sprite_index)
    {
        case sprAtomicFire1:
            global.damage = 1; break;
        case sprAtomicFire2:
            global.damage = 3; break;
        case sprAtomicFire3:
            global.damage = 9; break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_DEATH: escapeOnDefeat &amp; projectile deletion
var prevDoD = destroyOnDeath;
if (escapeOnDefeat)
{
    // set to escape phase
    phase = 4;
    subPhase = 0;
    timer = 0;
    counter = 0;
    data = 0;
    grav = gravStart;
    xspeed = 0;
    yspeed = 0;
    canHit = false;
    canDamage = false;
    
    // non-leathal death event
    doPlayerExplosion = false;
    destroyOnDeath = false;
}

event_inherited();

if (escapeOnDefeat)
{
    destroyOnDeath = prevDoD;
    
    wasKilled = false;
    active = true;
    healthpoints = 1;
    playSFX(sfxEnemyHit);
}

// delete projectiles
with (objEnemyBullet)
{
    instance_destroy();
}

with (objBusterRodGShadowClone)
{
    instance_destroy();
}

with (objBusterRodGRod)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EV_HURT: escape on defeat
event_inherited();

if (escapeOnDefeat &amp;&amp; healthpoints &lt;= 1)
{
    global.damage -= 1 - healthpoints; // lower damage for the damage popup
    healthpoints = 1;
    
    event_user(EV_DEATH);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// floor position of sprite so it always lines up with the staff
var pX = x;
var pY = y;
x = floor(x);
y = floor(y);

event_inherited();

x = pX;
y = pY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
