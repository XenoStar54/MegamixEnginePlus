<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGelApocalypse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 0;
blockCollision = 0;
grav = 0;
despawnRange = 64;

penetrate = 3;
pierces = 2;

phase = 0;
// held, wave, needles, swarm
timer = 0;
timerMax = 90;

selectedAttack = choose(0,1,2);
// wave, needles, swarm

latchedTarget = noone;
subPhase = 0;
hitCounter = 0;

timeout = 300;

distX = 0;
distY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(phase == 0)
{
    if(!instance_exists(parent))
    {
        instance_destroy();
        exit;
    }

    image_xscale = parent.image_xscale;
    x = parent.x + image_xscale*distX;
    y = parent.y + image_yscale*distY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(phase == 0) // held
    {
        if(!instance_exists(parent))
        {
            instance_destroy();
            exit;
        }
        else
        {
            image_xscale = parent.image_xscale;
            x = parent.x + image_xscale*distX;
            y = parent.y + image_yscale*distY;
            parent.isShoot = 6;
            parent.shootTimer = 0;
            
            timer++;
            if(timer &lt; 3) image_index = 0;
            else if(timer &lt; 6) image_index = 2;
            else if(timer &lt; 9) image_index = 0;
            else if(timer &lt; 12) image_index = 3;
            else if(timer &lt; (timerMax-5)) image_index = 0;
            else if(timer &lt; timerMax) image_index = 1;
            else
            {
                timer = 0;
                selectedAttack = (selectedAttack+1) mod 3;
                image_index = 1;
            }
            
            if(!global.keyShoot[playerID] || parent.isHit) // launch selected attack
            {
                parent.isShoot = 2;
                parent.shootTimer = 0;
                switch(selectedAttack)
                {
                    case 0: // wave
                        x = parent.x+16*image_xscale;
                        y = parent.y;
                        image_yscale = image_yscale;
                        phase = 1;
                        timer = 0;
                        timerMax = 5;
                        sprite_index = sprGelApocalypseWave;
                        image_index = 0;
                        break;
                    case 1: // needles
                        grav = 0.2*image_yscale;
                        xspeed = image_xscale*2;
                        yspeed = -3*image_yscale;
                        image_index = 0;
                        timer = 0;
                        timerMax = 30;
                        sprite_index = sprGelApocalypseSmall;
                        canDamage = 0;
                        phase = 2;
                        break;
                    case 2: // swarm
                        instance_destroy();
                        for(var i = -1; i &lt; 2; i++) for(var j = -2; j &lt; 2; j++)
                        {
                            var blob = instance_create(x+i*32,y+j*32,objGelApocalypse);
                            blob.image_xscale = image_xscale;
                            blob.image_yscale = image_yscale;
                            blob.parent = parent;
                            blob.playerID = playerID;
                            blob.timerMax = timerMax;
                            blob.phase = 3;
                            blob.sprite_index = sprGelApocalypseSmall;
                            blob.grav = 0.2*image_yscale;
                            blob.xspeed = image_xscale*random_range(0.2,1.8);
                            blob.yspeed = random_range(-3,-6)*image_yscale;
                        }
                        break;
                }
            }
        }
    }
    else if(phase == 1) // wave
    {
        timer++;
        image_index = floor(timer/2);
        if(timer == timerMax)
        {
            var newWave = instance_create(x+16*image_xscale,y,objGelApocalypse);
            newWave.image_xscale = image_xscale;
            newWave.image_yscale = image_yscale;
            newWave.parent = parent;
            newWave.playerID = playerID;
            newWave.timerMax = timerMax;
            newWave.phase = phase;
            newWave.sprite_index = sprite_index;
        }
        if(timer &gt;= 2*image_number) instance_destroy();
    }
    else if(phase == 2) // needles
    {
        if(subPhase == 0) // seek target
        {
            if(!blockCollision)
            {
                if(!checkSolid(0,0)) blockCollision = 1;
            }
            
            if(ground)
            {
                xspeed = 0;
                if(timer &lt; 12)
                {
                    timer = 13;
                    image_index = 2;
                }
                else if(timer &lt; 15)
                {
                    image_index = 2;
                    timer++;
                }
                else if(timer &lt; 18)
                {
                    image_index = 3;
                    timer++;
                }
                else image_index = 1;
                
                timeout--;
                if(timeout &lt;= 60)
                {
                    if(timeout mod 5 == 0) visible = !visible;
                }
                if(!timeout) instance_destroy();
            }
            else
            {
                visible = true;
                if(timer &gt; 12)
                {
                    timer = 0;
                    image_index = 0;
                }
                if(timer &lt; 3)
                {
                    image_index = 0;
                    timer++;
                }
                else if(timer &lt; 6)
                {
                    image_index = 1;
                    timer++;
                }
                else if(timer &lt; 9)
                {
                    image_index = 2;
                    timer++;
                }
                else if(timer &lt; 12)
                {
                    image_index = 3;
                    timer++;
                }
                else image_index = 1;
                timeout = 300;
            }
            
            if(instance_exists(target))
            {
                if(place_meeting(x,y,target))
                {
                    subPhase = 1;
                    blockCollision = 0;
                    grav = 0;
                    distX = (x-target.x);
                    distY = (y-target.y);
                    if(abs(distX) &gt; 8) distX -= sign(distX)*8;
                    if(abs(distY) &gt; 8) distY -= sign(distX)*8;
                    latchedTarget = target;
                    timer = 0;
                    xspeed = 0;
                    yspeed = 0;
                }
            }
        }
        else if(subPhase == 1) // target found! periodically damage!
        {
            if(!instance_exists(latchedTarget) || latchedTarget.dead)
            {
                latchedTarget = noone;
                subPhase = 0;
                visible = true;
                grav = 0.2*image_yscale;
                yspeed = -2*image_yscale;
            }
            else
            {
                x = latchedTarget.x + distX;
                y = latchedTarget.y + distY;
                timer++;
                if(timer &lt; 2) image_index = 0;
                else if(timer == 2)
                {
                    visible = false;
                    for(var i = 0; i &lt; 360; i+=90)
                    {
                        var needle = instance_create(x,y,objGelApocalypse);
                        needle.image_angle = i;
                        needle.sprite_index = sprGelApocalypseNeedle;
                        needle.parent = parent;
                        needle.playerID = playerID;
                        needle.timerMax = timerMax;
                        needle.phase = 4;
                        needle.latchedTarget = self;
                    }
                }
                else if(timer &lt; 32) visible = false;
                else if(timer &lt; 35)
                {
                    visible = true;
                    image_index = 1;
                    if(hitCounter &gt; 10) instance_destroy();
                }
                else if(timer &lt; 38)
                {
                    image_index = 2;
                }
                else if(timer &lt; 41)
                {
                    image_index = 3;
                }
                else if(timer &lt; timerMax+30)
                {
                    image_index = 1;
                }
                else
                {
                    timer = 0;
                    image_index = 0;
                    hitCounter++;
                }
            }
        }
    }
    else if(phase == 3) // swarm
    {
        if(timer &lt; 3)
        {
            image_index = 0;
            timer++;
        }
        else if(timer &lt; 6)
        {
            image_index = 1;
            timer++;
        }
        else if(timer &lt; 9)
        {
            image_index = 2;
            timer++;
        }
        else if(timer &lt; 12)
        {
            image_index = 3;
            timer++;
        }
        else image_index = 1;
    }
    else if(phase == 4) // singular needle
    {
        if(instance_exists(latchedTarget))
        {
            x = latchedTarget.x;
            y = latchedTarget.y;
        }
        else
        {
            instance_destroy();
            exit;
        }
        timer++;
        if(timer &lt; 2) image_index = 2;
        else if(timer &lt; 4) image_index = 3;
        else if(timer &lt; 6) image_index = 4;
        else if(timer &lt; 8) image_index = 5;
        else if(timer &lt; 10) image_index = 6;
        else if(timer &lt; 12) image_index = 7;
        else if(timer &lt; 22) image_index = 7;
        else if(timer &lt; 26) image_index = 3;
        else if(timer &lt; 30) image_index = 2;
        else instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var myGel = noone;
with(objGelApocalypse)
{
    if(parent == other &amp;&amp; phase == 0) myGel = self;
}

if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; !myGel)
{
    var a = fireWeapon(0, 16, objGelApocalypse, 99, 4, 6, 0);
    if(a)
    {
        a.x = x+4*image_xscale;
        a.y = y-52*image_yscale;
        a.distX = abs(a.x-x);
        a.distY = (a.y-y);
        a.despawnRange = -1;
        a.image_index = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("GEL APOCALYPSE",global.nesPalette[9],global.nesPalette[22],sprWeaponIconsGelApocalypse);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(phase == 3 &amp;&amp; sign(yspeed) != -image_yscale)
{
    yspeed = -2*image_yscale;
    timer = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(phase == 0)
{
    var _x = (floor((x * global.screenScale) + .5) / global.screenScale);
    var _y = (floor((y * global.screenScale) + .5) / global.screenScale) + sin(2*pi*timer/timerMax)*1;
    draw_sprite(sprGelApocalypseSelection,selectedAttack,_x,_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
