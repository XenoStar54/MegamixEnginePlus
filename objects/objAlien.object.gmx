<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlien</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

contactDamage = 20;

blockCollision = 0;
introType = 0;
customPose = 1;

music = "Mega_Man_2.nsf";
musicType = "VGM";
musicTrackNumber = 17;

healthBarPrimaryColor[1] = 47;
healthBarSecondaryColor[1] = 40;

grav = 0;
xspeed = 0;
yspeed = 0;

image_speed = 0;
image_index = 8;

//boss variables

introPhase = 0;

startX = view_xview + view_wview - 32;
startY = ystart;

bgColor = c_black;
flashTimer = 0;

dir = 270;
spd = 1;
ph = 0;

timer = 0;
maxTimer = 32;

starbg[0] = bgStarFieldBackground;
starshift[0] = 0;
starspeed[0] = 4;
starbg[1] = bgStarFieldMiddleground;
starshift[1] = 0;
starspeed[1] = 2;
starbg[2] = bgStarFieldForeground;
starshift[2] = 0;
starspeed[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen){

    if (startIntro){
    
        blockCollision = 0;
        grav = 0;
        xspeed = 0;
        yspeed = 0;
        image_index = 8;
        visible = 1;
        drawBoss = 1;
        image_alpha = 0;
        canHit = 0;
        canDamage = 0;
        startIntro = 0;
        isIntro = 1;
    
    }
    
    if (isIntro){
        switch(introPhase){
            case 0:
                if (timer &lt; view_hview){
                    timer++;
                    if (timer == ystart mod view_hview){
                        image_alpha = 1;
                    }
                    if (timer mod 4 == 0){
                        if (image_index != 8) image_index = 8;
                        else image_index = 7;
                    }
                }
                if (timer == view_hview){
                    timer = 0;
                    introPhase = 1;
                }
            break;
            
            case 1:
                if (timer &lt; 20){
                    timer++;
                    if (timer mod 4 == 0){
                        if (image_index != 8) image_index = 8;
                        else image_index = 7;
                    }
                }
                if (timer == 20){
                    timer = 0;
                    introPhase = 2;
                }
            break;
            
            case 2:
                timer++;
                if (image_index &gt; 0){
                    if (timer mod 20 == 0) image_index--;
                }
                if (image_index == 0){
                    timer = 0;
                    introPhase = 3;
                }
            break;
            
            case 3:
                if (timer &lt; 50){
                    timer++;
                    if (timer mod 4 == 0){
                        if (image_index != 0) image_index = 0;
                        else image_index = 2;
                    }
                }
                if (timer == 50){
                    timer = 0;
                    introPhase = 4;
                    image_index = 0;
                    canHit = 1;
                    canDamage = 1;
                    xspeed = -image_xscale;
                    canFillHealthBar = true;
                }
            break;
            
            case 4:
                timer++;
                if (xspeed &gt; 0 &amp;&amp; distance_to_point(view_xview + view_wview, y) &lt;= 32 ||
                    xspeed &lt; 0 &amp;&amp; distance_to_point(view_xview, y) &gt;= 32 || checkSolid(xspeed, 0)){
                    timer = 0;
                    xspeed = 0;
                    yspeed = 0;
                    isIntro = 0;
                    //isFight = 1;
                    //lockPoolRelease(introLock);
                    timer = maxTimer/2;
                    //introPhase = 0;
                    ph = 0;
                    canFillHealthBar = true;
                }
            break;
        
        }
    }

}

if (entityCanStep()){

    if (isFight){

        if (flashTimer &gt; 0){
            //flashTimer--;
            bgColor = c_black;
        }
        if (flashTimer == 0){
            bgColor = c_black;
        }
        
        switch(ph){
            case 0: dir = 270; break;
            case 1: dir = 270 - 45;break;
            case 2: dir = 180; break;
            case 3: dir = 180 - 45;break;
            case 4: dir = 90; break;
            case 5: dir = 90 + 45;break;
            case 6: dir = 180; break;
            case 7: dir = 180 + 45; break;
            case 8: dir = 270; break;
            case 9: dir = 270 + 45; break;
            case 10: dir = 0; break;
            case 11: dir = 45; break;
            case 12: dir = 90; break;
            case 13: dir = 45; break;
            case 14: dir = 0; break;
            case 15: dir = 270 + 45; break;
        }
        
        if (timer &lt; maxTimer){
            timer++;
            if (timer == maxTimer/2 &amp;&amp; ph mod 2 == 0){
                if (instance_exists(target)){
                    b = instance_create(x, y, objEnemyBullet);
                    b.spd = 4;
                    b.dir = point_direction(x, y, target.x, target.y);
                    b.contactDamage = 6;
                }
            }
        }
        if (timer == maxTimer){
            timer = 0;
            ph = (ph + 1) mod 16;
        }
        
        if (timer mod 4 == 0){
            calibrateDirection();
            if (image_index != 0) image_index = 0;
            else image_index = 1;
        }
        
        xspeed = cos(degtorad(dir))*spd;
        yspeed = -sin(degtorad(dir))*spd;
        
        for (i = 0; i &lt;= 2; i += 1)
        {
            starshift[i] += starspeed[i];
            if (starshift[i] &gt;= 256)
            {
                starshift[i] -= 256;
            }
        }
    
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with(objEnemyBullet)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

iFrames = 4;

flashTimer = iFrames;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(bgColor);
draw_rectangle(view_xview - 1, view_yview - 1, view_xview + view_wview + 1,
    view_yview + view_hview + 1, false);

if (isFight){

    
    for (i = 1; i &lt;= 2; i += 1)
    {
        draw_background(starbg[i], view_xview - starshift[i], view_yview);
        draw_background(starbg[i], view_xview - starshift[i] + 256, view_yview);
    }
    
}
    
event_inherited();

if (introPhase == 0 &amp;&amp; !isFight){
    draw_sprite(sprWilyUFO, timer mod 3, xstart, view_yview + timer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
