<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprConcreteMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
hasTriggeredFall = false;
customPose = 1;
introType = 0;
pose = sprite_index;
poseImgSpeed = 0;
contactDamage = 4;
ground = false;
phase = 0;
timer = 0;
grav = 0.25;
animTimer = 0;
lastMove = 0;
preLastMove = 0;
image_speed = 0;
yMemo = y;
visible = false;
noSlideOnShock = 1;
fallCheck = 0;

// Health Bar
healthBarPrimaryColor[1] = 33;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_9.nsf";
musicType = "VGM";
musicTrackNumber = 16;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        if(target) calibrateDirection();
        y -= image_yscale*view_hview;
        image_index = 9;
        startIntro = false;
        isIntro = true;
        grav = 0;
        blockCollision = 0;
    }
    else if(isIntro)
    {
        if(!fallCheck)
        {
            grav = 0.25*image_yscale;
            gravStart = grav;
            visible = true;
            if(abs(y - yMemo) &lt; abs(yspeed))
            {
                y = yMemo;
                yspeed = 0;
                fallCheck = true;
                gravStart = grav;
                grav = 0;
                timer = 0;
            }
        }
        else
        {
            timer++;
            if(timer &lt;= 10)
            {
                image_index = 1;
            }
            else if(timer &lt;= 16)
            {
                image_index = 2;
            }
            else if(timer &lt;= 36)
            {
                image_index = 3;
            }
            else if(timer &lt;= 46)
            {
                image_index = 1;
            }
            else if(timer &lt;= 52)
            {
                image_index = 2;
            }
            else
            {
                image_index = 3;
                grav = gravStart;
                blockCollision = 1;
                canFillHealthBar = true;
                isIntro = false;
                phase = 0;
                timer = 0;
            }
        }
    }
    else if(isFight)
    {
        if(phase == 0) // rng the next move
        {
            if(timer) timer--;
            else
            {
                phase = choose(1,2,3);
                while(phase == lastMove &amp;&amp; (preLastMove == lastMove || lastMove &gt; 1)) phase = choose(1,2,3);
                preLastMove = lastMove;
                lastMove = phase;
            }
        }
        else if(phase == 1) // dash
        {
            if(timer &lt; 18)
            {
                timer++;
                if(target) calibrateDirection();
                image_index = 13;
            }
            else if(timer == 18)
            {
                timer++;
                image_index = 14;
                xspeed = image_xscale*4;
            }
            else if(timer == 19)
            {
                animTimer++;
                if(animTimer mod 4 &lt; 2) image_index = 14;
                else image_index = 13;
                
                if(checkSolid(image_xscale,0))
                {
                    xspeed = -0.75*image_xscale;
                    yspeed = -5.5*sign(grav);
                    timer++;
                    playSFX(sfxHardManLand);
                    screenShake(20,1,1);
                    animTimer = 0;
                }
            }
            else
            {
                if(ground)
                {
                    xspeed = 0;
                    phase = 0;
                    timer = 10;
                    image_index = 0;
                }
                else
                {
                    if(sign(yspeed) != -sign(grav))
                    {
                        image_index = 9;
                    }
                }
            }
        }
        else if(phase == 2) // slam
        {
            if(timer &lt; 12)
            {
                timer++;
                if(target) calibrateDirection();
                image_index = 7;
            }
            else if(timer == 12)
            {
                if(target) calibrateDirection();
                yspeed = ySpeedAim(y,y-16*7*image_yscale,grav);
                if(target) xspeed = xSpeedAim(x,y,target.x,y-16*7*image_yscale + image_yscale);
                else xspeed = image_xscale*2;
                timer++;
                image_index = 8;
            }
            else if(timer == 13)
            {
                if(sign(yspeed) != -sign(grav))
                {
                    image_index = 9;
                    timer++;
                    gravStart = grav;
                    grav = 0;
                    xspeed = 0;
                    yspeed = 0;
                }
            }
            else if(timer &lt; 35)
            {
                timer++;
            }
            else if(timer == 35)
            {
                yspeed = 6*image_yscale;
                timer++;
            }
            else
            {
                if(ground)
                {
                    if(timer == 36)
                    {
                        grav = gravStart;
                        playSFX(sfxHardManLand);
                        screenShake(50,1,1);
                        if(target) with(target) if(ground &amp;&amp; !isShocked)
                        {
                            playerGetShocked(0,0,1,50);
                            if(other.noSlideOnShock)
                            {
                                yspeed = 0;
                                xspeed = 0;
                            }
                        }
                        timer++;
                        image_index = 10;
                    }
                    else if(timer &lt; 42)
                    {
                        timer++;
                        image_index = 10;
                    }
                    else if(timer &lt; 86)
                    {
                        timer++;
                        image_index = 12;
                    }
                    else
                    {
                        timer = 10;
                        phase = 0;
                        image_index = 0;
                    }
                }
                else image_index = 9;
            }
        }
        else if(phase == 3) // concrete shot
        {
            timer++;
            
            var xdist = 64*image_xscale;
            if(target) xdist = target.x - x;
            
            if(target) calibrateDirection();
            
            if(timer &lt; 16)
            {
                image_index = 4;
            }
            else if(timer &lt; 24)
            {
                image_index = 6;
            }
            else if(timer == 24)
            {
                playSFX(sfxConcreteShot1);
                image_index = 6;
                if(abs(xdist) &lt; 48) // fire just one
                {
                    var concrete = instance_create(x+23*image_xscale,y-8*image_yscale,objConcreteManShot);
                    with(concrete)
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        yspeed = -2*image_yscale;
                        grav = 0.25*image_yscale;
                        if(target)
                        {
                            xspeed = xSpeedAim(x,y,target.x,target.y);
                            if(xspeed == 0) xspeed = xSpeedAim(x,y,target.x,y);
                        }
                        else xspeed = image_xscale;
                    }
                }
                else // fire 3
                {
                    var concrete1 = instance_create(x+23*image_xscale,y-8*image_yscale,objConcreteManShot);
                    with(concrete1)
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        grav = 0.25*image_yscale;
                        yspeed = ySpeedAim(y,y-32*image_yscale,grav);
                        xspeed = xSpeedAim(x,y,x+xdist-32,y);
                    }
                    var concrete2 = instance_create(x+23*image_xscale,y-8*image_yscale,objConcreteManShot);
                    with(concrete2)
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        grav = 0.25*image_yscale;
                        yspeed = ySpeedAim(y,y-64*image_yscale,grav);
                        xspeed = xSpeedAim(x,y,x+xdist,y);
                    }
                    var concrete3 = instance_create(x+23*image_xscale,y-8*image_yscale,objConcreteManShot);
                    with(concrete3)
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                        grav = 0.25*image_yscale;
                        yspeed = ySpeedAim(y,y-32*image_yscale,grav);
                        xspeed = xSpeedAim(x,y,x+xdist+32,y);
                    }
                }
            }
            else if(timer &gt; 40)
            {
                timer = 34;
                phase = 0;
                image_index = 0;
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objConcreteManShot) instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
