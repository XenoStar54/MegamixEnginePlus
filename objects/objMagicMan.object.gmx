<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagicMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;

contactDamage = 3;
customPose = true;
grav = 0.25;

introType = 0;

image_index = 0;
image_speed = 0;

blockCollision = 1;

//Magic Man specific variables
timer = 0;
phase = 0;
shootTimer = 0;
shootTimerMax = 0;

// Health Bar
healthBarPrimaryColor[1] = 5;
healthBarSecondaryColor[1] = 41;

// Music
music = "RnFBossNES.ogg";
musicType = "OGG";
musicLoopSecondsStart = 55.70;
musicLoopSecondsEnd = 79.70;
musicVolume = 0.8;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

enemyDamageValue(objTenguBlade, 6);
enemyDamageValue(objTenguDisk, 6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen){

    if (startIntro){
        visible = 0;
        sprite_index = sprMagicManIntro;
        image_index = 0;
        isIntro = 1;
        startIntro = 0;
        drawBoss = 1;
    }
    else if (isIntro){
        show_debug_message(timer);
        if (timer &gt;= 0 &amp;&amp; timer &lt;= 20){
            timer++;
            if (timer mod 5 == 0){
                if (visible == 0) visible = 1;
                else visible = 0;
            }
        }
        else if (timer == 21){
            visible = true;
            image_speed = 1/5;
            if (image_index &gt;= 5.5){
                sprite_index = sprMagicManShoot;
                image_index = 0;
                timer++;
            }
        }
        else if (timer == 22){
            if (image_index &gt;= 4){
                image_speed = 0;
                canFillHealthBar = true;
                isIntro = false;
                timer = 0;
            }
        }
    }


}

if (entityCanStep() &amp;&amp; !isIntro &amp;&amp; !startIntro &amp;&amp; isFight){
    
    switch(phase){
        
        case 0: // short pause, timer must be = 0
            sprite_index = sprMagicMan;
            image_index = 0;
            xspeed = 0;
            image_speed = 0;
            timer++;
            if (timer &gt;= 20){
                phase = 1;
                i = instance_create(x - image_xscale*15, bbox_bottom, objSlideDust);
                i.image_xscale = image_xscale;
                timer = 0;
            }
        break;
        
        case 1:
            xspeed = image_xscale * 3;
            sprite_index = sprMagicManDash;
            if (checkSolid(8 * sign(xspeed), 0))
            {
                if (!checkSolid(-8 * sign(xspeed), 0))
                {
                    xspeed *= -1;
                    image_xscale *= -1;
                    i = instance_create(x - image_xscale*15, bbox_bottom, objSlideDust);
                    i.image_xscale = image_xscale;
                }
            }
            
            //attack choice
            if (instance_exists(objMegaman)){
                if (global.keyShootPressed[0]){
                    xspeed = 0;
                    var megaDistance = abs(objMegaman.x - x);
                    show_debug_message("Time to switch phases");
                    if (megaDistance &lt;= 90){
                        //magic card
                        phase = 4;
                        sprite_index = sprMagicManThrow;
                        image_speed = 1/4;
                        calibrateDirection();
                    }
                    if (megaDistance &gt; 90 &amp;&amp; megaDistance &lt; 140){
                        //magic orbs
                        phase = 2;
                        shootTimerMax = irandom_range(1, 3);
                        image_speed = 1/5;
                        calibrateDirection();
                    }
                    if (megaDistance &gt;= 140){
                        //ball throw
                        phase = 3;
                        yspeed = -6;
                        grav = 0.25;
                        calibrateDirection();
                    }
                }
            }
            
        break;
        
        case 2:
            if (shootTimer &lt; shootTimerMax){
                sprite_index = sprMagicManShoot;
                if (image_index == 2){
                    //shoot
                    i = instance_create(x + image_xscale*15, y - 5, objEnemyBullet);
                    i.xspeed = image_xscale * 3;
                    i.image_xscale = image_xscale;
                    i.sprite_index = sprMagicManBullet;
                    i.image_speed = 1/4;
                    playSFX(sfxPointanSelect);
                }
                if (image_index &gt;= 4.75){
                    image_speed = 0;
                    timer++
                    if (timer &gt;= 20){
                        shootTimer++;
                        calibrateDirection();
                        timer = 0;
                        image_index = 0;
                        image_speed = 1/5;
                    }
                }
            }
            else{
                image_speed = 0;
                phase = 0;
                shootTimer = 0;
                timer = -10;
            }
        break;
        
        case 3:
            if (timer == 0){
                //travelling up
                image_speed = 0;
                sprite_index = sprMagicManJump;
                if (round(yspeed) == 0){
                    timer++;
                    xspeed = 0;
                    yspeed = 0;
                    grav = 0;
                    image_speed = 1/4;
                }
            }
            if (timer == 1){
                if (image_index == 2){
                    i = instance_create(x + image_xscale*5, y + 5, objMagicManBirdBall);
                    i.xspeed = image_xscale * 1.25;
                    playSFX(sfxEnemyDrop2);
                }
                if (image_index &gt;= 3.5){
                    grav = 0.25;
                    blockCollision = 1;
                    image_speed = 0;
                    if (ground){
                        phase = 0;
                        timer = -40;
                    }
                }
            }
        break;
        
        case 4:
            if (image_index == 2){
                i = instance_create(x + image_xscale*25, y - 8, objMagicManCard);
                i.image_xscale = image_xscale;
                playSFX(sfxRollingCutter);
            }
            if (image_index == 3){
                image_speed = 0;
                if (instance_place(x, y, objMagicManCard) || !instance_exists(objMagicManCard)){
                    phase = 0;
                }
            }
        
        break;
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (other.object_index == objTenguBlade || other.object_index == objTenguDisk || other.object_index == objTenguDash){
    
        if (instance_exists(objMagicManBird))
        {
            with objMagicManBird
                instance_destroy();
        }
        if (instance_exists(prtEnemyProjectile))
        {
            with prtEnemyProjectile
                instance_destroy();
        }
        
        phase = 0;
        timer = -10;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (other.object_index == objTenguBlade || other.object_index == objTenguDisk || other.object_index == objTenguDash){
    
        if (instance_exists(objMagicManBird))
        {
            with(objMagicManBird)
                instance_destroy();
        }
        if (instance_exists(prtEnemyProjectile))
        {
            with(objMagicManBird)
                instance_destroy();
        }
        
        phase = 0;
        timer = -10;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
