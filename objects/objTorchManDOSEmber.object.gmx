<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTorchManDOSEmber</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

blockCollision = false;
contactDamage = 0;
grav = 0;
delay = 0;
timer = 60;
timerMax = 60;
loop = 0;
behavior = -1;
dest = 0;
image_speed = 0.15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(delay == 0)
    {
        if(behavior == -1) // dissipate
        {
            instance_destroy();
        }
        else if(behavior == 0) // make tells
        {
            timer++;
            if(timer &gt; timerMax)
            {
                timer = 0;
                loop--;
                with(instance_create(x,y,objTorchManDOSEmber))
                {
                    behavior = -1;
                    delay = 30;
                    image_yscale = other.image_yscale;
                    yspeed = random_range(3,5)*-image_yscale;
                    xspeed = random_range(-0.5,0.5);
                    grav = 0.2*image_yscale;
                    image_xscale = sign(xspeed) + (xspeed == 0);
                }
                if(loop &lt;= 0)
                {
                    behavior = -1;
                    delay = -1;
                }
            }
        }
        else if(behavior == 1) // move
        {
            if(!contactDamage) contactDamage = 2;
            x += 3*image_xscale;
        }
        else if(behavior == 2) // also move but also plant new embers
        {
            if(!contactDamage) contactDamage = 2;
            x += 3*image_xscale;
            for(var i = 0; i &lt; instance_number(objTorchManDOSEmber); i++)
            {
                var ember = instance_find(objTorchManDOSEmber,i);
                if(ember.behavior == -1 &amp;&amp; ember.sprite_index = sprTorchManDOSEmber &amp;&amp; ember.delay == -1 &amp;&amp; !ember.visible &amp;&amp; place_meeting(x-4*image_xscale,ember.y,ember))
                {
                    var newEmber = instance_create(ember.x,ember.y,objTorchManDOSEmber);
                    newEmber.sprite_index = sprite_index;
                    newEmber.image_xscale = image_xscale;
                    newEmber.image_yscale = image_yscale;
                    newEmber.behavior = -1;
                    newEmber.delay = -1;
                    newEmber.sprite_index = sprite_index;
                    newEmber.contactDamage = contactDamage;
                    with(ember) instance_destroy();
                }
            }
        }
        else if(behavior == 3) // move up
        {
            if(!contactDamage) contactDamage = 2;
            y -= image_yscale*dest/timerMax;
            timer++;
            if(timer &gt;= timerMax)
            {
                behavior = -1;
                delay = -1;
                image_yscale = other.image_yscale;
                yspeed = random_range(3,3.5)*-image_yscale;
                xspeed = random_range(-0.25,0.25);
                grav = 0.2*image_yscale;
                image_xscale = sign(xspeed) + (xspeed == 0);
            }
        }
        else if(behavior == 4) // land and sit there for a while
        {
            if(!blockCollision) blockCollision = 1;
            if(!contactDamage) contactDamage = 2;
            if(ground)
            {
                xspeed = 0;
                delay = 60;
                behavior = -1;
            }
        }
    }
    else
    {
        if(delay &gt; 0) delay--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
