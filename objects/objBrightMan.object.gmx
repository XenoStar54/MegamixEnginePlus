<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBrightMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialization
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprBrightManIntro;
poseImgSpeed = 5 / 60;
contactDamage = 6;

beenShot = false;

phase = 0; //0 = idle; 1 = jump; 2 = shoot;
attackTimer = 0;
//Shooting Bullets
bulletYSpeeds[0] = -1;
bulletYSpeeds[1] = 0;
bulletYSpeeds[2] = 1;
bulletYSpeedDir = 1; //which direction to go through array; 0 = backwards; 1 = forewards;
bulletsLeft = 0;

//Flash Stopper Stuff
flashLock = false;
flashTimer = 0;
hasFlashed = false;

// Bright Man has customizable flash HP values. More can be added, but make sure to address any extra HP values near the top of the Step code.
flashValue1 = 16;
flashValue2 = 8;
flashValue3 = 4;

// If you want Bright Man to flash randomly instead of at certain values, toggle this to true in creation code.
// The default chance for him to flash via this method is 25%, but this can easily be edited by checking phase 0 and altering the set of values the rng check chooses from.
rngFlash = false;

// Health Bar
healthBarPrimaryColor[1] = 34;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_4.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 4);
enemyDamageValue(objSuperArmDebris, 4);
enemyDamageValue(objIceSlasher, 2);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 0);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 4);
enemyDamageValue(objTopSpin, 2);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 4);
enemyDamageValue(objPharaohShot, 1);

// MM5
enemyDamageValue(objPowerStone, 2);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 2);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 2);

// MMI

// MMII
enemyDamageValue(objSakugarne, 3);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 4);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 4);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step Code
event_inherited();

if (entityCanStep()) {
    if (isFight) {
        sprite_index = sprBrightMan;
        image_speed = 0;
        
        switch (phase) {
            case 0: // Idle
                image_index = 0;
                
                attackTimer -= 1;
                if (attackTimer &lt;= -1) 
                { 
                    phase = 1; 
                }
                else if (attackTimer &lt;= 0) 
                {
                    if (((healthpoints == flashValue1 || healthpoints == flashValue2 || healthpoints == flashValue3) &amp;&amp; !hasFlashed) &amp;&amp; !rngFlash) 
                    { 
                        phase = 3; 
                    }
                    else if(rngFlash &amp;&amp; !hasFlashed) 
                    {
                        doFlash = choose(0, 0, 0, 1);
                        if(doFlash == 1 &amp;&amp; !hasFlashed)
                        {   
                                phase = 3;  
                        }
                        else
                        {
                            if flashTimer &gt; 0
                            {
                                phase = 2;
                            }
                            else
                            { 
                                phase = 1 + irandom(1); 
                            }
                        }
                    }
                    else 
                    {
                        if flashTimer &gt; 0
                        {
                            phase = 2;
                        }
                        else
                        { 
                            phase = 1 + irandom(1); 
                        }
                    }
                }
                break;
                
            case 1: // Jump on Mega Man
                if (attackTimer &lt;= 0) 
                { 
                    attackTimer = 32;
                    image_index = 3;
                    
                    calibrateDirection();
                    
                    //Setup the jump
                    yspeed = -6.5
                    if (instance_exists(target)) 
                    {
                        var air_time = abs(2 * yspeed / gravAccel);
                        var mega_dist = target.x - x;
                        xspeed = mega_dist / air_time;
                    }
                } 
                else if (ground) 
                {
                    xspeed = 0;
                    yspeed = 0;
                    phase = 0;
                }
                break;
                
            case 2: //Shoot
                if (bulletsLeft &lt;= 0 &amp;&amp; attackTimer &lt;= 0) 
                {
                    bulletsLeft = array_length_1d(bulletYSpeeds);
                    bulletYSpeedDir = irandom(1);
                    attackTimer = 12;
                    calibrateDirection();
                }
                
                attackTimer -= 1;
                image_index = ((attackTimer &lt; 12) * 4) + (attackTimer &lt; 6);
                
                if (attackTimer == 5) 
                {
                    var bullet = instance_create(x + 17 * image_xscale, y + 4, objEnemyBullet);
                    bullet.parent = id;
                    bullet.contactDamage = 4;
                    bullet.xspeed = 5 * image_xscale;
                    if (bulletYSpeedDir &gt; 0) 
                    {
                        if(bulletsLeft == 3)
                        {
                            chooseArray = choose(0, 1, 2, 3, 4, 5);
                            if chooseArray == 0
                            {
                                bulletArray[0] = 0;
                                bulletArray[1] = 1;
                                bulletArray[2] = -1;
                            }
                            else if chooseArray == 1
                            {
                                bulletArray[0] = 0;
                                bulletArray[1] = -1;
                                bulletArray[2] = 1;
                            }
                            else if chooseArray == 2
                            {
                                bulletArray[0] = 1;
                                bulletArray[1] = 0;
                                bulletArray[2] = -1;
                            }
                            else if chooseArray == 3
                            {
                                bulletArray[0] = 1;
                                bulletArray[1] = -1;
                                bulletArray[2] = 0;
                            }
                            else if chooseArray == 4
                            {
                                bulletArray[0] = -1;
                                bulletArray[1] = 0;
                                bulletArray[2] = 1;
                            }
                            else if chooseArray == 5
                            {
                                bulletArray[0] = -1;
                                bulletArray[1] = 1;
                                bulletArray[2] = 0;
                            }
                        }
                        bullet.yspeed = bulletArray[bulletsLeft - 1];
                    } 
                    else 
                    {
                        if(bulletsLeft == 3)
                        {
                            chooseArray = choose(0, 1, 2, 3, 4, 5);
                            if chooseArray == 0
                            {
                                bulletArray[0] = 0;
                                bulletArray[1] = 1;
                                bulletArray[2] = -1;
                            }
                            else if chooseArray == 1
                            {
                                bulletArray[0] = 0;
                                bulletArray[1] = -1;
                                bulletArray[2] = 1;
                            }
                            else if chooseArray == 2
                            {
                                bulletArray[0] = 1;
                                bulletArray[1] = 0;
                                bulletArray[2] = -1;
                            }
                            else if chooseArray == 3
                            {
                                bulletArray[0] = 1;
                                bulletArray[1] = -1;
                                bulletArray[2] = 0;
                            }
                            else if chooseArray == 4
                            {
                                bulletArray[0] = -1;
                                bulletArray[1] = 0;
                                bulletArray[2] = 1;
                            }
                            else if chooseArray == 5
                            {
                                bulletArray[0] = -1;
                                bulletArray[1] = 1;
                                bulletArray[2] = 0;
                            }
                        }
                        bullet.yspeed = bulletArray[bulletsLeft - 1];
                    }
                    playSFX(sfxEnemyShootClassic);
                    bulletsLeft -= 1;
                }
                if (attackTimer &lt;= 0) 
                {
                    if (bulletsLeft &gt; 0) 
                    {
                        attackTimer = 28;
                    } 
                    else 
                    {
                        attackTimer = 32;
                        bulletsLeft = 0;
                        phase = 0;
                    }
                }
                break;
                
            case 3: //Flash Stopper
                if (attackTimer &lt;= 0) 
                {
                    attackTimer = 72;
                    calibrateDirection();
                }
                
                attackTimer -= 1;
                
                image_index = 1;
                if (attackTimer &lt; 60 &amp;&amp; attackTimer &gt;= 12) { image_index = 6; }
                if ((attackTimer &lt; 54 &amp;&amp; attackTimer &gt;= 48) || (attackTimer &lt; 42 &amp;&amp; attackTimer &gt;= 36)) { image_index = 7; }
                else if (attackTimer &lt; 36 &amp;&amp; attackTimer &gt;= 30) { image_index = 8; }
                else if (attackTimer &lt; 30 &amp;&amp; attackTimer &gt;= 24) { image_index = 9; }
                else if (attackTimer &lt; 24 &amp;&amp; attackTimer &gt;= 12) { image_index = 10; }
                
                if (attackTimer == 24) 
                {
                    screenFlash(16);
                    flashLock = playerTimeStopped();
                    flashTimer = 240;
                    hasFlashed = true;
                    playSFX(sfxFlashStopper);
                }
                
                if (attackTimer &lt;= 0) 
                {
                    attackTimer = 32;
                    phase = 0;
                }
                break;
        }
        
        if (flashTimer &gt; 0) 
        {
            flashTimer -= 1;
            if(instance_exists(objMegaman) &amp;&amp; instance_exists(objEnemyBullet))
            {
                if(place_meeting(objMegaman.x, objMegaman.y, objEnemyBullet))
                    beenShot = true;
            }
            if (flashTimer &lt;= 0 || beenShot || collision_rectangle(x - 11, y - 20, x + 10, y, objMegaman, false, true)) 
            {
                flashLock = playerTimeRestored(flashLock);
                flashTimer = 0;
                beenShot = false;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup after death
with (objEnemyBullet) {
    if (parent == other.id) {
        instance_destroy();
    }
}
if (flashLock &gt;= 0)
{
    flashLock = playerTimeRestored(flashLock);
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
hasFlashed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
