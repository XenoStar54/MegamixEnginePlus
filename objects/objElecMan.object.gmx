<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprElecManPose</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprElecManPose;
poseImgSpeed = 0.2;
contactDamage = 4;
grav = 0.25;
myGrav = 0.25;

pointSeparationA = 48;
pointSeparationB = 80;
spriteMain = sprElecMan;

stopOnFlash = true;
ground = false;
timer = 0;
phase = 0;
spd = 2.5;

xSpeedStore = 0;

doesGetKnockback = 1;
hitInvul = 60;

storePrevLocation = -5000;

dir = 1;
pointPos[0] = x;
pointPos[1] = x;
pointPos[2] = x;
nextVantagePoint = 2;
realNextVantagePoint = 2;

// 0 - checks if player projectiles exist; 1 - checks if shot button has been pressed not held
shotDetectionMode = 1;

// 0 - updates checkpoint before shooting; 1 - updates checkpoint after shooting
checkpointUpdateMode = 1;

shotProjectile = objElecManBullet;
myProjectile = noone;
code = "";
shotSound = sfxThunderBeam;

// Health Bar
healthBarPrimaryColor[1] = 18;
healthBarSecondaryColor[1] = 33;

// Music
music = "Mega_Man_1.nsf";
musicType = "VGM";
musicTrackNumber = 8;

// weak to metal, mildly weak to explosions and rocks, resistant to ice

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objIceWall, 0);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 4);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 2);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 4);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 2);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 1);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objChillShot, 0);
enemyDamageValue(objChillSpikeLanded, 0);

// Misc.
enemyDamageValue(objPowerStone, 2);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 2);
enemyDamageValue(objIceSlasher, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(isIntro)
    {
        dir = image_xscale;
        pointPos[0] = view_xview+view_wview/2 + pointSeparationA*image_xscale;
        pointPos[1] = view_xview+view_wview/2;
        pointPos[2] = view_xview+view_wview/2 - pointSeparationB*image_xscale;
        realNextVantagePoint = nextVantagePoint;
        grav = myGrav;
        storePrevLocation = -5000;
    }
    else if (isFight)
    {
        if(sprite_index != spriteMain)
        {
            sprite_index = spriteMain;
        }
        
        if(!instance_exists(objMegaman)) // if Mega is ded, freeze in place like in 1
        {
            xspeed = 0;
            yspeed = 0;
            xSpeedStore = 0;
            grav = 0;
            phase = -1;
        }
        
        if(phase == 0) // run to a vantage point
        {
            if(ground)
            {
                // ok gotta start caring for being on the ground
                var nextPoint = realNextVantagePoint;
                if(nextPoint &gt; 2) nextPoint = 1;
                if(abs(x - pointPos[nextPoint]) &lt; abs(xSpeedStore))
                {
                    // shoot
                    timer = 0;
                    phase = 1;
                    xspeed = 0;
                    xSpeedStore = 0;
                    image_xscale = dir;
                    if(!checkpointUpdateMode) // update vantage point
                    {
                        realNextVantagePoint++;
                        if(realNextVantagePoint &gt; 3) realNextVantagePoint = 0;
                    }
                }
                else
                {
                    dir = sign(pointPos[nextPoint] - x) + (sign(pointPos[nextPoint] - x) == 0);
                    image_xscale = dir;
                    xSpeedStore = spd*dir;
                }
                if(timer mod 5 == 0)
                {
                    if(image_index == 3)image_index = 2;
                    else image_index = 3;
                }
                timer++;
                
                if(checkSolid(xSpeedStore,0)) // obstacle detected, try jumping over
                {
                    if(storePrevLocation == x) // I failed to jump over, establish new vantage point here
                    {
                        if(abs(x - pointPos[0]) &lt; abs(x - pointPos[2]))
                        {
                            pointPos[0] = x;
                            dir = 1;
                        }
                        else
                        {
                            pointPos[2] = x;
                            dir = -1;
                        }
                        timer = 0;
                        phase = 0;
                        storePrevLocation = -5000;
                    }
                    else // jump and save previous location
                    {
                        yspeed = ySpeedAim(y,y-34*sign(grav),grav);
                        image_index = 1;
                        storePrevLocation = x;
                    }
                }
                var shotCheck = 0;
                if(shotDetectionMode)
                {
                    for(var i = 0; i &lt; global.playerCount; i++)
                        if(global.keyShootPressed[i])
                            shotCheck = 1;
                }
                else
                {
                    if(instance_exists(prtPlayerProjectile)) shotCheck = 1;
                }
                if(shotCheck) // jump on shot
                {
                    timer = 0;
                    phase = 4;
                    yspeed = ySpeedAim(y,y-34*sign(grav),grav);
                    image_index = 1;
                    var rng = choose(-1,1);
                    xSpeedStore = spd*rng;
                }
            }
            else
            {
                calibrateDirection();
                image_index = 1;
                timer = 0;
            }
        }
        else if(phase == 1) // shoot
        {
            calibrateDirection();
            if(ground &amp;&amp; xSpeedStore != 0)
            {
                xSpeedStore = 0;
            }
            
            timer++;
            if(timer &lt; 16) // windup
            {
                image_index = 4;
            }
            else // ZAP!
            {
                image_index = 5;
                myProjectile = instance_create(x,y,shotProjectile);
                myProjectile.image_xscale = image_xscale;
                if(code != "")with(myProjectile)stringExecutePartial(other.code);
                playSFX(shotSound);
                timer = 0;
                phase = 2;
                storePrevLocation = -5000; // I sure hope this won't break anything
                if(checkpointUpdateMode) // update vantage point
                {
                    realNextVantagePoint++;
                    if(realNextVantagePoint &gt; 3) realNextVantagePoint = 0;
                }
            }
        }
        else if(phase == 2) // wait for your shot to disappear lol
        {
            image_index = 5;
            if(ground &amp;&amp; xSpeedStore != 0)
            {
                xSpeedStore = 0;
            }
            
            if(myProjectile == noone)
            {
                timer = 0;
                phase = 0;
                
                if(abs(x - pointPos[1]) &gt; abs(xSpeedStore))
                {
                    if(x &gt; pointPos[1]) dir = -1;
                    else dir = 1;
                }
            }
        }
        else if(phase == 3) // get knocked back
        {
            xSpeedStore = -0.5*image_xscale;
            image_index = 3;
            if(timer == 0)
            {
                yspeed = -2*sign(myGrav);
            }
            timer++;
            if(timer &gt; 32)
            {
                if(myProjectile == noone)
                {
                    timer = 0;
                    phase = 0;
                }
                else
                {
                    timer = 0;
                    phase = 2;
                }
            }
        }
        else if(phase == 4) // all I gotta do in the air is detect shots, right
        {
            timer = 0;
            image_index = 1;
            if(ground)
            {
                phase = 0;
            }
            else if(global.keyShootPressed[0])
            {
                phase = 1;
            }
            storePrevLocation = -5000; // I sure hope this won't break anything
        }
        
        xspeed = xSpeedStore;
        
        if((!instance_exists(myProjectile) || myProjectile.dead) &amp;&amp; myProjectile != noone)
        {
            myProjectile = noone;
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (myProjectile) instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(doesGetKnockback)
{
    timer = 0;
    phase = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
