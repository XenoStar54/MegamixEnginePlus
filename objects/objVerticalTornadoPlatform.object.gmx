<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprVerticalTornadoPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtRailPlatform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

image_speed = 0.1;
//@cc: decide how fast the battery spins; affects player spin rate and direction
imgSpd = 0.1;

respawnRange = -1;
despawnRange = -1;

yOffset = 16;
noFlicker = false;

isSolid = 2;
blockCollision = 0;
grav = 0;

mySpeed = 1;

// Enemy-specific code
spinRate = (1 / 3);
spinMod = 10;
spinTimer = 0;

for (i = 0; i &lt; global.playerCount; i += 1)
{
    attachedType[i] = 0;
    attachY[i] = y;
    offset[i] = 0;
    animOffset[i] = 0;
    shootLock[i] = false;
}

currX = x;
currY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle rotation animation
with (objMegaman)
{
    with (other)
    {
        if (attachedType[other.playerID] == 1) // attached to side
        {
            other.x = x - 6 + 28*offset[other.playerID];
            other.y = y + attachY[other.playerID];
            
            sprx = 12 + (animOffset[other.playerID] * 3);
            spry = 16;
            with (other)
            {
                playerHandleSprites("Magnet");
            }
        }
        else if (attachedType[other.playerID] == 2) // attached to top
        {
            if(image_speed != 0) with (other) playerHandleSprites("Spin");
        }
    }
}

// Stop movement if out of range
if (instance_exists(objMegaman))
{
    if (!insideSection(x, y))
    {
        x -= xspeed;
        y -= yspeed;
        x = currX;
        y = currY;
    }
    else
    {
        currX = x;
        currY = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Check for drop rails
    if (instance_exists(lastRail))
    {
        if (lastRail.drop)
        {
            image_speed = 0;
        }
        else
        {
            image_speed = imgSpd;
        }
    }
    else
    {
        image_speed = imgSpd;
    }
    
    // Rotate this absolute madman if they're touching the platform
    with (objMegaman)
    {
        with (other)
        {
            if(attachedType[other.playerID] == 0) // not attached
            {
                // attach to side
                if(sign(other.xDir) == sign(bboxGetXCenter()-other.x) &amp;&amp; place_meeting(x+other.xDir, y, other))
                {
                    attachedType[other.playerID] = 1;
                    var lock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_TURN,PL_LOCK_SHOOT,PL_LOCK_SLIDE);
                    lock.targetInstance = other.id;
                    shootLock[other.playerID] = lock;
                    attachY[other.playerID] = other.y - y; // set y rotation origin
                    other.image_xscale = 1;
                    spinTimer = 0; // reset timer
                    
                    // based on where they attach to the platform, set the proper Stuff
                    if (other.x &gt; bboxGetXCenter())
                    {
                        offset[other.playerID] = 1;
                        animOffset[other.playerID] = 0;
                        playerDir[other.playerID] = -1;
                    }
                    else
                    {
                        offset[other.playerID] = 0;
                        animOffset[other.playerID] = 0;
                        playerDir[other.playerID] = 1;
                    }
                }
                // attach to top
                else if(place_meeting(x, y - other.gravDir * 2, other) &amp;&amp; !place_meeting(x, y, other) &amp;&amp; other.ground)
                {
                    attachedType[other.playerID] = 2;
                    var lock = lockPoolLock(PL_LOCK_MOVE,PL_LOCK_TURN,PL_LOCK_SHOOT,PL_LOCK_SLIDE);
                    lock.targetInstance = other.id;
                    shootLock[other.playerID] = lock;
                    attachY[other.playerID] = other.y - y; // set y rotation origin
                    
                    spinTimer = 0; // reset timer
                    other.xspeed = 0;
                }
            }
            else if(attachedType[other.playerID] == 1) // attached to side
            {
                // Update position + variables
                
                // Rotate UNLESS the platform is over a drop rail
                if (image_speed != 0)
                {
                    spinTimer += abs(imgSpd*10);
                    
                    if (spinTimer &gt;= spinMod)
                    {
                        spinTimer -= spinMod;
                        offset[other.playerID] += spinRate*sign(imgSpd) * playerDir[other.playerID];
                        animOffset[other.playerID] += spinRate*sign(imgSpd);
                        if(offset[other.playerID] &lt; 0) offset[other.playerID]++;
                        if(animOffset[other.playerID] &lt; 0) animOffset[other.playerID] += 2;
                    }
                }
                
                // handle playerDirection spinning when going under the platform etc
                if (offset[other.playerID] &gt;= 1)
                {
                    offset[other.playerID] = 1;
                    animOffset[other.playerID] = 1;
                    playerDir[other.playerID] = -1*sign(imgSpd);
                }
                if (offset[other.playerID] &lt;= 0)
                {
                    offset[other.playerID] = 0;
                    animOffset[other.playerID] = 0;
                    playerDir[other.playerID] = 1*sign(imgSpd);
                }
                
                // handle depth of player
                depth = other.depth - playerDir[other.playerID] + 2*(offset[other.playerID] == 0)*(imgSpd &gt; 0) + 2*(offset[other.playerID] == 1)*(imgSpd &lt; 0);
                
                // Jumping off the platform
                if (global.keyJumpPressed[other.playerID])
                {
                    with(other)
                    {
                        playerJump();
                        canMinJump = true;
                        if(yDir == gravDir)
                        {
                            yspeed = 0;
                            jumpCounter = 1;
                        }
                        else jumpCounter = 0;
                        image_xscale = sign(bboxGetXCenterObject(other)-x) + (bboxGetXCenterObject(other) == x)*image_xscale;
                    }
                    attachedType[other.playerID] = 0;
                    
                    shootLock[other.playerID] = lockPoolRelease(shootLock[other.playerID]);
                }
                
                // no land sound pls
                if (instance_exists(other))
                    other.playLandSound = 0;
            }
            else if(attachedType[other.playerID] == 2) // attached to top
            {
                // detach
                if(!(place_meeting(x, y - other.gravDir * 2, other) &amp;&amp; !place_meeting(x, y, other) &amp;&amp; other.ground))
                {
                    attachedType[other.playerID] = 0;
                    shootLock[other.playerID] = lockPoolRelease(shootLock[other.playerID]);
                }
                
                // Jumping off the platform
                if (global.keyJumpPressed[other.playerID])
                {
                    with(other)
                    {
                        playerJump();
                        canMinJump = true;
                        if(yDir == gravDir)
                        {
                            yspeed = 0;
                            jumpCounter = 1;
                        }
                        else jumpCounter = 0;
                    }
                    attachedType[other.playerID] = 0;
                    
                    shootLock[other.playerID] = lockPoolRelease(shootLock[other.playerID]);
                }
            }
        }
    }
}
else image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
