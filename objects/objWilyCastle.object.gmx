<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWilyCastle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

// Path detection
path = 0;
dots = 0;
setup = 1;

xs = 0;
ys = 0;

xm = objWilyCastleStart.x;
ym = objWilyCastleStart.y;

linem[0] = -1;
linex[0] = -1;
liney[0] = -1;

// Cutscene control
alarm[0] = 1;

skipped = 0;
started = 0;
drawspath = 0;

counter = 0;

cutscene = -1;

// Levels
level[1] = getRoom("lvlMM5Dark1", "Levels/lvlMM5Dark1");
level[2] = getRoom("lvlMM4Wily1", "Levels/lvlMM4Wily1");
level[3] = getRoom("lvlMM9Wily3", "Levels/lvlMM9Wily3");
level[4] = getRoom("lvlMM6MrX4", "Levels/lvlMM6MrX4");
level[5] = getRoom("lvlMM10Wily4", "Levels/lvlMM10Wily4");

// Energy element grabbing setting stuff
global.castleStagesBeaten = (indexOf(global.elementsCollected, "wily1") &gt;= 0)
    + (indexOf(global.elementsCollected, "wily2") &gt;= 0)
    + (indexOf(global.elementsCollected, "wily3") &gt;= 0)
    + (indexOf(global.elementsCollected, "wily4") &gt;= 0)
    + (indexOf(global.elementsCollected, "wily5") &gt;= 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Go to level

goToLevel(level[global.castleStagesBeaten + 1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Progress Path
if (!started)
{
    playSFX(sfxCastlePath, true);
    started = 1;
}

counter += 1;
if (counter &gt;= path)
{
    audio_stop_sound(sfxCastlePath);
    alarm[11] = 100;
    alarm[10] = 0;
}
else
{
    alarm[10] = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Make dark / show dots
image_index = 1;
drawspath = 1;

alarm[10] = 96;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// failsafe
if (global.castleStagesBeaten &gt;= 5)
{
    stopMusic();
    global.nextRoom = rmCredits;
}

cutscene += 1;

switch (cutscene)
{
    case 0: // Start 
        alarm[0] = 420;
        break;
    case 1: // Dark 
        image_index = 1;
        alarm[0] = 5;
        break;
    case 2: // First Flash 
        background_color = c_white;
        alarm[0] = 10;
        break;
    case 3: // First Flash stop 
        background_color = c_black;
        alarm[0] = 10;
        break;
    case 4: // Second Flash 
        background_color = c_white;
        alarm[0] = 10;
        break;
    case 5: // Second Flash stop 
        background_color = c_black;
        alarm[0] = 10;
        break;
    case 6: // Third Flash 
        background_color = c_white;
        alarm[0] = 10;
        break;
    case 7: // Third Flash stop 
        background_color = c_black;
        alarm[9] = 10;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (setup)
{
    repeat (1)
    {
        var prexs = xs;
        var preys = ys;
        
        // Move
        xm += xs * 8;
        ym += ys * 8;
        
        // Decide what direction
        var i = collision_rectangle(xm + 1, ym + 1, xm + 6, ym + 6, objWilyCastleArrow, false, false);
        if (i)
        {
            direction = i.image_angle;
        }
        
        xs = ((direction == 0) - (direction == 180));
        ys = ((direction == 270) - (direction == 90));
        
        linem[path] = 0;
        
        var i = collision_rectangle(xm + 1, ym + 1, xm + 6, ym + 6, objWilyCastleDot, false, false);
        if (!i)
        {
            if (xs != 0)
            {
                if (prexs == xs)
                {
                    linem[path] = 1;
                }
                else if (preys != 0)
                {
                    linem[path] = 3 + (xs &gt; 0) + (preys &gt; 0) * 2;
                }
            }
            if (ys != 0)
            {
                if (preys == ys)
                {
                    linem[path] = 2;
                }
                else if (prexs != 0)
                {
                    linem[path] = 3 + (prexs &lt; 0) + (ys &lt; 0) * 2;
                }
            }
        }
        else
        {
            dots++;
            
            // sets start of path
            if (dots == global.castleStagesBeaten)
            {
                counter = path;
            }
            
            // sets end of path
            if (dots == global.castleStagesBeaten + 1)
            {
                setup = 0;
                i.image_speed = 0.1;
            }
        }
        
        if (linem[path])
        {
            linex[path] = xm;
            liney[path] = ym;
        }
        
        path++;
        
        if (!setup)
        {
            exit;
        }
    }
    
    // 1 -
    // 2 |
    // 3 -\
    // 4 /-
    // 5 -/
    // 6 \-
}
else
{
    // skipping it
    if (!skipped)
    {
        if (global.keyPause[0])
        {
            skipped = 1;
            for (i = 0; i &lt;= 11; i += 1)
            {
                alarm[i] = -1;
            }
            audio_stop_all();
            background_color = c_black;
            
            alarm[11] = 1 + drawspath * 16;
            counter = path;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawSelf();

if (drawspath)
{
    for (var i = 1; i &lt; counter; i++)
    {
        if (linem[i])
        {
            draw_sprite(sprWilyCastlePath, linem[i] - 1, linex[i], liney[i]);
        }
    }
    
    with (objWilyCastleDot)
    {
        drawSelf();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
