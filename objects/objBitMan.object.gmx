<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBitMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprBitManPose;
poseImgSpeed = 10 / 60;
contactDamage = 4;
ground = false;
phase = 0;
timer = 0;

// Health Bar
healthBarPrimaryColor[1] = 34;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

spriteMain = sprBitMan;
spriteRun = sprBitManRun;

// Bit Man is weak to hot temperature weapons as well as water weapons,
// but invulnerable to toy and electric/breaker type weapons

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 4);
enemyDamageValue(objGeminiLaser, 2);
enemyDamageValue(objHardKnuckle, 0);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 4);
enemyDamageValue(objPharaohShot, 2);

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 0);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 2);

// MM10
enemyDamageValue(objTripleBlade, 0);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 4);

// MM11
enemyDamageValue(objBlockDropper, 0);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 4);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 4);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (isFight == true)
    {
        if(phase == 0) // prepare shot
        {
            sprite_index = spriteMain;
            timer++;
            if(timer &lt; 10)
            {
                image_index = 0;
            }
            else if(timer &lt; 20)
            {
                image_index = 1;
            }
            else if(timer &lt; 40)
            {
                image_index = 2;
            }
            else
            {
                timer = 0;
                phase = choose(1,2,3);
                image_index = 3;
            }
        }
        else if(phase == 1) // shoot 5
        {
            if(timer mod 5 == 0)
            {
                var drill = instance_create(x+10*image_xscale,y,objBitManBullet);
                drill.image_xscale = image_xscale;
            }
            timer++;
            if(timer &gt; 20)
            {
                timer = 0;
                phase = 4;
            }
        }
        else if(phase == 2) // shoot 3
        {
            if(timer mod 30 == 0)
            {
                var drill = instance_create(x+10*image_xscale,y,objBitManBullet);
                drill.image_xscale = image_xscale;
            }
            timer++;
            if(timer &gt; 60)
            {
                timer = 0;
                phase = 4;
            }
        }
        else if(phase == 3) // shoot 4
        {
            if(timer mod 10 == 0 &amp;&amp; timer != 20 &amp;&amp; timer != 30 &amp;&amp; timer != 40)
            {
                var drill = instance_create(x+10*image_xscale,y,objBitManBullet);
                drill.image_xscale = image_xscale;
            }
            timer++;
            if(timer &gt; 60)
            {
                timer = 0;
                phase = 4;
            }
        }
        else if(phase == 4) // prepare rush
        {
            timer++;
            if(timer &lt; 10)
            {
                image_index = 2;
            }
            else if(timer &lt; 20)
            {
                image_index = 1;
            }
            else if(timer &lt; 60)
            {
                image_index = 0;
            }
            else if(timer &lt; 80)
            {
                image_index = 4;
            }
            else
            {
                timer = 0;
                sprite_index = spriteRun;
                image_speed = 0.3;
                xspeed = image_xscale * 4;
                phase = 5;
                playSFX(sfxBlizzardCharge);
            }
        }
        else if(phase == 5) // rush
        {
            if(!audio_is_playing(sfxBlizzardCharge))playSFX(sfxBlizzardCharge);
            if(checkSolid(image_xscale,0))
            {
                // spawn debris
                screenShake(120, 1, 1);
                yspeed = -3;
                xspeed = -image_xscale*0.5;
                image_speed = 0;
                audio_stop_sound(sfxBlizzardCharge);
                playSFX(sfxBlizzardSlam);
                phase = 6;
            }
        }
        else if(phase == 6)
        {
            if(ground)
            {
                sprite_index = spriteMain;
                image_index = 0;
                xspeed = 0;
                timer++;
                if(timer &gt;= 120)
                {
                    timer = 0;
                    phase = 0;
                    image_xscale *= -1;
                }
            }
        }
    }
    else
    {
        if(y == ystart || ground)
        {
            if(sprite_index == pose &amp;&amp; image_index &lt; 1)
            {
                image_index = 1;
            }
        }
    }
    
    if(global.shakeTimer &gt; 0 &amp;&amp; global.shakeTimer mod 15 == 0)
    {
        var spot = irandom_range(24, view_wview - 24) + view_xview;
        if(global.shakeTimer/15 mod 4 == 0 &amp;&amp; instance_exists(objMegaman))spot = objMegaman.x;
        var tile = instance_create(spot,view_yview,objEnemyBullet);
        tile.sprite_index = sprBitManTile;
        tile.image_speed = 0.5;
        tile.grav = 0.25;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
with(objBitManBullet)instance_destroy();
with(objEnemyBullet)instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
