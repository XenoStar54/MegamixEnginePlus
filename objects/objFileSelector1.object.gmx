<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables
controlsLocked = false; // controls are locked when switching menu modes
selection = 0;
nonFiles = 2;
deleteMode = false;

//global.debugEnabled = false; // debug keys not allowed for now
global.livesEnabled = true;

event_user(0); // load list of files
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// controls

if (!controlsLocked)
{
    var selectionCount = fileCount + nonFiles + 1;
    
    // switch selection
    var yDir = 0;
    for (var i = 0; i &lt; global.playerCount; i++)
    {
        yDir += global.keyDownPressed[i] - global.keyUpPressed[i];
    }
    
    selection = (selection + yDir) mod selectionCount;
    selection = selection + selectionCount;
    selection = selection mod selectionCount;
    
    if (yDir != 0)
    {
        playSFX(sfxMenuMove);
    }
    
    var selected = false;
    var back = false;
    for (var i = 0; i &lt; global.playerCount; i++)
    {
        selected = selected || (global.keyPausePressed[i] || global.keyJumpPressed[i]);
        back = back || global.keyShootPressed[i];
    }
    
    // select an option
    if (selected || back)
    {
        if (selection == 0 || back)
        {
            // quit:
            global.nextRoom = rmTitleScreen;
            controlsLocked = true;
            //global.debugEnabled = true;
            //global.livesEnabled = false;
        }
        else if (selection == 1)
        {
            // delete mode
            if (fileCount &gt; 0)
            {
                deleteMode = !deleteMode;
                playSFX(sfxPause);
            }
            else
            {
                playSFX(sfxError);
            }
        }
        else if (selection == selectionCount - 1)
        {
            // new file
            global.saveFile = "save" + string(fileCount) + ".sav";
            global.nextRoom = rmNewFile;
            controlsLocked = true;
            playSFX(sfxMenuSelect);
        }
        else
        {
            if (!deleteMode)
            {
                // load file
                global.saveFile = fileName[selection - nonFiles];
                var error = saveLoadGame(false);
                if (error)
                {
                    freshSaveFile();
                    playSFX(sfxError);
                }
                else
                {
                    global.nextRoom = rmStageSelect;
                    controlsLocked = true;
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                // delete file
                var deleted = false;
                var f = fileName[selection - nonFiles];
                if (file_exists(f))
                {
                    deleted = file_delete(f);
                    if (deleted)
                    {
                        // update file list
                        selectionCount--;
                        if (selection == selectionCount)
                        {
                            selection--;
                        }
                        
                        event_user(0);
                        
                        // end
                        deleteMode = false;
                        playSFX(sfxDeath);
                    }
                }
                
                if (!deleted)
                {
                    playSFX(sfxError);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// load list of files
var names = makeArray();
var elements = makeArray();
var timer = makeArray();
var diff = makeArray();

var file = file_find_first("*.sav", 0);
fileCount = 0;
while (file_exists(file))
{
    if (string_pos("save", file) == 1)
    {
        var n = real(string_copy(file, 5, string_pos(".sav", file) - 4));
        
        global.saveFile = file;
        var error = saveLoadGame(false);
        if (error &lt;= 0)
        {
            // read relevant variables from save file
            names[n] = file;
            elements[n] = global.energyElements;
            timer[n] = global.gameTimer;
            diff[n] = global.difficulty;
            
            fileCount++;
        }
    }
    
    file = file_find_next();
}

file_find_close();

// get rid of blank space
for (var i = 0; i &lt; array_length_1d(names); i++)
{
    if (names[i] == pointer_null)
    {
        // put next non-null value in the blank space
        for (var j = i + 1; j &lt; array_length_1d(names); j++)
        {
            if (names[j] != pointer_null)
            {
                names[i] = names[j];
                elements[i] = elements[j];
                timer[i] = timer[j];
                diff[i] = diff[j];
                names[j] = pointer_null;
                elements[j] = pointer_null
                timer[j] = pointer_null
                diff[j] = pointer_null
                break;
            }
        }
    }
}

// fix file numbers
for (var i = 0; i &lt; fileCount; i++)
{
    var n = "save" + string(i) + ".sav";
    if (names[i] != n)
    {
        var renamed = file_rename(names[i], n);
        assert(renamed, "File not renamed!");
        names[i] = n;
    }
}

// set data
fileName = names
energyElements = elements;
gameTimer = timer;
gameDifficulty = diff;

freshSaveFile();
objGlobalControl.saveTimer = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_alpha(1);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
for (var i = 0; i &lt; fileCount + nonFiles + 1; i++)
{
    var draw_y = 48 + i * 12;
    
    // draw cursor
    if (i == selection)
        draw_sprite(sprOptionsCursor, 0, 24, draw_y);
    
    // option text
    if (i == 0)
    {
        draw_text(48, draw_y, "Back...");
    }
    else if (i == 1)
    {
        if (!deleteMode)
        {
            draw_text(48, draw_y, "Delete File");
        }
        else
        {
            draw_text(48, draw_y, "Cancel Deletion");
        }
    }
    else if (i == fileCount + nonFiles)
    {
        draw_text(48, draw_y, "New File...");
    }
    else
    {
        // files
        var file = i - nonFiles;
        draw_text(48, draw_y, fileName[file] + ": " + string(gameTimer[file] div (60 * 60)) + " minutes");
    }
}

draw_set_alpha(0.3);
var str = "Make a better menu!#objFileSelector :)";
if (!deleteMode)
{
    str = "Load File#" + str;
}
else
{
    str = "Delete File#" + str;
}

draw_text(0, 0, str);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
