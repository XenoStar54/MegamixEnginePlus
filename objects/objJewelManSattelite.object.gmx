<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJewelManSattelite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEnemyProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

grav = 0;
blockCollision = 0;
contactDamage = 4;
itemDrop = -1;
canHit = true;
canDamage = true;

glintTimer = 0;
waitTimer = 0;
phase = 0;
parent = noone;

radius = 0;
targetRadius = 24;
initAngle = 0;
timer = 0;
period = 90;
miniPeriod = 15;
canTakeShots = 0;
yDest = y;
myID = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(parent == noone || !instance_exists(parent))
    {
        instance_destroy();
    }
    else
    {
        if(radius == 0)
        {
            image_xscale = parent.image_xscale;
            image_yscale = parent.image_yscale;
        }
        else if(canTakeShots == 0 &amp;&amp; radius &gt;= 22)
        {
            canTakeShots = 1;
        }
        if(phase == 0) // orbit around Jewel Man
        {
            x = parent.x + cos(degtorad(initAngle) - 2*pi*timer/period)*radius*image_xscale;
            y = parent.y - sin(degtorad(initAngle) - 2*pi*timer/period)*radius*image_yscale;
            targetRadius = 24+sin(2*pi*timer/miniPeriod)*2;
            if(radius &lt; targetRadius) radius++;
            else if(radius &gt; targetRadius) radius--;
            timer++;
        }
        else if(phase == 1) // fly
        {
            xspeed = image_xscale * 4;
            if(y != yDest) yspeed = sign(yDest - y) * min(3,abs(yDest - y));
            else yspeed = 0;
            timer++;
            if(timer == 1)
            {
                with(instance_create(x,y+3*image_yscale,objExplosion))
                {
                    image_speed = 0.5;
                    sprite_index = sprJewelManSatteliteSparkle;
                    vspeed = image_yscale*0.5;
                    depth = other.depth-0.5;
                }
            }
            else if(timer == 3)
            {
                with(instance_create(x-2*xspeed-4*image_xscale,y-1*image_yscale,objExplosion))
                {
                    image_speed = 0.5;
                    sprite_index = sprJewelManSatteliteSparkle;
                    vspeed = image_yscale*0.5;
                    depth = other.depth-0.5;
                }
            }
            else if(timer == 4)
            {
                with(instance_create(x-3*xspeed+4*image_xscale,y-1*image_yscale,objExplosion))
                {
                    image_speed = 0.5;
                    sprite_index = sprJewelManSatteliteSparkle;
                    vspeed = image_yscale*0.5;
                    depth = other.depth-0.5;
                }
            }
            else if(timer &gt;= 7)
            {
                timer = 0;
            }
        }
    }
    
    if(glintTimer &lt; 3)
    {
        image_index = 1;
        glintTimer++;
    }
    else if(glintTimer &lt; 6)
    {
        image_index = 2;
        glintTimer++;
    }
    else if(glintTimer &lt; 9)
    {
        image_index = 3;
        glintTimer++;
    }
    else if(glintTimer &lt; 12)
    {
        image_index = 4;
        glintTimer++;
        if(!waitTimer) waitTimer = choose(2,3,4,5,6)*30;
    }
    else
    {
        image_index = 0;
        if(waitTimer) waitTimer--;
        else glintTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.guardCancel = 3;
if(canTakeShots)
{
    canTakeShots = false;
    timer = 0;
    phase = 1;
    glintTimer = 0;
    yDest = y;
    if(target) calibrateDirection();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
