<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBladeManDOSpose</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprBladeManDOSpose;
poseImgSpeed = 0.2;
contactDamage = 4;
customPose = 1;
hasTriggeredFall = 0;
ground = false;
attackTimer = 30;
phase = 0;
boomerangCount = 0;
bladeThrows = 0;
cycleCount = 0;

sawDamage = 3;
maxBoomerangCount = 2;
boomerangDamage = 3;
maxBladeThrows = 2;
bladeDamage = 2;
maxCycleCount = 2;
hitInvun = 45;

// Health Bar
healthBarPrimaryColor[1] = 17;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 5;

//@cc: when false, Blade Man will use an easier pattern more fit with the source material
newFight = true;

// Blade Man is weak to fire, break and toy type weapons,
// but immune to water weapons

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

/*
// MaGMML3
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 3);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 0);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 3);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objSakugarne, 0);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 4);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 5);
enemyDamageValue(objRainFlush, 3);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 4);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);

// Misc.
enemyDamageValue(objPowerStone, 0);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 3);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (startIntro)
    {
        y -= view_yview;
        grav = gravStart;
        sprite_index = pose;
    }
    else if (isIntro)
    {
        if(!hasTriggeredFall)
        {
            if(abs(y - ystart) &lt;= yspeed)
            {
                hasTriggeredFall = 1;
                grav = 0;
                yspeed = 0;
                y = ystart;
                if(image_index == 0) image_index++;
            }
        }
        else
        {
            if(image_index &lt; image_number - 1)
            {
                image_index += poseImgSpeed;
            }
            else
            {
                image_index = image_number - 1;
                blockCollision = blockCollisionStart;
                grav = gravStart;
                isIntro = false;
                canFillHealthBar = true;
                if(!newFight) attackTimer = 0;
                setTargetStep();
            }
        }
    }
    else if (isFight)
    {
        if(newFight)
        {
            if(!instance_exists(target))phase = -1;
            if(phase == 0) // drop onto the ground and wait
            {
                bladeThrows = 0;
                boomerangCount = 0;
                image_speed = 0;
                sprite_index = sprBladeManDOS;
                if(ground)
                {
                    attackTimer+=1;
                    if(attackTimer &gt;= 45)
                    {
                        attackTimer = 0;
                        phase = 1;
                    }
                }
                else
                {
                    image_index = 4;
                }
            }
            else if(phase == 1) // throw a boomerang
            {
                image_speed = 0;
                sprite_index = sprBladeManDOS;
                attackTimer+=1;
                if(attackTimer &lt; 15)
                {
                    calibrateDirection();
                    image_index = 1;
                }
                else if(attackTimer == 15)
                {
                    image_index = 2;
                    var boomerang = instance_create(x+image_xscale*17,y,objBladeManDOSboomerang);
                    boomerang.contactDamage = boomerangDamage;
                    if(instance_exists(target))
                    {
                        boomerang.destinationX = target.x;
                        boomerang.destinationY = target.y;
                    }
                    playSFX(sfxRollingCutter);
                }
                else if(attackTimer &lt; 20)
                {
                    image_index = 2;
                }
                else if(attackTimer &lt; 30)
                {
                    image_index = 3;
                }
                else if(attackTimer &lt; 60)
                {
                    image_index = 0;
                }
                else
                {
                    boomerangCount+=1;
                    if(boomerangCount &gt;= maxBoomerangCount)
                    {
                        phase = 2;
                        attackTimer = 0;
                        boomerangCount = 0;
                    }
                    else
                    {
                        phase = 1;
                        attackTimer = 0;
                    }
                }
            }
            else if(phase == 2) // throw a sawblade
            {
                attackTimer+=1;
                if(attackTimer &lt; 15)
                {
                    calibrateDirection();
                    image_index = 1;
                }
                else if(attackTimer == 15)
                {
                    image_index = 2;
                    var saw = instance_create(x+image_xscale*17,y,objBladeManDOSsaw);
                    saw.contactDamage = sawDamage;
                    saw.yspeed = -1;
                    saw.xspeed = 1*image_xscale;
                    saw.image_xscale = image_xscale;
                    saw.grav = 0.25;
                    playSFX(sfxMetalBlade);
                }
                else if(attackTimer &lt; 20)
                {
                    image_index = 2;
                }
                else if(attackTimer &lt; 30)
                {
                    image_index = 3;
                }
                else
                {
                    attackTimer = 0;
                    phase = 3;
                }
            }
            else if(phase == 3) // walk and jump to the other side
            {
                xspeed = 1.3*image_xscale;
                if(ground)
                {
                    sprite_index = sprBladeManDOSwalk;
                    image_speed = 0.1;
                    if(checkSolid(xspeed,0,1))
                    {
                        sprite_index = sprBladeManDOS;
                        image_xscale *= -1;
                        attackTimer = 0;
                        xspeed = image_xscale*3;
                        yspeed = -8;
                        phase = 4;
                        image_index = 4;
                        image_speed = 0;
                    }
                }
                else
                {
                    sprite_index = sprBladeManDOSjump;
                    image_index = 0;
                    image_speed = 0;
                }
            }
            else if(phase == 4) // jump high and shoot blades
            {
                sprite_index = sprBladeManDOS;
                image_speed = 0;
                if(yspeed &gt;= 0)
                {
                    if(attackTimer &lt;= 0)
                    {
                        image_index = 5;
                        for(i=0;i&lt;3;i+=1)
                        {
                            var blade1 = instance_create(x,y,objBladeManDOSblade);
                            blade1.contactDamage = bladeDamage;
                            if(instance_exists(target))
                            {
                                var angle;
                                angle = point_direction(spriteGetXCenter(blade1), spriteGetYCenter(blade1), spriteGetXCenterObject(target), spriteGetYCenterObject(target));
                                angle+=(22.5-22.5*i);
                                blade1.xspeed = cos(degtorad(angle)) * 4;
                                blade1.yspeed = -sin(degtorad(angle)) * 4;
                                while(angle &gt;= 360) angle-=360;
                                while(angle &lt; 0) angle+=360;
                                if(angle &lt;= 11.25)blade1.image_index = 0;
                                else if(angle &lt;= 11.25*3)blade1.image_index = 15;
                                else if(angle &lt;= 11.25*5)blade1.image_index = 14;
                                else if(angle &lt;= 11.25*7)blade1.image_index = 13;
                                else if(angle &lt;= 11.25*9)blade1.image_index = 12;
                                else if(angle &lt;= 11.25*11)blade1.image_index = 11;
                                else if(angle &lt;= 11.25*13)blade1.image_index = 10;
                                else if(angle &lt;= 11.25*15)blade1.image_index = 9;
                                else if(angle &lt;= 11.25*17)blade1.image_index = 8;
                                else if(angle &lt;= 11.25*19)blade1.image_index = 7;
                                else if(angle &lt;= 11.25*21)blade1.image_index = 6;
                                else if(angle &lt;= 11.25*23)blade1.image_index = 5;
                                else if(angle &lt;= 11.25*25)blade1.image_index = 4;
                                else if(angle &lt;= 11.25*27)blade1.image_index = 3;
                                else if(angle &lt;= 11.25*29)blade1.image_index = 2;
                                else if(angle &lt;= 11.25*31)blade1.image_index = 1;
                                else if(angle &gt; 348.75)blade1.image_index = 0;
                            }
                        }
                        playSFX(sfxTripleBlade);
                    }
                    else if(attackTimer &lt; 5)
                    {
                        image_index = 5;
                    }
                    else if(attackTimer &lt; 20)
                    {
                        image_index = 6;
                    }
                    attackTimer+=1;
                }
                if(ground)
                {
                    calibrateDirection();
                    phase = 5;
                    attackTimer = 0;
                    xspeed = 0;
                }
            }
            else if(phase == 5) // drag the boomerangs back
            {
                if(ground)
                {
                    xspeed = 0;
                    calibrateDirection();
                    image_speed = 0;
                    sprite_index = sprBladeManDOS;
                    image_index = 3;
                    with(objBladeManDOSboomerang)doComeBack = true;
                    if(!instance_exists(objBladeManDOSboomerang))
                    {
                        phase = 6;
                        attackTimer = 0;
                    }
                }
            }
            else if(phase == 6) // hop
            {
                sprite_index = sprBladeManDOS;
                image_index = 4;
                if(bladeThrows &gt;= maxBladeThrows)
                {
                    yspeed = -8;
                    xspeed = 3*image_xscale;
                    phase = 8;
                }
                else if(bladeThrows mod 2)
                {
                    yspeed = -6;
                    xspeed = -image_xscale;
                    phase = 7;
                }
                else
                {
                    yspeed = -5;
                    xspeed = image_xscale;
                    phase = 7;
                }
                bladeThrows += 1;
            }
            else if(phase == 7) // throw blades
            {
                if(yspeed &gt;= 0)
                {
                    if(attackTimer &lt;= 0)
                    {
                        image_index = 5;
                        for(i=0;i&lt;3;i+=1)
                        {
                            var blade1 = instance_create(x,y,objBladeManDOSblade);
                            blade1.contactDamage = bladeDamage;
                            if(instance_exists(target))
                            {
                                var angle;
                                angle = point_direction(spriteGetXCenter(blade1), spriteGetYCenter(blade1), spriteGetXCenterObject(target), spriteGetYCenterObject(target));
                                angle+=(30-30*i);
                                blade1.xspeed = cos(degtorad(angle)) * 4;
                                blade1.yspeed = -sin(degtorad(angle)) * 4;
                                while(angle &gt;= 360) angle-=360;
                                while(angle &lt; 0) angle+=360;
                                if(angle &lt;= 11.25)blade1.image_index = 0;
                                else if(angle &lt;= 11.25*3)blade1.image_index = 15;
                                else if(angle &lt;= 11.25*5)blade1.image_index = 14;
                                else if(angle &lt;= 11.25*7)blade1.image_index = 13;
                                else if(angle &lt;= 11.25*9)blade1.image_index = 12;
                                else if(angle &lt;= 11.25*11)blade1.image_index = 11;
                                else if(angle &lt;= 11.25*13)blade1.image_index = 10;
                                else if(angle &lt;= 11.25*15)blade1.image_index = 9;
                                else if(angle &lt;= 11.25*17)blade1.image_index = 8;
                                else if(angle &lt;= 11.25*19)blade1.image_index = 7;
                                else if(angle &lt;= 11.25*21)blade1.image_index = 6;
                                else if(angle &lt;= 11.25*23)blade1.image_index = 5;
                                else if(angle &lt;= 11.25*25)blade1.image_index = 4;
                                else if(angle &lt;= 11.25*27)blade1.image_index = 3;
                                else if(angle &lt;= 11.25*29)blade1.image_index = 2;
                                else if(angle &lt;= 11.25*31)blade1.image_index = 1;
                                else if(angle &gt; 348.75)blade1.image_index = 0;
                            }
                        }
                        playSFX(sfxTripleBlade);
                    }
                    else if(attackTimer &lt; 5)
                    {
                        image_index = 5;
                    }
                    else if(attackTimer &lt; 20)
                    {
                        image_index = 6;
                    }
                    attackTimer+=1;
                }
                if(ground)
                {
                    phase = 6;
                    attackTimer = 0;
                    xspeed = 0;
                }
            }
            else if(phase == 8) // throw sticky blades
            {
                if(yspeed &gt;= 0)
                {
                    if(attackTimer &lt;= 0)
                    {
                        image_index = 5;
                        for(i=0;i&lt;3;i+=1)
                        {
                            var blade1 = instance_create(x,y,objBladeManDOSblade);
                            blade1.contactDamage = bladeDamage;
                            if(instance_exists(target))
                            {
                                var angle;
                                angle = point_direction(spriteGetXCenter(blade1), spriteGetYCenter(blade1), spriteGetXCenterObject(target), spriteGetYCenterObject(target));
                                angle+=(22.5-22.5*i);
                                blade1.xspeed = cos(degtorad(angle)) * 4;
                                blade1.yspeed = -sin(degtorad(angle)) * 4;
                                blade1.type = 1;
                                while(angle &gt;= 360) angle-=360;
                                while(angle &lt; 0) angle+=360;
                                if(angle &lt;= 11.25)blade1.image_index = 0;
                                else if(angle &lt;= 11.25*3)blade1.image_index = 15;
                                else if(angle &lt;= 11.25*5)blade1.image_index = 14;
                                else if(angle &lt;= 11.25*7)blade1.image_index = 13;
                                else if(angle &lt;= 11.25*9)blade1.image_index = 12;
                                else if(angle &lt;= 11.25*11)blade1.image_index = 11;
                                else if(angle &lt;= 11.25*13)blade1.image_index = 10;
                                else if(angle &lt;= 11.25*15)blade1.image_index = 9;
                                else if(angle &lt;= 11.25*17)blade1.image_index = 8;
                                else if(angle &lt;= 11.25*19)blade1.image_index = 7;
                                else if(angle &lt;= 11.25*21)blade1.image_index = 6;
                                else if(angle &lt;= 11.25*23)blade1.image_index = 5;
                                else if(angle &lt;= 11.25*25)blade1.image_index = 4;
                                else if(angle &lt;= 11.25*27)blade1.image_index = 3;
                                else if(angle &lt;= 11.25*29)blade1.image_index = 2;
                                else if(angle &lt;= 11.25*31)blade1.image_index = 1;
                                else if(angle &gt; 348.75)blade1.image_index = 0;
                            }
                        }
                        playSFX(sfxSlashClaw);
                    }
                    else if(attackTimer &lt; 5)
                    {
                        image_index = 5;
                    }
                    else if(attackTimer &lt; 20)
                    {
                        image_index = 6;
                    }
                    attackTimer+=1;
                }
                if(ground)
                {
                    phase = 9;
                    attackTimer = 0;
                    xspeed = 0;
                }
            }
            else if(phase == 9) // throw a sawblade then count cycles
            {
                attackTimer+=1;
                if(attackTimer &lt; 15)
                {
                    calibrateDirection();
                    image_index = 1;
                }
                else if(attackTimer == 15)
                {
                    image_index = 2;
                    var saw = instance_create(x+image_xscale*17,y,objBladeManDOSsaw);
                    saw.contactDamage = sawDamage;
                    saw.yspeed = -1;
                    saw.xspeed = 1*image_xscale;
                    saw.image_xscale = image_xscale;
                    saw.grav = 0.25;
                    playSFX(sfxMetalBlade);
                }
                else if(attackTimer &lt; 20)
                {
                    image_index = 2;
                }
                else if(attackTimer &lt; 30)
                {
                    image_index = 3;
                }
                else if(attackTimer &lt; 60)
                {
                    image_index = 0;
                }
                else if(attackTimer &gt;= 80)
                {
                    attackTimer = 0;
                    phase = 0;
                }
            }
            else if(phase == -1) // ha ha ha
            {
                if(ground)
                {
                    xspeed = 0;
                    yspeed = 0;
                    sprite_index = sprBladeManDOStaunt;
                    image_speed = 0.25;
                }
                else
                {
                    sprite_index = sprBladeManDOSjump;
                    image_index = 0;
                }
            }
        }
        else
        {
            if(!instance_exists(target))phase = -1;
            if(phase == 0) // walk at Mega
            {
                if(instance_exists(target))
                {
                    calibrateDirection();
                    xspeed = image_xscale*1.3;
                    if(ground)
                    {
                        sprite_index = sprBladeManDOSwalk;
                        image_speed = 0.1;
                        if(checkSolid(xspeed,0,1))
                        {
                            sprite_index = sprBladeManDOS;
                            image_xscale *= -1;
                            attackTimer = 0;
                            xspeed = image_xscale*3;
                            yspeed = -8;
                            phase = 4;
                            image_index = 4;
                            image_speed = 0;
                        }
                    }
                    else
                    {
                        sprite_index = sprBladeManDOSjump;
                        image_index = 0;
                        image_speed = 0;
                    }
                    
                    attackTimer++;
                    if(attackTimer &gt; 90 || abs(x-target.x) &lt; abs(xspeed))
                    {
                        image_speed = 0;
                        sprite_index = sprBladeManDOS;
                        if(ground) image_index = 0;
                        else image_index = 4;
                        phase = 1;
                        attackTimer = 0;
                        xspeed = 0;
                    }
                }
            }
            else if(phase == 1) // jump straight up
            {
                attackTimer++;
                if(attackTimer &gt; 20 &amp;&amp; ground)
                {
                    image_speed = 0;
                    sprite_index = sprBladeManDOS;
                    image_index = 4;
                    yspeed = -6;
                    phase = 2;
                    attackTimer = 0;
                }
                else
                {
                    image_speed = 0;
                    sprite_index = sprBladeManDOS;
                    if(ground) image_index = 0;
                    else image_index = 4;
                }
                if(target) calibrateDirection();
            }
            else if(phase == 2) // launch blades
            {
                if(yspeed &gt;= 0)
                {
                    if(attackTimer &lt;= 0)
                    {
                        image_index = 5;
                        for(i=0;i&lt;3;i+=1)
                        {
                            var blade1 = instance_create(x,y,objBladeManDOSblade);
                            blade1.contactDamage = bladeDamage;
                            if(instance_exists(target))
                            {
                                var angle;
                                angle = point_direction(spriteGetXCenter(blade1), spriteGetYCenter(blade1), spriteGetXCenterObject(target), spriteGetYCenterObject(target));
                                angle+=(30-30*i);
                                blade1.xspeed = cos(degtorad(angle)) * 4;
                                blade1.yspeed = -sin(degtorad(angle)) * 4;
                                while(angle &gt;= 360) angle-=360;
                                while(angle &lt; 0) angle+=360;
                                if(angle &lt;= 11.25)blade1.image_index = 0;
                                else if(angle &lt;= 11.25*3)blade1.image_index = 15;
                                else if(angle &lt;= 11.25*5)blade1.image_index = 14;
                                else if(angle &lt;= 11.25*7)blade1.image_index = 13;
                                else if(angle &lt;= 11.25*9)blade1.image_index = 12;
                                else if(angle &lt;= 11.25*11)blade1.image_index = 11;
                                else if(angle &lt;= 11.25*13)blade1.image_index = 10;
                                else if(angle &lt;= 11.25*15)blade1.image_index = 9;
                                else if(angle &lt;= 11.25*17)blade1.image_index = 8;
                                else if(angle &lt;= 11.25*19)blade1.image_index = 7;
                                else if(angle &lt;= 11.25*21)blade1.image_index = 6;
                                else if(angle &lt;= 11.25*23)blade1.image_index = 5;
                                else if(angle &lt;= 11.25*25)blade1.image_index = 4;
                                else if(angle &lt;= 11.25*27)blade1.image_index = 3;
                                else if(angle &lt;= 11.25*29)blade1.image_index = 2;
                                else if(angle &lt;= 11.25*31)blade1.image_index = 1;
                                else if(angle &gt; 348.75)blade1.image_index = 0;
                            }
                        }
                        playSFX(sfxTripleBlade);
                    }
                    else if(attackTimer &lt; 5)
                    {
                        image_index = 5;
                    }
                    else if(attackTimer &lt; 20)
                    {
                        image_index = 6;
                    }
                    attackTimer+=1;
                }
                else
                {
                    if(target) calibrateDirection();
                }
                if(ground)
                {
                    phase = 3;
                    attackTimer = 0;
                    xspeed = 0;
                }
            }
            else if(phase == 3) // jump back/forward if target is close/far
            {
                if(target) calibrateDirection();
                if(abs(x-target.x) &lt; 64) xspeed = -image_xscale;
                else xspeed = image_xscale;
                yspeed = -5;
                image_index = 4;
                attackTimer = 0;
                phase = 4;
            }
            else if(phase == 4) // shoot sawblade from midair
            {
                if(yspeed &gt;= 0)
                {
                    if(attackTimer &lt;= 0)
                    {
                        image_index = 5;
                        var saw = instance_create(x+image_xscale*17,y,objBladeManDOSsaw);
                        saw.contactDamage = sawDamage;
                        saw.yspeed = -1;
                        saw.xspeed = 1*image_xscale;
                        saw.image_xscale = image_xscale;
                        saw.grav = 0.25;
                        playSFX(sfxMetalBlade);
                    }
                    else if(attackTimer &lt; 5)
                    {
                        image_index = 5;
                    }
                    else if(attackTimer &lt; 20)
                    {
                        image_index = 6;
                    }
                    attackTimer+=1;
                }
                else
                {
                    if(target) calibrateDirection();
                }
                if(ground)
                {
                    bladeThrows++;
                    if(bladeThrows &lt; 2) phase = 3;
                    else
                    {
                        phase = 0;
                        bladeThrows = 0;
                    }
                    attackTimer = 0;
                    xspeed = 0;
                }
            }
            else if(phase == -1) // ha ha ha
            {
                if(ground)
                {
                    xspeed = 0;
                    yspeed = 0;
                    sprite_index = sprBladeManDOStaunt;
                    image_speed = 0.25;
                }
                else
                {
                    sprite_index = sprBladeManDOSjump;
                    image_index = 0;
                }
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// clean your trash
with(objBladeManDOSsaw)instance_destroy();
with(objBladeManDOSblade)instance_destroy();
with(objBladeManDOSboomerang)instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
