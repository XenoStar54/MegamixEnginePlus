<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSnakeMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskSnakeMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprSnakeManPose;
poseImgSpeed = 5 / 60;
contactDamage = 4;
ground = false;
phase = 0;
dir = 0;
timer = 0;
animTimer = 0;

spriteNormal = sprSnakeMan;
spriteAir = sprSnakeManAir;
projectile = objSnakeManSearchSnake;
code = "";
shootSound = sfxBuster;
spd = 1.3;
xSpeedStore = 0;
latch = true;

initCertainShot = 1;
init = 0;
shootChance = 50; // out of 100

pointPos[0] = x;
pointPos[1] = x;
pointPos[2] = x;
for(var j = 0; j &lt; 3; j++)pointVacant[j] = 0;
pointSeparation = 96;

prevMove = -1;
prevPrevMove = -2;

// Health Bar
healthBarPrimaryColor[1] = 35;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_3.nsf";
musicType = "VGM";
musicTrackNumber = 12;

canDestroyMySnake[0] = objPharaohShot;
canDestroyMySnake[1] = objSearchSnake;
canDestroyMySnake[2] = objNeedleCannon;
canDestroyMySnake[3] = objFlameMixer;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 2);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 4);

// MM3
enemyDamageValue(objNeedleCannon, 4);
enemyDamageValue(objMagnetMissile, 0);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 2);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 4);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 2);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 4);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 2);

// MM8
enemyDamageValue(objHomingSniper, 2);

// MM9
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSolarBlaze, 3);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 0);

// MM&amp;B
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 2);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 2);
enemyDamageValue(objSuperArrow, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (isIntro)
    {
        phase = 2;
        animTimer = 1;
        dir = image_xscale;
        init = initCertainShot;
        
        pointSeparation = abs(pointSeparation);
        pointPos[0] = view_xview+view_wview/2 - pointSeparation;
        pointPos[1] = view_xview+view_wview/2;
        pointPos[2] = view_xview+view_wview/2 + pointSeparation;
        for(var j = 0; j &lt; 3; j++)pointVacant[j] = 0;
        pointVacant[1] = 1;
        prevMove = -1;
        prevPrevMove = -2;
    }
    else if (isFight)
    {
        if(phase == 0) // roam
        {
            if(ground)
            {
                if(sprite_index != spriteNormal)
                {
                    sprite_index = spriteNormal;
                    animTimer = 0;
                }
                
                animTimer++;
                if(animTimer &lt;= 4)
                {
                    image_index = 3;
                }
                else if(animTimer &lt;= 8)
                {
                    image_index = 4;
                }
                else if(animTimer &lt;= 12)
                {
                    image_index = 5;
                }
                else if(animTimer &lt; 16)
                {
                    image_index = 6;
                }
                else
                {
                    image_index = 6;
                    animTimer = 0;
                }
                
                image_xscale = dir;
                xspeed = dir*spd;
                
                if(sign(xcoll) == dir) // I hit a wall, jump
                {
                    // I can't jump over this wall, turn around
                    if(checkSolid(xspeed,-sign(grav)*48) &amp;&amp; checkSolid(xspeed,-sign(grav)*64))
                    {
                        dir = -sign(xcoll);
                        image_xscale = dir;
                    }
                    xspeed = dir*spd;
                    xSpeedStore = xspeed;
                    yspeed = ySpeedAim(y,y-sign(grav)*51,grav);
                    sprite_index = spriteAir;
                    image_index = 0;
                    phase = 3;
                    animTimer = 4;
                    xcoll = 0;
                }
                else
                {
                    if(xSpeedStore != 0) xSpeedStore = 0;
                }
                
                // check if Snake Man is near a node
                for(var i = 0; i &lt; 3; i++)
                {
                    if(abs(x - pointPos[i]) &lt; abs(xspeed) &amp;&amp; pointVacant[i])
                    {
                        for(var j = 0; j &lt; 3; j++)pointVacant[j] = 1;
                        pointVacant[i] = 0;
                        x = pointPos[i];
                        if(abs(x - pointPos[1]) &gt; pointSeparation-8)
                        {
                            if(x &gt; pointPos[1]) dir = -1;
                            else dir = 1;
                        }
                        // roll for shot or jump
                        timer = 0;
                        var rng = irandom_range(0,99);
                        if(prevMove == prevPrevMove &amp;&amp; shootChance &gt; 0 &amp;&amp; shootChance &lt; 100)
                        {
                            if(prevMove) rng = 0;
                            else rng = shootChance;
                        }
                        if(init)
                        {
                            rng = 0;
                            init = 0;
                        }
                        if(rng &lt; shootChance) // shoot
                        {
                            xSpeedStore = 0;
                            xspeed = 0;
                            phase = 1;
                            yspeed = -8*sign(grav);
                            sprite_index = spriteAir;
                            image_index = 0;
                            latch = true;
                            animTimer = 0;
                            prevPrevMove = prevMove;
                            prevMove = 0;
                        }
                        else // jump
                        {
                            xspeed = dir*spd;
                            xSpeedStore = xspeed;
                            yspeed = ySpeedAim(y,y-sign(grav)*51,grav);
                            sprite_index = spriteAir;
                            image_index = 0;
                            phase = 3;
                            animTimer = 4;
                            prevPrevMove = prevMove;
                            prevMove = 1;
                        }
                        image_xscale = dir;
                        i = 3;
                    }
                }
            }
            else
            {
                phase = 3;
                animTimer = 4;
                sprite_index = spriteAir;
                image_index = 0;
            }
            
            // failsafe for when Snake Man goes past his nodes
            if(abs(x - pointPos[1]) &gt; pointSeparation+8)
            {
                if(x &gt; pointPos[1]) dir = -1;
                else dir = 1;
            }
            image_xscale = dir;
        }
        else if(phase == 1) // shoot snakes
        {
            calibrateDirection();
            if(latch)
            {
                if(sign(yspeed) == sign(grav) || yspeed == 0)
                {
                    latch = false;
                    timer = 0;
                }
            }
            else
            {
                if(timer == 0 || timer == 22) // shoot
                {
                    animTimer = 8;
                    var snek = instance_create(x+16*image_xscale,y,projectile);
                    if(projectile == objSnakeManSearchSnake)
                    {
                        snek.canDestroyMe = canDestroyMySnake;
                        snek.yspeed = -2 * image_yscale;
                        snek.xspeed = 0;
                        snek._dir = image_xscale;
                        if (sign(grav) == -1) snek._dir *= -1;
                        snek.grav = 0.3 * image_yscale;
                        if (snek.grav &gt; 0)
                        {
                            snek._groundDir = 270;
                        }
                        else
                        {
                            snek._groundDir = 90;
                        }
                    }
                    if(code != "") with(snek) stringExecutePartial(other.code);
                    playSFX(shootSound);
                }
                timer++;
            }
            
            if(ground)
            {
                sprite_index = spriteNormal;
                if(animTimer)
                {
                    image_index = 7;
                    animTimer--;
                }
                else
                {
                    image_index = 1;
                    animTimer = 32;
                    phase = 3;
                } 
            }
            else
            {
                sprite_index = spriteAir;
                if(animTimer)
                {
                    image_index = 2;
                    animTimer--;
                }
                else
                {
                    if(sign(yspeed) == sign(grav)) image_index = 1;
                    else image_index = 0;
                }
            }
        }
        else if(phase == 2) // wind down
        {
            if(ground)
            {
                sprite_index = spriteNormal;
                image_index = 0;
            }
            else
            {
                sprite_index = spriteAir;
                if(sign(yspeed) == sign(grav)) image_index = 1;
                else image_index = 0;
            }
            
            animTimer--;
            if(animTimer &lt;= 0)
            {
                animTimer = 0;
                phase = 0;
            }
        }
        else if(phase == 3) // also wind down but different
        {
            if(ground)
            {
                xspeed = 0;
                xSpeedStore = 0;
                sprite_index = spriteNormal;
                image_index = 1;
                animTimer--;
                if(animTimer &lt;= 0)
                {
                    animTimer = 0;
                    phase = 0;
                }
            }
            else
            {
                xspeed = xSpeedStore;
                sprite_index = spriteAir;
                if(sign(yspeed) == sign(grav)) image_index = 1;
                else image_index = 0;
                animTimer = 4;
                if(xspeed != 0)
                {
                    dir = sign(xspeed);
                    image_xscale = dir;
                }
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (projectile)
    instance_destroy();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
