<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWaterReverse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>50</depth>
  <persistent>0</persistent>
  <parentName>prtAlwaysActive</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ladder but omnidirectional
for(var i = 0; i &lt; 4; i++)
{
    climbingLock[i] = 0;
    aerialCatchCooldown[i] = 0;
    climbTimer[i] = 0;
}
combineObjects(object_index);
jumpOff = 1;
shootWhenClimbing = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.frozen)
{
    with(objMegaman) if(!playerIsLocked(PL_LOCK_CLIMB))
    {
        var touches = collision_rectangle(bbox_left+2,bbox_top+2,bbox_right-3,bbox_bottom-3,objFence,0,1);
        with(other)
        {
            if(!climbingLock[other.playerID]) // not climbing
            {
                if(aerialCatchCooldown[other.playerID]) aerialCatchCooldown[other.playerID]--;
                if(sign(other.yspeed) == other.gravDir) aerialCatchCooldown[other.playerID] = 0;
                if(touches &amp;&amp; (other.yDir == -other.gravDir || other.climbing) &amp;&amp; aerialCatchCooldown[other.playerID] &lt;= 0)
                {
                    climbingLock[other.playerID] = lockPoolLock(PL_LOCK_MOVE,
                        PL_LOCK_SLIDE,
                        PL_LOCK_GRAVITY,
                        PL_LOCK_TURN);
                    climbingLock[other.playerID].targetInstance = other.id;
                    other.yspeed = 0;
                    other.xspeed = 0;
                    other.ground = 0;
                    other.jumpCounter = !jumpOff;
                    aerialCatchCooldown[other.playerID] = 30;
                }
            }
            else // climbing
            {
                var angle = point_direction(0,0,other.xDir,other.yDir);
                if(other.xDir != 0) other.xspeed = cos(degtorad(angle))*other.climbSpeed;
                else other.xspeed = 0;
                if(other.yDir != 0) other.yspeed = -sin(degtorad(angle))*other.climbSpeed;
                else other.yspeed = 0;
                if(other.isShoot &amp;&amp; !shootWhenClimbing)
                {
                    other.yspeed = 0;
                    other.xspeed = 0;
                }
                if(other.xspeed != 0 || other.yspeed != 0)
                {
                    climbTimer[other.playerID]++;
                    if(climbTimer[other.playerID] &gt;= 16) climbTimer[other.playerID] = 0;
                }
                else climbTimer[other.playerID] = floor(other.playerID/8)*8;
                if((climbTimer[other.playerID] mod 16) &lt; 8) other.spriteX = 15;
                else other.spriteX = 16;
                other.jumpCounter = !jumpOff;
                
                var detach = false;
                if(global.keyJumpPressed[other.playerID]) // jump off
                {
                    detach = true;
                    with(other)
                    {
                        playerJump();
                        if(!other.jumpOff) yspeed = 0;
                    }
                }
                if(!touches) // no touch
                {
                    detach = true;
                }
                if(detach)
                {
                    climbingLock[other.playerID] = lockPoolRelease(climbingLock[other.playerID]);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
