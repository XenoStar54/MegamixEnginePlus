<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGrenadePose</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprGrenadeMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

customPose = true;
hasTriggeredFall = false;
introType = 0;
contactDamage = 4;
ground = false;
attackTimer = 0;
refXspeed = 0
shotGrenade = 0
debrisIDMax = 8
for (i = 0; i &lt; debrisIDMax; i++)
    debrisID[i] = -4

mm8Music = 0;

grenadeDestroyerON = 0
lockTransitions = 0

GrenadeStepNumber = 0
phasechange = 0

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 999;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;


manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = make_color_rgb(0, 89, 251);
healthBarSecondaryColor[1] = make_color_rgb(255, 162, 69);

music = "Rockman8intro.ogg";
musicType = "OGG";
musicTrackNumber = 0;
musicLoop = true;
musicLoopSecondsStart = 2.930;
musicLoopSecondsEnd = 36.000;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 4);

// MM2
enemyDamageValue(objMetalBlade, 0);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 4);
enemyDamageValue(objShadowBlade, 0);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objBlackHoleBomb, 4);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 2);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 4);
enemyDamageValue(objGrabBuster, 2);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 0);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 0);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 3);

// Other
enemyDamageValue(objMagneticShockwave, 4);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1.5, 1.5);
}
if (entityCanStep())
{
    
    // Intro animation
    if (startIntro)
    {
        image_xscale = -1;
        canFillHealthBar = false;
        
        startIntro = false;
        isIntro = true;
        
        blockCollision = blockCollisionStart;
        grav = gravStart;
        
        imageNoMin = 0;
        imageTimerMax = 6;
        
        //with(objTimeSwitch)
        //image_index = 10
        
        
    }
    else if (isIntro)
    {
        attackTimer ++;
        
        // stop on hitting ground
        if (ycoll &gt; 0)
        {
            yspeed = 0;
            xspeed = 0;
                
            image_index = 0;
        }
        
        else if (attackTimer == 50)
        {
        visible = true; 
        playSFX(sfxExplosion);
        instance_create(x - 4, y + 8, objBigExplosion)
        instance_create(x - 39, y + 8, objBigExplosion)
        instance_create(x + 31, y + 8, objBigExplosion)
        instance_create(x, y, objBigExplosion)
        instance_create(x - 20, y, objBigExplosion)
        instance_create(x + 30, y, objBigExplosion)
        instance_create(x - 37, y - 20, objBigExplosion)
        instance_create(x - 3, y - 35, objBigExplosion)
        instance_create(x + 33, y - 35, objBigExplosion)
        instance_create(y - 23, y - 48, objBigExplosion)
        instance_create(x + 3, y - 48, objBigExplosion)
        instance_create(x, y - 53, objBigExplosion)
        }
        else if (attackTimer == 95)
        {
        image_index = 0;
        sprite_index = sprGrenadePose  
        }
        else if (attackTimer == 100)
        {
        image_index = 1;  
        }
        else if (attackTimer == 105)
        {
        image_index = 2;  
        }
        else if (attackTimer == 110)
        {
        image_index = 3;  
        }
        else if (attackTimer == 115)
        {
        image_index = 4;  
        }
        else if (attackTimer == 120)
        {
        image_index = 5;  
        }
        else if (attackTimer == 125)
        {
        image_index = 6;  
        }
        else if (attackTimer == 145)
        {                    
        image_index = 9;  
        }
        else if (attackTimer == 150)
        {
        image_index = 10;  
        }
        else if (attackTimer == 155)
        {
        image_index = 11;  
        }
        else if (attackTimer == 180)
        {
            canFillHealthBar = true;
            isIntro = false;
            attackTimer = 0;
            setTargetStep();
        }
    
        
    }
    if (isFight)
    {
        if(mm8Music == 0){
            mm8Music = 1;
            playMusic("MM8Boss.ogg", "OGG",0, 5.800, 26.000, 1, 0.8);
        }
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.25;
        }
        
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
          if(!phasechange)
          {
            if(healthpoints &lt;= 18 &amp;&amp; !grenadeDestroyerON) //crazy
            {
            randomiser = choose(5);
            }
            else
            {
            randomiser = choose(1,1.5,3, 4);
            }
           }
           else //phasechange
           {
           randomiser = choose(1,5.5,3, 4);
           }
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        if (sprite_index == sprGrenadeDash)
        contactDamage = 6
        else
        contactDamage = 4
        
        switch (phase)
        {
            case 0: // idle 
                image_index = 0
                sprite_index = sprGrenadeStand
                
                if (attackTimer &gt;= 15)
                {
                    phase = randomiser;
                    attackTimer = 0;
                }
                break;
                
           case 1: // Grenade!!!
                if (image_xscale == 1)
                        {
                        var destX = view_xview + view_wview
                        }
                        else
                        {
                        var destX = view_xview
                        } 
                
                
                if (attackTimer &lt; 1)
                {
                    
                }
                if (attackTimer == 1 &amp;&amp; !shotGrenade)
                {
                delay = 3;
                sprite_index = sprGrenadeJump            
                yspeed = -7.85
                ground = false;
                hasFired = true; 
                xspeed = arcCalcXspeed(yspeed, grav, x, y, destX, y)                                                           
                }
                if (yspeed &gt;= 0)
                {
                if(sprite_index != sprGrenadeJumpShoot)
                {
                image_xscale *= -1
                attackTimer = 0
                shotGrenade = 1
                sprite_index = sprGrenadeJumpShoot
                }
                 if (attackTimer == 1)
                  { 
                  image_index = 0
                  var proj = instance_create(x+13*image_xscale,y,objGrenadeManGrenade);
                  proj.xspeed = image_xscale*2.5;
                  proj.image_xscale = image_xscale;
                  playSFX(sfxGrenadeGrenade)
                  }
                 if (attackTimer == 5)
                  { 
                  image_index = 1
                  var proj = instance_create(x+13*image_xscale,y,objGrenadeManGrenade);
                  proj.xspeed = image_xscale*2.5;
                  proj.image_xscale = image_xscale;
                  playSFX(sfxGrenadeGrenade)
                  
                  }
                 if (attackTimer == 10)
                  { 
                  image_index = 2
                  var proj = instance_create(x+13*image_xscale,y,objGrenadeManGrenade);
                  proj.xspeed = image_xscale*2.5;
                  proj.image_xscale = image_xscale;
                  playSFX(sfxGrenadeGrenade)
                  
                  }
                  if (attackTimer == 15)
                  { 
                  image_index = 3               
                  }
                }
                                                                                 
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 20)
                {
                    
                    phase = 0;
                    attackTimer = 0
                    xspeed = 0
                    shotGrenade = 0
                }
                break;
            
            case 1.5: // Jump in            
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            { 
            image_index = 0
            sprite_index = sprGrenadeDuck
            }
            
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 5)
            {
                    phase = 2;
                    attackTimer = 0
            }
            break;
            
            case 2: // Dash 
            xspeed = 3.5 * image_xscale;  
            sprite_index = sprGrenadeDash
            image_speed = 0.25  
            
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            { 
            }
            if (attackTimer == 1)
            { 
            playSFX(sfxGrenadeDash)
            }
            if (attackTimer == 3 || attackTimer == 6 || attackTimer == 9 || attackTimer == 12 || attackTimer == 15 || attackTimer == 18 || attackTimer == 21 || attackTimer == 24 || attackTimer == 27 || attackTimer == 30 || attackTimer == 33 || attackTimer == 36 || attackTimer == 39 || attackTimer == 42 || attackTimer == 45)
            { 
            xd = (x - (10 * image_xscale))
                        if positionCollision(xd, (bbox_bottom + 1))
                        {
                            i = instance_create(xd, (bbox_bottom - 1), objSlideDust)
                            i.image_xscale = image_xscale
                            i.vspeed = -0.5
                            i.hspeed = ((-xspeed) / 8)
                        }
            with (instance_create(bboxGetXCenter(), y, objTrailEffect))
                        {
                            image_xscale = other.image_xscale
                            sprite_index = sprGrenadeDashTrail
                            image_index = other.image_index
                        }   
            }
        
            if (xcoll != 0)
            {
            image_xscale *= -1;
            phase = 0;
            attackTimer = 0
            xspeed = 0
            }
                    
            
            break;
            
            case 3: // Flash Bomb on ground          
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            { 
            }
            if (attackTimer == 1)
            { 
            sprite_index = sprGrenadeShoot
            }
            if (attackTimer == 5)
            { 
            var proj = instance_create(x+13*image_xscale,y - 5,objGrenadeFlashBombStraight);
                  proj.xspeed = image_xscale*2.8;
                  proj.image_xscale = image_xscale;
            }
            
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 100)
            {
                    phase = 0;
                    attackTimer = 0
            }
            break;
            
        case 3.5: //Wall
        if(attackTimer == 1 || attackTimer == 15 || attackTimer == 35 ||  attackTimer == 55)
        {
        randomize()
                        var debrisSprite = choose(sprGrenadeDebrisBar, sprGrenadeDebrisBar, sprGrenadeDebrisBar, sprGrenadeDebrisPipe, sprGrenadeDebrisPipe)
                        
                        if (instance_exists(objMegaman))
                        var debrisBaseX = sprite_get_xcenter_object(objMegaman)
                        else
                        var debrisBaseX = round((view_xview + (view_wview / 2)))
                        
                        var debrisOffset = irandom_range(-64, 64)
                        var debrisX = (debrisBaseX + debrisOffset)
                        debrisX = min(max(debrisX, (view_xview + 32)), ((view_xview + view_wview) - 32))
                        var debrisIDToUse = 0
                        i = 0
                        while (i &lt; debrisIDMax)
                        {
                            if (debrisID[i] == noone || (!instance_exists(debrisID[i])))
                            {
                                debrisIDToUse = i
                                break
                            }
                            else
                            {
                                i++
                                continue
                            }
                        }
                        debrisID[debrisIDToUse] = instance_create(debrisX, view_yview, objGrenadeDebris)
                        debrisID[debrisIDToUse].sprite_index = debrisSprite
        }
        
        if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            { 
            }
            
        if (attackTimer == 1)
        {
        screenShake(64, 0, 2);
        image_index = 0;
        sprite_index = sprGrenadePose  
        }
        if (attackTimer == 5)
        {
        image_index = 1;  
        }
        if (attackTimer == 10)
        {
        image_index = 2;  
        }
        if (attackTimer == 15)
        {
        image_index = 3;  
        }
        if (attackTimer == 20)
        {
        image_index = 4;  
        }
        if (attackTimer == 25)
        {
        image_index = 5;  
        }
        if (attackTimer == 30)
        {
        image_index = 6;  
        }
        if (attackTimer == 35)
        {                    
        image_index = 9;  
        }
        if (attackTimer == 40)
        {
        image_index = 10;  
        }
        if (attackTimer == 45)
        {
        image_index = 11;  
        }
        if (attackTimer == 75)
        {
        
        phase = 0;
        attackTimer = 0
            
        }
        break;
        
        case 4: // Jump Flash Bomb           
                
                if (attackTimer &lt; 1)
                {
                    
                }
                
                if (attackTimer == 1 &amp;&amp; !shotGrenade)
                {
                delay = 3;
                sprite_index = sprGrenadeJump            
                yspeed = -6.5
                ground = false;
                hasFired = true; 
                xspeed = 7 * image_xscale;                                                  
                }
                
             if (xcoll != 0)
               {
                image_xscale *= -1;
                sprite_index = sprGrenadeWall
                yspeed = 0
                xspeed = 0
                pauseGravity = true
                shotGrenade = 1
                attackTimer = 0
               }
              
             if(shotGrenade == 1)
             { 
             if (attackTimer == 1)
                {
                image_index = 1
                }
                if (attackTimer == 15)
                {
                image_index = 2
                var proj = instance_create(x+13*image_xscale,y - 5,objGrenadeFlashBomb);
                  proj.image_xscale = image_xscale;
                }
                if (attackTimer == 20)
                {
                sprite_index = sprGrenadeJump
                pauseGravity = false
                }
                if (ground)
                {
                    sprite_index = sprGrenadeStand
                }
                
                if (ground &amp;&amp; attackTimer &gt; 100)
                {
                    phase = 0;
                    attackTimer = 0
                    shotGrenade = 0
                }
                
                
             }
             break;
             
             case 5: // Destroyer
                
                if (attackTimer &lt; 14 &amp;&amp; !shotGrenade)
                {
                with (instance_create(bboxGetXCenter(), y, objTrailEffect))
                        {
                            image_xscale = other.image_xscale
                            sprite_index = sprGrenadeJumpTrail
                            image_index = other.image_index
                        } 
                }           
                
                if (attackTimer &lt; 1)
                {
                    
                }
                
                if (attackTimer == 1 &amp;&amp; !shotGrenade)
                {
                delay = 3;
                sprite_index = sprGrenadeJump            
                yspeed = -6.5
                ground = false;
                hasFired = true; 
                xspeed = 7 * image_xscale;                                                  
                }
                
             if (xcoll != 0)
               {
                image_xscale *= -1;
                sprite_index = sprGrenadeWall
                yspeed = 0
                xspeed = 0
                pauseGravity = true
                shotGrenade = 1
                attackTimer = 0
               }
              
             if(shotGrenade == 1)
             { 
             if (attackTimer == 1)
                {
                image_index = 1
                }
                if (attackTimer == 15)
                {
                canHit = 0
                shiftVisible = 3
                image_index = 2 
                var proj = instance_create(x+13*image_xscale,y - 5,objGrenadeDestroyer);
                  proj.image_xscale = image_xscale;
                  proj.GrenadeDestroyerStep = objGrenadeDestroyerStep1
                var proj = instance_create(x+13*image_xscale,y - 5,objGrenadeDestroyer);
                  proj.image_xscale = image_xscale;
                  proj.GrenadeDestroyerStep = objGrenadeDestroyerStep2
                var proj = instance_create(x+13*image_xscale,y - 5,objGrenadeDestroyer);
                  proj.image_xscale = image_xscale;
                  proj.GrenadeDestroyerStep = objGrenadeDestroyerStep3
                var proj = instance_create(x+13*image_xscale,y - 5,objGrenadeDestroyer);
                  proj.image_xscale = image_xscale;
                  proj.GrenadeDestroyerStep = objGrenadeDestroyerStep4
                
                    
                }
                if (attackTimer == 120)
                {
                sprite_index = sprGrenadeJump
                pauseGravity = false
                canHit = 1
                
                if(image_xscale = 1)
                GrenadeStepNumber = 1
                else
                GrenadeStepNumber = 3
                
                phasechange = 1
                
                }
                if (ground)
                {
                    sprite_index = sprGrenadeStand
                }
                
                if (ground &amp;&amp; attackTimer &gt; 180)
                {
                    phase = 0;
                    attackTimer = 0
                    shotGrenade = 0
                    grenadeDestroyerON = 1                    
                }
                
             }
             break;
             
             case 5.5: // Jump in            
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1)
            { 
            image_index = 0
            sprite_index = sprGrenadeDuck
            }
            
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 5)
            {
                    phase = 6;
                    attackTimer = 0
                     
            }
            break;
            
            case 6: //phase change floor jump
                if (attackTimer &lt; 1)
                {
                    
                }
                if (attackTimer == 1 &amp;&amp; !shotGrenade)
                {                
                delay = 3;
                sprite_index = sprGrenadeJump            
                yspeed = -8
                JumpNumber = choose(0,1)
                  if(GrenadeStepNumber == 1){ 
                    if (instance_exists(target)){ 
                     if(!JumpNumber){
                         GrenadeStep = objGrenadeDestroyerStep2
                     }
                     else
                     {
                     GrenadeStep = objGrenadeDestroyerStep3
                     }
                    }
                   else{
                    GrenadeStep = objGrenadeDestroyerStep3
                    }
                  }  
                  if(GrenadeStepNumber == 2){ 
                    if (instance_exists(target)){ 
                     if(!JumpNumber){
                         GrenadeStep = objGrenadeDestroyerStep1
                     }
                     else
                     {
                     GrenadeStep = objGrenadeDestroyerStep3
                     }
                    }
                   else{
                    GrenadeStep = objGrenadeDestroyerStep3
                    }
                  } 
                  if(GrenadeStepNumber == 3){ 
                    if (instance_exists(target)){ 
                     if(!JumpNumber){
                         GrenadeStep = objGrenadeDestroyerStep1
                     }
                     else
                     {
                     GrenadeStep = objGrenadeDestroyerStep2
                     }
                    }
                   else{
                    GrenadeStep = objGrenadeDestroyerStep3
                    }
                  }    
                xspeed = xSpeedAim(x, y, GrenadeStep.x, GrenadeStep.y, yspeed, grav);
                ground = false;
                hasFired = true;                                                          
                }
                if (ground)
                {
                    calibrateDirection();
                    phase = 0;
                    attackTimer = 0
                    xspeed = 0
                    yspeed = 0
                    playSFX(sfxKnightLand)
                    
                    if(GrenadeStep == objGrenadeDestroyerStep1){
                    GrenadeStepNumber = 1
                    }
                    if(GrenadeStep == objGrenadeDestroyerStep2){
                    GrenadeStepNumber = 2
                    }
                    if(GrenadeStep == objGrenadeDestroyerStep3){
                    GrenadeStepNumber = 3
                    }
                }
        
        }   
      
      
    }
}
else
{ }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
lockTransitions = 1

// Destroy projectiles on death
with (objGrenadeManGrenade)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objGrenadeFlashBombStraight)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objGrenadeFlashBomb)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}

with (objGrenadeDebris)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
