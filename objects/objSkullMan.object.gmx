<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSkullMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskSkullMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprSkullManPose;
poseImgSpeed = 10 / 60;
contactDamage = 4;

spriteMain = sprSkullMan;

ground = false;
timer = 0;
barrageAmount = 2;
phase = 0;

ignoreSlide = 1;
barrier = noone;
walkTime = 0;
spd = 2.5;

// Health Bar
healthBarPrimaryColor[1] = 13;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_4.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// weak to metal type attacks, semiweak to acid/water, immune to Pharaoh Shot, normal to everything else

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 4);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 2);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 4);

// MM4
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objPharaohShot, 0);
enemyDamageValue(objDustCrusher, 4);

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 1);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 4);

// MM10
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 0);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 0);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 2);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 2);
enemyDamageValue(objMagicCard, 0);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 0);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(isIntro)
    {
        phase = 0;
        timer = 0;
        barrageAmount = 2;
    }
    else if (isFight == true)
    {
        if(phase == 0) // whoever moves first loses
        {
            calibrateDirection();
            if(sprite_index != spriteMain)
            {
                sprite_index = spriteMain;
            }
            image_index = 0;
            if(instance_exists(objMegaman))
            {
                if((objMegaman.xspeed != 0 || objMegaman.xDir != 0) &amp;&amp; !objMegaman.isHit &amp;&amp; !(ignoreSlide &amp;&amp; objMegaman.isSlide))
                {
                    // MOVE!
                    if(barrageAmount)
                    {
                        barrageAmount--;
                        phase = 1;
                        timer = 0;
                    }
                    else
                    {
                        phase = 2;
                        timer = 0;
                    }
                }
            }
            if(instance_exists(prtPlayerProjectile))
            {
                // JUMP!
                phase = 2;
                timer = 0;
            }
        }
        if(phase == 1) // shoot
        {
            calibrateDirection();
            timer++;
            if(timer &lt; 11)
            {
                image_index = 1;
            }
            else if(timer &lt; 22)
            {
                image_index = 6;
            }
            else if(timer == 22)
            {
                image_index = 7;
            }
            else if(timer == 23)
            {
                image_index = 7;
                var bullet = instance_create(x+16*image_xscale,y,objSkullManBullet);
            }
            else if(timer &lt; 34)
            {
                image_index = 7;
            }
            else if(timer &lt; 45)
            {
                image_index = 6;
            }
            else if(timer == 45)
            {
                image_index = 7;
            }
            else if(timer == 46)
            {
                image_index = 7;
                var bullet = instance_create(x+16*image_xscale,y,objSkullManBullet);
            }
            else if(timer &lt; 57)
            {
                image_index = 7;
            }
            else if(timer &lt; 68)
            {
                image_index = 6;
            }
            else if(timer == 68)
            {
                image_index = 7;
            }
            else if(timer == 69)
            {
                image_index = 7;
                var bullet = instance_create(x+16*image_xscale,y,objSkullManBullet);
            }
            else if(timer &lt; 80)
            {
                image_index = 7;
            }
            else
            {
                timer = 0;
                phase = 0;
            }
        }
        else if(phase == 2) // jump
        {
            if(ground)
            {
                timer++;
                if(timer &lt; 10)
                {
                    calibrateDirection();
                    image_index = 10;
                }
                else if(timer == 10)
                {
                    calibrateDirection();
                    image_index = 11;
                    yspeed = -7*sign(grav);
                    if(target) xspeed = xSpeedAim(x,y,target.x-image_xscale*40,target.y,yspeed,grav);
                    else xspeed = image_xscale;
                }
                else if(timer &lt; 18)
                {
                    xspeed = 0;
                    image_index = 10;
                }
                else // make shield
                {
                    timer = 0;
                    phase = 3;
                    image_index = 10;
                }
            }
            else
            {
                image_index = 11;
            }
        }
        else if(phase == 3) // shield
        {
            timer++;
            if(timer &lt; 9)
            {
                image_index = 0;
            }
            else if(timer &lt; 46)
            {
                image_index = 8;
            }
            else if(timer == 46)
            {
                image_index = 9;
            }
            else if(timer == 47)
            {
                image_index = 9;
                barrier = instance_create(x,y,objSkullManBarrier);
                barrier.motherObject = self;
            }
            else if(timer &lt; 66)
            {
                image_index = 9;
            }
            else if(timer &lt; 68)
            {
                image_index = 0;
            }
            else
            {
                phase = 4;
                timer = 0;
                calibrateDirection();
            }
        }
        else if(phase == 4) // wait for shield to die off
        {
            image_index = (!ground)*11;
            calibrateDirection();
            if(!instance_exists(barrier) || barrier == noone)
            {
                timer++;
                if(timer &gt;= 30)
                {
                    timer = 0;
                    phase = 5;
                    if(target)
                    {
                        walkTime = abs(x - (target.x - image_xscale*12))/abs(spd);
                    }
                    else
                    {
                        walkTime = 0;
                    }
                }
            }
        }
        else if(phase == 5) // walk to Mega
        {
            if(timer &lt; walkTime)
            {
                xspeed = spd*image_xscale;
                if(timer mod 5 == 0)
                {
                    if(image_index &lt; 2 || image_index &gt; 4) image_index = 2;
                    else image_index++;
                }
                timer++;
            }
            else
            {
                image_index = 0;
                xspeed = 0;
                if(walkTime != 0)
                {
                    walkTime = 0;
                    timer = 0;
                }
                else
                {
                    timer++;
                    if(timer &gt; 32)
                    {
                        timer = 0;
                        phase = 0;
                        barrageAmount = 2;
                    }
                }
            }
        }
        
        if(!instance_exists(barrier)) barrier = noone;
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(barrier) &amp;&amp; barrier != noone)
{
    other.guardCancel = 3;
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objSkullManBullet) instance_destroy();
with (barrier) instance_destroy();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
