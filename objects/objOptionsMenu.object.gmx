<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprOptionsMenuBG</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

if (!instance_number(object_index) &gt; 1)
{
    instance_destroy();
    visible = 0;
    exit;
}

cursorImgIndex = 0;
cursorImgSpd = 0.2;

arrowBlinkTimer = 20;
showArrow = true;

phase = 0;
option = 0;
selected = 0;
buffer = 0;
pID = 0;

visibleOptions = 9;
optionOffset = 0;

verticalQuickScrollTimer = 25;
horizontalQuickScrollTimer = 25;

tickUpSFX = noone;
tickDownSFX = noone;

// Control settings
newControls = 0;
current = 'NONE';
press = 1;
currentKeys[40]=-1;
keyID = 0;
key = -1;

// Option text
optionText[0] = 'CLOSE';
optionText[1] = 'CONFIGURE CONTROLS';
optionText[2] = 'CONFIGURE GAMEPAD';
optionText[3] = 'WINDOW SIZE';
optionText[4] = 'FULLSCREEN';
optionText[5] = 'RESOLUTION';
optionText[6] = 'PIXEL RATIO';
optionText[7] = 'PERFECT FULLSCREEN';
optionText[8] = 'SHADERS';
optionText[9] = 'FILTER';
optionText[10] = 'CRT DISTORTION';
optionText[11] = 'CRT DISTORT VAL';
optionText[12] = 'BORDER GRAPHIC';
optionText[13] = 'V-SYNC';
optionText[14] = 'MUSIC VOLUME';
optionText[15] = 'SOUND VOLUME';
optionText[16] = 'PLAYER COUNT';
optionText[17] = 'SHOW FPS';
optionText[18] = 'SHOW CONTROLLER';
optionText[19] = 'DAMAGE POPUP';
optionText[20] = 'CHARGE BAR';
optionText[21] = 'LIFE COUNTER';
optionText[22] = 'MM COLOR';
optionText[23] = 'MOVING TEXT';
optionText[24] = 'PICKUP EFFECT';
optionText[25] = 'ESC KEY BEHAVIOR';
optionText[26] = 'COLORED TEXT OVERLAYS';
optionText[27] = 'ITEM GRAPHICS';
optionText[28] = 'DEATH EFFECT';
optionText[29] = 'JUMP SOUND';
optionText[30] = 'TELEPORT SOUND';
optionText[31] = 'CHECKPOINT NOT.';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior
switch (phase)
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
        {
            phase++;
        }
        break;
    
    // Doing menu selections
    case 2: // done elsewhere 
        break;
    
    // Fading out
    case 3:
        if (room == rmOptions)
        {
            var ID;
            if (global.nextRoom != rmTitleScreen)
            {
                saveLoadOptions(true);
            }
            global.nextRoom = rmTitleScreen;
        }
        else
        {
            global.nextRoom = -1;
            phase++;
        }
        break;
    
    // End fading out
    case 4:
        if (objGlobalControl.fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
        {
            global.nextRoom = 0;
            visible = 0;
        }
        else if (objGlobalControl.fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
        {
            queuePause();
            instance_destroy();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Most menu selections

if (instance_exists(objColoredTextOverlaysMenu))
{
    exit;
}

if (phase == 2 &amp;&amp; !selected)
{
    // var maxplayers = min(4+gamepad_get_device_count(),4);
    
    // left / right controlled selections
    var dir = (global.keyRightPressed[0] || (global.keyRight[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0)) - (global.keyLeftPressed[0] || (global.keyLeft[0] &amp;&amp; horizontalQuickScrollTimer &lt;= 0));
    var holdDir = global.keyRight[0] - global.keyLeft[0];
    
    if (dir != 0)
    {
        switch (option)
        {
            // Screensize
            case 3:
                var pre = global.screenSize;
                setScreenSize(global.screenSize + dir);
                if (global.screenSize != pre)
                {
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // fullscreen
            case 4:
                pre = window_get_fullscreen();
                setFullscreen(max(0, min(1, window_get_fullscreen() + dir)));
                if (window_get_fullscreen() != pre)
                {
                    playSFX(sfxMenuMove);
                }
                    
                break;
                
            // resolution
            case 5:
                pre = global.resolution;
                global.resolution = max(0, min(1, global.resolution + dir));
                if (pre != global.resolution)
                {
                    display_reset(0, global.vsync);
                    setScreenSize(global.screenSize);
                    
                    playSFX(sfxMenuMove);
                }
                
                break;
                
            // pixel ratio
            case 6:
                pre = global.pixelRatio;
                global.pixelRatio = max(0, min(2, global.pixelRatio + dir));
                if (pre != global.pixelRatio)
                {
                    setScreenSize(global.screenSize);
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // accurate fullscreen
            case 7:
                pre = global.accurateFullscreen;
                global.accurateFullscreen = max(0, min(1, global.accurateFullscreen + dir));
                if (pre != global.accurateFullscreen)
                {
                    playSFX(sfxMenuMove);
                }
                
                break;
                
            // shaders
            case 8:
                if (global.shadersCompatible)
                {
                    pre = global.shadersEnabled;
                    global.shadersEnabled = min(max(0, global.shadersEnabled + dir), 1);
                    if (global.shadersEnabled != pre)
                    {
                        playSFX(sfxMenuMove);
                    }
                }
                else
                {
                    playSFX(sfxError);
                }
                
                break;
            
            // filters
            case 9:
                pre = global.filter;
                global.filter = min(max(0, global.filter + dir), 5);
                if (global.filter != pre)
                {
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // crt distort
            case 10:
                if (global.filter == 2)
                {
                    pre = global.crtDistort;
                    global.crtDistort = min(max(0, global.crtDistort + dir), 1);
                    if (global.crtDistort != pre)
                    {
                        playSFX(sfxMenuMove);
                    }
                }
                else
                {
                    playSFX(sfxError);
                }
                
                break;
                
            // border graphic
            case 12:
                pre = global.borderGraphic;
                global.borderGraphic = min(max(0, global.borderGraphic + dir), 25);
                if (global.borderGraphic != pre)
                {
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // V-Sync
            case 13:
                pre = global.vsync;
                global.vsync = max(0, min(1, global.vsync + dir));
                if (pre != global.vsync)
                {
                    display_reset(0, global.vsync);
                    setScreenSize(global.screenSize);
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // Music volume
            case 14:
                pre = global.musicvolume;
                global.musicvolume = max(0, min(100, global.musicvolume + 10 * dir));
                
                global.unboundedMusicVolume = -1;
                audio_master_gain(1);
                
                // adjust current music volume to reflect change
                switch (global.levelSongType)
                {
                    default:
                    case "OGG":
                        FMODInstanceSetVolume(global.songMemory, global.levelVolume * (global.musicvolume * 0.01));
                        break;
                    
                    case "VGM":
                        if (instance_exists(objMusicControl))
                        {
                            v = global.levelVolume * (global.musicvolume * 0.01);
                            if (v &lt;= 1)
                            {
                                audio_sound_gain(objMusicControl.sound_index, v, 0);
                            }
                            else
                            {
                                /* only way to raise music volumes above max using GMS' built in audio engine
                                is to raise the master volume and then lower everything else back down except
                                for the music*/
                                audio_sound_gain(objMusicControl.sound_index, 1, 0);
                                audio_master_gain(v);
                                global.unboundedMusicVolume = v;
                            }
                        }
                        
                        break;
                }
                
                if (global.musicvolume != pre)
                {
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // Sound volume
            case 15:
                pre = global.soundvolume;
                global.soundvolume = max(0, min(100, global.soundvolume + 10 * dir));
                if (global.soundvolume != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Players (co-op)
            case 16:
                pre = global.playerCount;
                global.playerCount = clamp(global.playerCount + dir, 1, global.maxPlayerCount);
                if (global.playerCount != pre)
                {
                    playSFX(sfxMenuMove);
                }
                // initialize player variables for those that are not initialized.
                playerGlobalInit();
                if (global.playerCount &gt; pre)
                {
                    // new players enter level with full life and ammo.
                    // (Note: this can be abused.)
                    resetPlayerState(pre);
                    
                    // allow player to respawn:
                    global.respawnTimer[pre] = 0;
                }
                
                // delete removed players
                with (objMegaman)
                {
                    if (playerID &gt;= global.playerCount)
                    {
                        instance_destroy();
                    }
                }
                break;
            
            // FPS
            case 17:
                pre = global.showFPS;
                global.showFPS = min(max(0, global.showFPS + dir), 1);
                if (global.showFPS != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Controller Overlay
            case 18:
                pre = global.showControllerOverlay;
                global.showControllerOverlay = min(max(0, global.showControllerOverlay + dir), 2);
                if (global.showControllerOverlay != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Damage popup
            case 19:
                pre = global.damagePopup;
                global.damagePopup = min(max(0, global.damagePopup + dir), 1);
                if (global.damagePopup != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Charge Bar
            case 20:
                pre = global.chargeBar;
                global.chargeBar = min(max(0, global.chargeBar + dir), 1);
                if (global.chargeBar != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Life Bar
            case 21:
                pre = global.lifeCounter;
                global.lifeCounter = min(max(0, global.lifeCounter + dir), 1);
                if (global.lifeCounter != pre)
                {
                    playSFX(sfxMenuMove);
                }
                
                break;
            
            // MM Color
            case 22:
                pre = global.mmColor;
                global.mmColor = min(max(0, global.mmColor + dir), 1);
                if (global.mmColor != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // moving text effects
            case 23:
                pre = global.showMovingText;
                global.showMovingText = min(max(0, global.showMovingText + dir), 1);
                if (global.showMovingText != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Instant refills
            case 24:
                pre = global.healthEffect;
                global.healthEffect = min(max(0, global.healthEffect + dir), 1);
                if (global.healthEffect != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Escape key behavior
            case 25:
                pre = global.escapeBehavior;
                global.escapeBehavior = min(max(0, global.escapeBehavior - dir), 2);
                if (global.escapeBehavior != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Pickup Graphics
            case 27:
                pre = global.pickupGraphics;
                global.pickupGraphics = min(max(0, global.pickupGraphics + dir), 1);
                if (global.pickupGraphics != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Death Effect
            case 28:
                pre = global.deathEffect;
                global.deathEffect = min(max(0, global.deathEffect + dir), 1);
                if (global.deathEffect != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Jump Sound
            case 29:
                pre = global.jumpSound;
                global.jumpSound = min(max(0, global.jumpSound + dir), 1);
                if (global.jumpSound != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Teleport Sound
            case 30:
                pre = global.teleportSound;
                global.teleportSound = min(max(0, global.teleportSound + dir), 1);
                if (global.teleportSound != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
            
            // Checkpoint notification
            case 31:
                pre = global.checkpointNotification;
                global.checkpointNotification = min(max(0, global.checkpointNotification + dir), 3);
                if (global.checkpointNotification != pre)
                {
                    playSFX(sfxMenuMove);
                }
                break;
        }
    }
    
    // left/right hold controlled selections
    if (holdDir != 0)
    {
        switch (option)
        {
            case 11:
                if (global.filter == 2)
                {
                    pre = global.crtDistortionAmount;
                    global.crtDistortionAmount = max(0, min(1, global.crtDistortionAmount + 0.005 * holdDir));
                    if (global.crtDistortionAmount != pre)
                    {
                         if (holdDir &gt; 0 &amp;&amp; !audio_is_playing(tickUpSFX))
                         {
                            tickUpSFX = playSFX(sfxMenuScrollUp);
                            stopSFX(tickDownSFX);
                         }
                         
                         if (holdDir &lt; 0 &amp;&amp; !audio_is_playing(tickDownSFX))
                         {
                            tickDownSFX = playSFX(sfxMenuScrollDown);
                            stopSFX(tickUpSFX);
                         }
                    }
                }
                else if (dir == holdDir) // don't spam the sfx
                {
                    playSFX(sfxError);
                }
                
                break;
        }
    }
    
    // pause controlled selections
    var pausePressed = false;
    var backPressed = false;
    for (var i = 0; i &lt; global.playerCount; i++)
    {
        if (global.keyPausePressed[i] || global.keyJumpPressed[i])
        {
            pausePressed = i + 1;
        }
        else if (global.keyShootPressed[i])
        {
            backPressed = i + 1;
        }
    }
    
    if (pausePressed || backPressed)
    {
        var preOption = option;
        if (backPressed)
        {
            option = 0;
        }
        
        switch (option)
        {
            // exit
            case 0:
                selected = true;
                phase++;
                if (!backPressed)
                {
                    playSFX(sfxMenuSelect);
                }
                
                break;
            
            // set keyboard controls
            case 1:
                if (buffer)
                {
                    exit;
                }
                newControls = 1;
                selected = 1;
                current = 'LEFT';
                keyID=0;
                pID = pausePressed - 1;
                for(var i=0;i&lt;40;i++)
                    currentKeys[i]=-1;
                break;
            
            // set gamepad controls
            case 2:
                if (buffer)
                {
                    exit;
                }
                if (!objGlobalControl.joystick_connected)
                {
                    objGlobalControl.joystick_connected = gamepad_get_device_count() &gt; 0;
                }
                if (!objGlobalControl.joystick_connected)
                {
                    playSFX(sfxError);
                    exit;
                }
                newControls = 2;
                keyID=0;
                selected = 1;
                current = 'JUMP';
                pID = pausePressed - 1;
                for(var i=0;i&lt;40;i++)
                    currentKeys[i]=-1;
                break;
            
            // colored text overlays
            case 26:
                playSFX(sfxPause);
                instance_create(x, y, objColoredTextOverlaysMenu);
                break;
        }
        
        // set cursor position back to where it was so the cursor doesn't just teleport
        if (backPressed)
        {
            option = preOption;
        }
    }
    
    // Up / down controls
    if (global.keyUpPressed[0] || (global.keyUp[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
    {
        // up
        option -= 1;
        if (option &lt; 0)
        {
            // loop
            option = array_length_1d(optionText) - 1;
            optionOffset = array_length_1d(optionText) - visibleOptions;
        }
        else if (option &lt; optionOffset)
        {
            optionOffset--;
        }
        
        playSFX(sfxMenuMove);
    }
    else if (global.keyDownPressed[0] || (global.keyDown[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
    {
        // down
        option += 1;
        if (option &gt;= array_length_1d(optionText))
        {
            // loop
            option = 0;
            optionOffset = 0;
        }
        else if (option &gt;= optionOffset + visibleOptions)
        {
            optionOffset++;
        }
        
        playSFX(sfxMenuMove);
    }
    
    // vertical quick scroll timer handling
    if (horizontalQuickScrollTimer == 25 // don't quick scroll vertically if doing it horizontally
    &amp;&amp; (global.keyUp[0] ^^ global.keyDown[0]) // only activate quick scroll if one button is being held
    &amp;&amp; !(option &lt;= 0 &amp;&amp; global.keyUp[0]) &amp;&amp; !(option &gt;= array_length_1d(optionText) - 1 &amp;&amp; global.keyDown[0])) // don't wrap around with quick scroll
    {
        if (verticalQuickScrollTimer &lt;= 0)
        {
            // slight pause between scrolls
            verticalQuickScrollTimer = 9;
        }
        
        verticalQuickScrollTimer--;
    }
    else
    {
        verticalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    }
    
    // horizontal quick scroll timer handling
    if (verticalQuickScrollTimer == 25 // don't quick scroll horizontally if doing it vertically
    &amp;&amp; (global.keyLeft[0] ^^ global.keyRight[0]))
    {
        if (horizontalQuickScrollTimer &lt;= 0)
        {
            // slight pause between scrolls
            horizontalQuickScrollTimer = 9;
        }
        
        horizontalQuickScrollTimer--;
    }
    else
    {
        horizontalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup controls
if (!newControls)
{
    exit;
}

// control configuration
key = -1;

// control configuration
var skip = newControls &amp;&amp; (keyboard_key == vk_delete);

if (newControls == 1)
{
    if (keyboard_check_pressed(vk_anykey))
    {
        // illegal keys
        key = keyboard_key;
        switch (key)
        {
            case vk_f1:
            case vk_f2:
            case vk_f3:
            case vk_f4:
            case vk_f5:
            case vk_f6:
            case vk_f7:
            case vk_f8:
            case vk_f9:
            case vk_f10:
            case vk_f11:
            case vk_f12:
            case vk_escape:
            case vk_alt:
            case vk_nokey:
            case vk_printscreen:
                exit;
        }
    }
    else
    {
        // no keys pressed
        press = 0;
    }
    
    event_user(0);
    
    if (key != -1 &amp;&amp; !press)
    {
        if(skip)
            key=-1;
        currentKeys[keyID + pID*10]=key;
        keyID++;
        // assign key
        press = 1;
        switch (current)
        {
            case 'LEFT':
                if(!skip)
                    global.leftKey[pID] = key;
                current = 'RIGHT';
                break;
            case 'RIGHT':
                if(!skip)
                    global.rightKey[pID] = key;
                current = 'UP';
                break;
            case 'UP':
                if(!skip)
                    global.upKey[pID] = key;
                current = 'DOWN';
                break;
            case 'DOWN':
                if(!skip)
                    global.downKey[pID] = key;
                current = 'JUMP';
                break;
            case 'JUMP':
                if(!skip)
                    global.jumpKey[pID] = key;
                current = 'SHOOT';
                break;
            case 'SHOOT':
                if(!skip)
                    global.shootKey[pID] = key;
                current = 'SLIDE';
                break;
            case 'SLIDE':
                if(!skip)
                    global.slideKey[pID] = key;
                current = 'PREV WPN';
                break;
            case 'PREV WPN':
                if(!skip)
                    global.weaponSwitchLeftKey[pID] = key;
                current = 'NEXT WPN';
                break;
            case 'NEXT WPN':
                if(!skip)
                    global.weaponSwitchRightKey[pID] = key;
                current = 'PAUSE';
                break;
            case 'PAUSE':
                if(!skip)
                    global.pauseKey[pID] = key;
                current = 'LEFT';
                pID += 1;
                if (pID &gt;= global.playerCount)
                {
                    selected = 0;
                    buffer = 1;
                    alarm[0] = 10;
                    newControls = 0;
                }
                
                break;
        }
        
        playSFX(sfxMenuMove);
    }
}

// gamepad configuration
if (newControls == 2)
{
    if (!objGlobalControl.joystick_connected)
    {
        newControls = 0;
        selected = 0;
        press = 1;
        buffer = 1;
        alarm[0] = 10;
        exit;
    }
    if(!skip)
    {
        var i, b;
        var jID = pID;
        if (!gamepad_is_connected(jID))
            jID += 4 - objGlobalControl.xinputDeviceCount;
        b = gamepad_button_count(jID);
        
        for (i = 0; i &lt; b; i += 1)
        {
            if (gamepad_button_check(jID, i))
            {
                key = i;
                break;
            }
        }
    }
    else
    {
        key=vk_delete;
    }
    if (key == -1)
    {
        press = 0;
    }
    else{
        event_user(0);
    }
    if (key != -1 &amp;&amp; !press)
    {
        if(skip)
            key=-1;
        currentKeys[keyID + pID*10]=key;
        keyID++;
        press = 1;
        switch (current)
        {
            case 'JUMP':
                if(!skip)
                    global.joystick_jumpKey[pID] = key;
                current = 'SHOOT';
                break;
            case 'SHOOT':
                if(!skip)
                    global.joystick_shootKey[pID] = key;
                current = 'SLIDE';
                break;
            case 'SLIDE':
                if(!skip)
                    global.joystick_slideKey[pID] = key;
                current = 'PREV WPN';
                break;
            case 'PREV WPN':
                if(!skip)
                    global.joystick_weaponSwitchLeftKey[pID] = key;
                current = 'NEXT WPN';
                break;
            case 'NEXT WPN':
                if(!skip)
                    global.joystick_weaponSwitchRightKey[pID] = key;
                current = 'PAUSE';
                break;
            case 'PAUSE':
                 if(!skip)
                    global.joystick_pauseKey[pID] = key;
                current = 'JUMP';
                pID += 1;
                if (pID &gt;= 1 &amp;&amp; gamepad_get_device_count() &gt; pID) // global.playerCount
                {
                    selected = 0;
                    buffer = 1;
                    alarm[0] = 10;
                    newControls = 0;
                }
                break;
        }
        
        playSFX(sfxMenuMove);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Validate inputs

if(key != -1 &amp;&amp; !press)
{
    for(var i=0;i&lt;10 &amp;&amp; currentKeys[i+pID*10]!=-1;i++)
    {
        if(currentKeys[i+pID*10]==key)
        {
            key=-1;
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

// center display on non-standard resolutions
var drawXPosition = view_xview[0] + view_wview[0] / 2 - 128;
var drawYPosition = view_yview[0] + view_hview[0] / 2 - 112;

// draw menu bg
draw_sprite(sprite_index, 0, drawXPosition, drawYPosition);

// animate cursor
cursorImgIndex += cursorImgSpd;
if (cursorImgIndex &gt;= 5)
{
    cursorImgIndex -= 5;
}

// draw cursor
draw_sprite(sprOptionsCursor, cursorImgIndex, drawXPosition + 34, drawYPosition + 52 + (option) * 14 - (optionOffset) * 14);

// animate arrows
arrowBlinkTimer -= 1;
if (arrowBlinkTimer == 0)
{
    arrowBlinkTimer = 20;
    showArrow = !showArrow;
}

// draw arrows
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

if (optionOffset == 0)
{
    draw_text(drawXPosition + 128, drawYPosition + 42, "- OPTIONS -");
}
else if (showArrow)
{
    draw_sprite(sprArrow, 2, drawXPosition + 128, drawYPosition + 42);
}

if (optionOffset == array_length_1d(optionText) - visibleOptions)
{
    draw_text(drawXPosition + 128, drawYPosition + 182, "- OPTIONS -");
}
else if (showArrow)
{
    draw_sprite(sprArrow, 3, drawXPosition + 128, drawYPosition + 182);
}

// draw options
draw_set_halign(fa_left);
draw_set_valign(fa_top);
for (var j = 0; j &lt; visibleOptions; j++)
{
    var o = optionOffset + j;
    if ((o == 7 &amp;&amp; !global.shadersCompatible) // cannot enable shaders
        || ((o == 10 || o == 11) &amp;&amp; global.filter != 2)) // only edit crt filter settings when crt is on
    {
        draw_set_color(c_gray);
    }
    else
    {
        draw_set_color(c_white);
    }
    
    draw_text_ext(drawXPosition + 48, drawYPosition + 52 + j * 14, optionText[o], 14, 256);
}

draw_set_color(c_white);

// draw current option status'
var opt = '';
for (var j = 0; j &lt; visibleOptions; j++)
{
    switch (optionOffset + j)
    {
        // Resolution
        case 3:
            opt += string(global.screenSize) + 'X';
            break;
        
        // fullscreen
        case 4:
            if (window_get_fullscreen())
            {
                opt += "ON";
            }
            else
            {
                opt += "OFF";
            }
            
            break;
        
        // resolution
        case 5:
            if (global.resolution)
            {
                opt += "WINDOW";
            }
            else
            {
                opt += "NATIVE";
            }
            
            break;
        
        // pixel ratio
        case 6:
            switch (global.pixelRatio)
            {
                default:
                case 0: opt += "1:1"; break;
                case 1: opt += "8:7"; break;
                case 2: opt += "4:3"; break;
                case 3: opt += "16:9"; break;
            }
            
            break;
        
        // accurate fullscreen
        case 7:
            if (global.accurateFullscreen)
            {
                opt += "ON";
            }
            else
            {
                opt += "OFF";
            }
            
            break;
        
        // shaders
        case 8:
            if (global.shadersEnabled)
            {
                opt += "ON";
            }
            else
            {
                opt += "OFF";
            }
            
            break;
        
        // filter
        case 9:
            switch (global.filter)
            {
                default:
                case 0: opt += "NONE"; break;
                case 1: opt += "INTERPOLATE"; break;
                case 2: opt += "CRT"; break;
                case 3: opt += "GREYSCALE"; break;
                case 4: opt += "GAMEBOY"; break;
                case 5: opt += "VIRTUALBOY"; break;
            }
            
            break;
        
        // crt distortion
        case 10:
            if (global.crtDistort)
            {
                opt += "ON";
            }
            else
            {
                opt += "OFF";
            }
            
            break;
        
        // crt distortion value
        case 11:
            opt += string(global.crtDistortionAmount);
            break;
        
        // border graphic
        case 12:
            if (global.borderGraphic &lt;= 0)
            {
                opt += "NONE";
            }
            else
            {
                opt += string(global.borderGraphic);
            }
            
            break;
        
        // V-Sync
        case 13:
            if (global.vsync)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // Music volume
        case 14:
            opt += string(global.musicvolume) + '%';
            
            break;
        
        // Sound volume
        case 15:
            opt += string(global.soundvolume) + '%';
            
            break;
        
        // Co-op
        case 16:
            opt += string(global.playerCount);
            
            break;
        
        // FPS dispaly
        case 17:
            if (global.showFPS == 1)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // controller overlay
        case 18:
            switch (global.showControllerOverlay)
            {
                case 0:
                    opt += 'OFF';
                    break;
                case 1:
                    opt += 'WIDE';
                    break;
                case 2:
                    opt += 'THIN';
                    break;
            }
            
            break;
        
        // damage popup
        case 19:
            if (global.damagePopup == 1)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // charge bar
        case 20:
            if (global.chargeBar == 1)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // life counter
        case 21:
            if (global.lifeCounter)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // mega man colors
        case 22:
            if (global.mmColor)
            {
                opt += 'MM9/MM10';
            }
            else
            {
                opt += 'MM1-MM6';
            }
            
            break;
        
        // moving text effects
        case 23:
            if (global.showMovingText)
            {
                opt += 'ON';
            }
            else
            {
                opt += 'OFF';
            }
            
            break;
        
        // health effect
        case 24:
            switch (global.healthEffect)
            {
                case 0:
                    opt += 'FILL';
                    break;
                case 1:
                    opt += 'INSTANT';
                    break;
            }
            
            break;
        
        // esc key function
        case 25:
            switch (global.escapeBehavior)
            {
                case 0:
                    opt += 'QUIT';
                    break;
                case 1:
                    opt += 'PAUSE';
                    break;
                case 2:
                    opt += 'N/A';
                    break;
            }
            
            break;
        
        // Pickup graphics
        case 27:
            if (global.pickupGraphics)
            {
                opt += 'MM1';
            }
            else
            {
                opt += 'MM2+';
            }
            break;
        
        // Death effect
        case 28:
            if (global.deathEffect)
            {
                opt += 'MM1/MM2';
            }
            else
            {
                opt += 'MM3+';
            }
            break;
        
        // Jump sound
        case 29:
            if (global.jumpSound)
            {
                opt += 'MM1/MM2';
            }
            else
            {
                opt += 'MM3-6';
            }
            break;
        
        // Teleport sound
        case 30:
            if (global.teleportSound)
            {
                opt += 'MM1/MM2';
            }
            else
            {
                opt += 'MM3-MM6';
            }
            break;
        
        // Checkpoint notification
        case 31:
            if (global.checkpointNotification == 0)
            {
                opt += 'ON';
            }
            else if (global.checkpointNotification == 1)
            {
                opt += 'TOP';
            }
            else if (global.checkpointNotification == 2)
            {
                opt += 'CENTER';
            }
            else if (global.checkpointNotification == 3)
            {
                opt += 'BOTTOM';
            }
            
            break;
    }
    
    // next line
    opt += '#';
}

draw_set_halign(fa_right);
draw_text_ext(drawXPosition + 224, drawYPosition + 52, opt, 14, 256);


// draw configure controls popup
if (newControls)
{
    draw_sprite(sprControlconfigureScreen, 0, drawXPosition + 64, drawYPosition + 64);
    draw_set_halign(fa_center);
    if(newControls == 1)
        draw_text(drawXPosition + 128, drawYPosition + 88, 'PRESS KEY FOR');
    else
        draw_text(drawXPosition + 128, drawYPosition + 88, 'PRESS KEY FOR#(PRESS DEL TO SKIP)');
    var playerMod = "";
    playerMod = " (P" + string(pID + 1) + ")";
    draw_text(drawXPosition + 128, drawYPosition + 104, current + playerMod);
}

// colored text overlays
if (global.showColoredTextOverlays)
{
    draw_set_color(make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue));
    draw_set_alpha(global.coloredTextOverlaysOpacity / 255);
    
    draw_rectangle(drawXPosition + 28, drawYPosition + 36, drawXPosition + view_wview[0] - 28, drawYPosition + view_hview[0] - 36, false);
    
    draw_set_color(c_white);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
