<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNewPauseMenu</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2001</depth>
  <persistent>0</persistent>
  <parentName>objPauseMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

phase = 0; // 0: increasing the black rectangle's alpha

option = 0;
itemRow = 0;
helpRow = 0;
helpWeapon = 0;
oldOption = 0;
weaponOffset = 0;
offsetTimer = -1;

pauseRow = 0
pauseRowOption = 0

image_index = 0;
image_speed = 0;

// get currently visible weapons
weaponVisibleN = 0;
for (var i = 0; i &lt;= global.totalWeapons; i++)
{
    if (global.weaponLocked[i] &lt; 2)
    {
        weaponVisible[weaponVisibleN] = i;
        weaponVisibleN++
    }
}
/*visibleWeapons = min(10, weaponVisibleN); // up to 10 visible

for (var i = 0; i &lt; weaponVisibleN; i++)
{
    if (global.weapon[0] == global.weaponHotbar[weaponVisible[i]])
    {
        option = i;
        oldOption = i;
    }
}*/
//woption = i;

weaponX = 0
weaponY = 0
weaponPage = 0
weaponPageMax = ceil(global.totalWeapons/12);

for (var i = weaponPage*12; i &lt; weaponVisibleN; i++){
    if (global.weaponLocked[global.weaponHotbar[i]] &lt; 2)
    {
        weaponSlot[i mod 6, floor(i/6)] = weaponVisible[i];
    }
}
weaponPageMax = ceil(weaponVisibleN/12);
/*
//Row 0
weaponSlot[0,0] = 0
weaponSlot[0,1] = 1

//Row 1
weaponSlot[1,0] = 2
weaponSlot[1,1] = 3

//Row 2
weaponSlot[2,0] = 4
weaponSlot[2,1] = 5

//Row 3
weaponSlot[3,0] = 6
weaponSlot[3,1] = 7

//Row 4
weaponSlot[4,0] = 8
weaponSlot[4,1] = 9

//Row 5
weaponSlot[5,0] = 10
weaponSlot[5,1] = 11
*/
itemOption = 1

visibleWeapons = 12;

oldWeapon = global.weapon[0];
resetWeapon = false; // Should we, after exiting the menu, reset our weapon to the weapon that was used before the pause menu was opened?

wtank = 0;
mtank = 0;

retryConfirm = 0;
exitConfirm = 0;
hotBarArrangeMode = false;

playerID = 0;
costumeID = 0;

// Stop charging
with (objMegaman)
{
    playerPalette();
}

// set these here. makes everyone's lives easier.

etankPositionX = 148;
etankPositionY = 10;
wtankPositionX = 178;
wtankPositionY = 10;
mtankPositionX = 210;
mtankPositionY = 10;

optionsPositionX = 136;
optionsPositionY = 208;
checkPositionX = 158;
checkPositionY = 208;
exitPositionX = 204;
exitPositionY = 208;

arrowTimer = 20;

quickScrollTimer = 0; // 24;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Can't control while options menu is open
if (instance_exists(objOptionsMenu))
{
    exit;
}

// do pause menu
switch (phase)
{
    // Fading out
    case 0:
        with (objGlobalControl)
        {
            if (fadeAlpha == 1)
            {
                global.nextRoom = 0;
                other.visible = 1;
                other.phase = 1;
                showhealth = 0;
            }
        }
        break;
    
    // Fading in
    case 1:
        with (objGlobalControl)
        {
            if (fadeAlpha == 0)
            {
                other.phase = 2;
            }
        }
        event_user(0); // Moving the selection
        
        break;
    
    // Idle
    case 2:
        event_user(0); // Moving the selection
        image_index = helpRow
        // Select the weapon/tank
        if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID])
        {
            if helpRow == 0{
            if (itemRow == 0 &amp;&amp; pauseRow == 0)
            {
                if (instance_exists(objMegaman.vehicle) &amp;&amp; weaponSlot[weaponX,weaponY] != 0)
                {
                    if (!objMegaman.vehicle.weaponsAllowed)
                    {
                        playSFX(sfxError);
                        exit;
                    }
                }
                if (global.weaponLocked[weaponSlot[weaponX,weaponY]])
                {
                    playSFX(sfxError);
                    exit;
                }
                
                global.nextRoom = -1;
                phase = 3;
                
                global.weapon[playerID] = weaponSlot[weaponX,weaponY];
                playSFX(sfxMenuSelect);
            }
            else if (itemOption == 1 &amp;&amp; itemRow == 1 &amp;&amp; pauseRow == 0) // E-Tank
            {
                if (global.eTanks &amp;&amp; global.playerHealth[playerID] &lt; 28)
                {
                    option = 0; // Nothing selected
                    phase = 5;
                    wtank = 0;
                    mtank = 0;
                    global.eTanks -= 1;
                    eTankTimer = 0;
                    playSFX(sfxEnergyRestore, true);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
            else if (itemOption == 2 &amp;&amp; itemRow == 1 &amp;&amp; pauseRow == 0) // W-Tank
            {
                // Check if weapon energy actually needs filling
                var proceed;
                proceed = false;
                for (i = 0; i &lt; global.totalWeapons; i += 1)
                {
                    if (ceil(global.ammo[playerID, i]) &lt; 28)
                    {
                        proceed = true;                        
                        itemRow = 0;
                        pauseRow = 0;
                    }
                }
                
                if (global.wTanks &amp;&amp; proceed)
                {
                    option = 0; // Go back to weapon column
                    phase = 6;
                    mtank = 0;
                    wtank = 1;
                    global.wTanks -= 1;
                    playSFX(sfxMenuSelect);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
            else if (itemOption == 3 &amp;&amp; itemRow == 1 &amp;&amp; pauseRow == 0) // M-Tank
            {
                if (global.mTanks &gt; 0) // Check if health or weapon energy actually needs filling
                {
                    var proceed = false;
                    for (i = 0; i &lt; global.totalWeapons; i += 1)
                    {
                        if (ceil(global.ammo[playerID, i]) &lt; 28)
                        {
                            proceed = true;                      
                            itemRow = 0;
                            pauseRow = 0;
                        }
                    }
                    
                    if (ceil(global.playerHealth[playerID]) &lt; 28)
                    {
                        proceed = true;                      
                        itemRow = 0;
                        pauseRow = 0;
                    }
                    
                    if (proceed) // If proceed is still false after the past calculations, it seems there is nothing to fill
                    {
                        option = 0; // Nothing selected
                        phase = 5;
                        mtank = 1;
                        wtank = 0;
                        global.mTanks -= 1;
                        eTankTimer = 0;
                        playSFX(sfxEnergyRestore, true);
                    }
                    else
                    {
                        playSFX(sfxError);
                    }
                }
                else
                {
                    playSFX(sfxError);
                }
            }
            else if (pauseRow == 1 &amp;&amp; pauseRowOption == 0) // Weapons
            {
                itemRow = 0
                playSFX(sfxMenuSelect);
                exit;
            }
            else if (pauseRow == 1 &amp;&amp; pauseRowOption == 1) // Items
            {
                itemRow = 1
                playSFX(sfxMenuSelect);
                exit;
            }
            else if (pauseRow == 1 &amp;&amp; pauseRowOption == 2) // Options
            {
                instance_create(x, y, objOptionsMenu);
                playSFX(sfxMenuSelect);
                exit;
            }
            else if (pauseRow == 1 &amp;&amp; pauseRowOption == 3) // Retry
            {
                if (!retryConfirm)
                {
                    retryConfirm = true;
                    playSFX(sfxMenuSelect);
                    exit;
                }
            }
            else if (pauseRow == 1 &amp;&amp; pauseRowOption == 4) // Exit
            {
                if (!exitConfirm)
                {
                    exitConfirm = true;
                    playSFX(sfxMenuSelect);
                    exit;
                }
            }
            }
        }
        
        if (global.keyShootPressed[playerID]){
            if pauseRow == 0 &amp;&amp; itemRow == 0{               
                playSFX(sfxElementGrab);
                if helpRow == 0{
                    helpRow = 1
                }  
                else{
                    helpRow = 0
                }  
            }
        }
        // Confirming exit
        if (exitConfirm &amp;&amp; !global.nextRoom)
        {
            if (pauseRow == 1 &amp;&amp; pauseRowOption == 4)
            {
                if (global.keyJumpPressed[playerID]
                    || global.keyPausePressed[playerID])
                {
                    returnFromLevel();
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                exitConfirm = false;
            }
        }
        
        // Confirming retry
        if (retryConfirm &amp;&amp; !global.nextRoom)
        {
            if (pauseRow == 1 &amp;&amp; pauseRowOption == 3)
            {
                if (global.keyJumpPressed[playerID]
                    || global.keyPausePressed[playerID])
                {
                    global.nextRoom = room;
                    playSFX(sfxMenuSelect);
                }
            }
            else
            {
                retryConfirm = false;
            }
        }
        
        break;
    
    // Fading out
    case 3:
        with (objGlobalControl)
        {
            if (fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
            {
                showhealth = 1;
                with (other)
                {
                    if (resetWeapon)
                    {
                        global.weapon[playerID] = oldWeapon;
                        with (objMegaman)
                        {
                            playerPalette();
                        }
                    }
                    
                    if (global.weapon[playerID] != oldWeapon)
                    {
                        with (prtPlayerProjectile)
                        {
                            instance_destroy();
                        }
                    }
                    
                    global.nextRoom = 0;
                    visible = 0;
                }
            }
            else if (fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
            {
                with (other)
                {
                    audio_resume_all();
                    instance_destroy();                 
                    queueUnpause();
                }
            }
        }
        
        break;
    
    // E/M-Tank restoring health
    case 5:
        eTankTimer += 1;
        if (eTankTimer &gt;= 3)
        {
            eTankTimer = 0;
            
            var proceed;
            proceed = false;
            
            // Fill selected weapon w/ W Tank
            if (wtank)
            {
                if (global.ammo[playerID, weaponSlot[weaponX,weaponY]] &lt; 28)
                {
                    global.ammo[playerID, weaponSlot[weaponX,weaponY]] = min(28,
                        global.ammo[playerID, weaponSlot[weaponX,weaponY]] + 1);
                    proceed = true;
                }
            }
            
            // Fill all weapons - M-Tank only
            if (mtank)
            {
                for (i = 1; i &lt; global.totalWeapons; i += 1)
                {
                    if (global.ammo[playerID, i] &lt; 28)
                    {
                        global.ammo[playerID, i] = min(28,
                            global.ammo[playerID, i] + 1);
                        proceed = true;
                    }
                }
            }
            
            // Fill health
            if ((global.playerHealth[playerID] &lt; 28) &amp;&amp; (!wtank))
            {
                global.playerHealth[playerID] = min(28,
                    global.playerHealth[playerID] + 1);
                proceed = true;
            }
            
            if (!proceed)
            {
                eTankTimer = 0;
                phase = 2;
                if (!wtank)
                {
                    option = oldOption;
                    global.weapon[playerID] = oldWeapon;
                    with (objMegaman)
                    {
                        playerPalette();
                    }
                }
                
                audio_stop_sound(sfxEnergyRestore);
            }
        }
        
        break;
    
    // W-Tank weapon selection
    case 6:
        event_user(0); // Moving the selection
        
            if (global.keyJumpPressed[playerID] || global.keyPausePressed[playerID])
            {
                if (global.ammo[playerID, weaponSlot[weaponX,weaponY]] &lt; 28)
                {
                    phase = 5;
                    eTankTimer = 0;                   
                    playSFX(sfxEnergyRestore, true);
                }
                else
                {
                    playSFX(sfxError);
                }
            }
        
        break;
}

// update stored player sprite
if (instance_exists(objMegaman))
{
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            other.costumeID = costumeID;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Pages
//show_debug_message("----------------------------")
for (var i = 0; i &lt; visibleWeapons; i++){
    var w = i + weaponPage*visibleWeapons;
    if (w &lt; weaponVisibleN){
        weaponSlot[i mod 6, floor(i/6)] = weaponVisible[w];
        //show_debug_message("X,Y,PAGE = " + string(i mod 6) + "," + string(floor(i/6)) + "," + string(global.weaponName[w]))
    }
    else{
        weaponSlot[i mod 6, floor(i/6)] = -1;
        //show_debug_message("X,Y,PAGE = " + string(i mod 6) + "," + string(floor(i/6)) + ", NONE")
    }
}
//show_debug_message("----------------------------")

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hotBarArrangeMode = 0;//(global.keyShoot[playerID]) * (hotBarArrangeMode + 1);

var xDir = (global.keyRightPressed[playerID] - global.keyLeftPressed[playerID]);

var yDir = (global.keyDownPressed[playerID] - global.keyUpPressed[playerID]);
//((global.keyDownPressed[playerID] || (global.keyDown[playerID] &amp;&amp; quickScrollTimer &lt;= 0))
    //- (global.keyUpPressed[playerID] || (global.keyUp[playerID] &amp;&amp; quickScrollTimer &lt;= 0)));

if (xDir != 0)
{
    playSFX(sfxMenuMove);
    if weaponY = 0 &amp;&amp; pauseRow == 0 &amp;&amp; helpRow == 0 &amp;&amp; itemRow = 0
    {
        weaponY = 1;
        //show_debug_message(string(weaponSlot[weaponX,weaponY]));
        if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
            weaponY = 0;
        }
    }
    else if weaponY = 1 &amp;&amp; pauseRow == 0 &amp;&amp; helpRow == 0 &amp;&amp; itemRow = 0
    {
        weaponY = 0;
        //show_debug_message(string(weaponSlot[weaponX,weaponY]));
        if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
            weaponY = 1;
        }
    }
    
    if helpRow == 0{
    if xDir = -1 &amp;&amp; pauseRow == 1 &amp;&amp; pauseRowOption = 0
    {
        pauseRowOption = 4
    }
    else if xDir = 1 &amp;&amp; pauseRow == 1 &amp;&amp; pauseRowOption = 4
    {
        pauseRowOption = 0
    }
    else pauseRowOption += xDir}
    
    
        if ((itemOption == 1 &amp;&amp; xDir &lt; 0))
        {
            itemOption = 3;
        }
        else if ((itemOption == 3 &amp;&amp; xDir &gt; 0))
        {
            itemOption = 1;
        }
        else
        {
            itemOption += xDir;
        }
}
if (yDir != 0)
{
    playSFX(sfxMenuMove);
    if helpRow == 0{
    if yDir = -1 &amp;&amp; weaponX = 0 &amp;&amp; pauseRow == 0 &amp;&amp; itemRow == 0
    {
        weaponX = 5
        if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
            weaponX = 0;
        }
    }
    else if yDir = 1 &amp;&amp; weaponX = 5 &amp;&amp; pauseRow == 0 &amp;&amp; itemRow == 0
    {
        if phase != 6
        {
            pauseRow = 1
            weaponX = 0
            if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
                weaponX = 5;
            }
            pauseRowOption = 0
        }
    }
    else if yDir = -1 &amp;&amp; pauseRow == 1 &amp;&amp; itemRow == 0
    {
        pauseRow = 0
        itemOption = 1
        weaponX = 5
        if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
            weaponX = 0;
        }
        weaponY = 0
    }
    else if yDir = 1 &amp;&amp; pauseRow == 1
    {
        pauseRow = 0
        itemOption = 1
        weaponX = 5
        if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
            weaponX = 0;
        }
        weaponY = 0
    }
    else{
        if itemRow == 0 {
        weaponX += yDir
        if (weaponSlot[weaponX,weaponY] &gt; global.totalWeapons - 1 || weaponSlot[weaponX,weaponY] == -1){
            weaponX -= yDir;
            if yDir == 1{
            pauseRow = 1}
        }}
    }
    }
    
    if helpRow == 0{
    if yDir = 1 &amp;&amp; pauseRow == 0 &amp;&amp; itemRow == 1
    {        
        pauseRow = 1 
    }
    }
}

if ((global.keyWeaponSwitchLeftPressed[playerID] || global.keyWeaponSwitchRightPressed[playerID]))
{

    var change = global.keyWeaponSwitchRightPressed[playerID] - global.keyWeaponSwitchLeftPressed[playerID];
    playSFX(sfxUnlocked);
    
    if (weaponPage == 0 &amp;&amp; change &lt; 0) // horizontal movements while on the weapon list
    {
        weaponPage = weaponPageMax - 1;
    }
    else if (weaponPage &gt;= weaponPageMax - 1 &amp;&amp; change &gt; 0) // horizontal movements while on the misc selections
    {
        weaponPage = 0;
    }
    else{
        weaponPage += change;
    }
}

if global.keyShootPressed[playerID]
{
    if phase == 6
    {
        playSFX(sfxUnlocked);
        phase = 2
        global.wTanks++
    }
}

// do quick scroll timer

// Set weapon
//global.weapon[playerID] = 0;
if weaponSlot[weaponX,weaponY] &lt;= global.totalWeapons - 1 &amp;&amp; weaponSlot[weaponX, weaponY] &gt; -1
{
    global.weapon[playerID] = weaponSlot[weaponX,weaponY];
}
else{
    weaponX = 0;
    weaponY = 0;
}

with (objMegaman)
{
    playerPalette();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// center in screen on nonstandard resolutions
x = view_xview + (view_wview[0] - 256) / 2;
y = view_yview + (view_hview[0] - 224) / 2;

draw_sprite_ext(sprDot, 0, view_xview, view_yview, view_wview, view_hview, 0, c_black, 1);

// Menu
if (phase != 0)
{
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    //draw_clear(c_black);
    
    var col;
    /*col[0, 0] = global.nesPalette[0];
    col[1, 0] = global.nesPalette[13];
    col[0, 1] = global.primaryCol[0];
    col[1, 1] = global.secondaryCol[0];
    col[0, 2] = make_color_rgb(255, 228, 164);
    col[1, 2] = c_white;*/
    
    col[0] = c_black;
    col[1] = global.primaryCol[playerID];
    col[2] = global.secondaryCol[playerID];
    col[3] = c_white;
    
    //color setup
    var pColP = 0;
    var pColS = 0;
    
    switch(costumeID){
        default:
            pColP = global.nesPalette[14];
            pColS = global.nesPalette[27];
        break;
    }
    
    var colP, colS;
    if (global.weaponPrimaryColor[global.weapon[playerID]] == -1 || global.weaponPrimaryColor[global.weapon[playerID]] == -2 || global.weaponPrimaryColor[global.weapon[playerID]] == -3){
        colP = pColP;
        colS = pColS;
    }
    else{
        colP = global.weaponPrimaryColor[global.weapon[playerID]];
        colS = global.weaponSecondaryColor[global.weapon[playerID]];
    }
    
    // NOW draw itself
    drawSelf();

    
    if itemRow == 0
    {
    draw_sprite(sprMenuArrow, 0, x + 214, y + 107)
    draw_sprite(sprMenuArrow, 1, x + 26, y + 107)
    
    draw_sprite(sprButtonPrompts, 6, x + 30, y + 124)
    draw_sprite(sprButtonPrompts, 7, x + 218, y + 124)
    
    draw_sprite(sprButtonPrompts, 5, x + 217, y + 85)
    draw_sprite(sprWeaponIconsPlaceholder, 1, x + 214, y + 66)
    }
    
    draw_set_halign(fa_center);
    
    if itemRow == 0 &amp;&amp; helpRow == 0
    {
        draw_text(x + 128, y + 11, "WEAPON SELECT");
    }
    else if itemRow == 1 &amp;&amp; helpRow == 0
    {
        draw_text(x + 128, y + 11, "ITEM SELECT");
    }
    else if itemRow == 0 &amp;&amp; helpRow == 1
    {
        draw_text(x + 128, y + 11, "INFO MENU");
    }
    draw_set_halign(fa_left);
    
    //scrPauseMenuWeapons();

    if itemRow == 0 &amp;&amp; helpRow == 0
    {
    
    for (var i = 0; i &lt; visibleWeapons; i++){
            if (weaponSlot[i mod 6, floor(i/6)] &lt; global.totalWeapons &amp;&amp; weaponSlot[i mod 6, floor(i/6)] != -1)
            {
                var X = 48 + floor(i/6)*86;
                var Y = 62 + 17*(i mod 6);
                drawPauseMenuWeapon(weaponSlot[i mod 6, floor(i/6)], i mod 6, floor(i/6), X, Y, X + 18, Y + 8, X + 18, Y, (i == 0));
            }
        }
    
    }
    else if itemRow == 1 &amp;&amp; helpRow == 0
    {   
        draw_text(x + 24, y + 60, "MANUAL");
    
        draw_sprite_ext(sprMenuTank, 0, x + 24, y + 72, 1, 1, 0, c_white, 1);
    
        if  itemRow == 1 and itemOption == 1 and pauseRow == 0
        {
            draw_sprite_ext(sprETank, 0, x + 24, y + 72, 1, 1, 0, c_white, 1);
        }
    
        draw_text(x + 24, y + 89, zeroPad(global.eTanks, 2));   
    
        draw_sprite_ext(sprMenuTank, 1, x + 48, y + 72, 1, 1, 0, c_white, 1);
    
        if  itemRow == 1 and itemOption == 2 and pauseRow == 0
        {
            draw_sprite_ext(sprWTank, 0, x + 48, y + 72, 1, 1, 0, c_white, 1);
        }
    
        draw_text(x + 48, y + 89, zeroPad(global.wTanks, 2));
    
        draw_sprite_ext(sprMenuTank, 2, x + 72, y + 72, 1, 1, 0, c_white, 1);
    
        if  itemRow == 1 and itemOption == 3 and pauseRow == 0
        {
            draw_sprite_ext(sprMTank, 0, x + 72, y + 72, 1, 1, 0, c_white, 1);
        }
    
        draw_text(x + 72, y + 89, zeroPad(global.mTanks, 2));
        
        draw_text(x + 24, y + 101, "AUTO");
        
        if (global.energySaver)
        {
            draw_sprite(sprEnergySaver, 0, x + 24, y + 113);
        }
        else
        {
            draw_sprite(sprEnergySaver, 1, x + 24, y + 113);
        }
        
        if (global.beatCalls)
        {
            draw_sprite(sprBeatCall, 0, x + 48, y + 113);
            draw_text(x + 48, y + 130, zeroPad(global.beatCalls, 2));
        }
        else
        {
            draw_sprite(sprBeatCall, 1, x + 48, y + 113);
        }
        
        if (global.pierceProtectors)
        {
            draw_sprite(sprPierceProtector, 0, x + 72, y + 113);
            draw_text(x + 72, y + 130, zeroPad(global.pierceProtectors, 2));
        }
        else
        {
            draw_sprite(sprPierceProtector, 1, x + 72, y + 113);
        }
    }
    else if itemRow == 0 &amp;&amp; helpRow == 1
    {    
        drawWeaponIcon(weaponSlot[weaponX,weaponY], 0, false, x + 24, y + 30)
        /*draw_sprite_ext(global.weaponIcon[weaponSlot[weaponX,weaponY]], 0, x + 24, y + 30, 1, 1, 0, c_white, 1);
        draw_sprite_ext(global.weaponIcon[weaponSlot[weaponX,weaponY]], 1, x + 24, y + 30, 1, 1, 0, getWeaponPrimaryColor(weaponSlot[weaponX,weaponY]), 1);
        draw_sprite_ext(global.weaponIcon[weaponSlot[weaponX,weaponY]], 2, x + 24, y + 30, 1, 1, 0, getWeaponSecondaryColor(weaponSlot[weaponX,weaponY]), 1);    
        draw_sprite_ext(global.weaponIcon[weaponSlot[weaponX,weaponY]], 3, x + 24, y + 30, 1, 1, 0, c_white, 1);*/
        draw_text(x + 42, y + 34, global.weaponName[weaponSlot[weaponX,weaponY]]);
        draw_text_ext(x + 44, y + 60, global.weaponDescription[weaponSlot[weaponX,weaponY]],8,168);
        draw_set_halign(fa_left);
        draw_text(x + 24, y + 178, "POWER");
        draw_text(x + 24, y + 187, "SPEED");
        draw_text(x + 24, y + 196, "RAPIDNESS");
        draw_text(x + 24, y + 205, "COST");
        draw_set_halign(fa_right);
        draw_text(x + 230, y + 178, global.weaponPower[weaponSlot[weaponX,weaponY]]);
        draw_text(x + 230, y + 187, global.weaponSpeed[weaponSlot[weaponX,weaponY]]);
        draw_text(x + 230, y + 196, global.weaponRapidness[weaponSlot[weaponX,weaponY]]);
        draw_text(x + 230, y + 205, global.weaponCost[weaponSlot[weaponX,weaponY]]);
    }
    
    draw_set_halign(fa_left);
    
    if helpRow == 0{
    with (objMegaman)
    {
        if (playerID == other.playerID)
        {
            drawPlayer(playerID, costumeID, 0, 0, other.x + 25 + 8, other.y + 26 + 8, 1, 1);
        }
    }
    
    //draw_text(x + 47, y + 30, string(weaponVisibleN) +"/"+ string(visibleWeapons) +"/"+ string(weaponPageMax));
    draw_text(x + 47, y + 30, "LIFE");
    
    draw_sprite_ext(sprPauseMenuBarPrimary, global.playerHealth[playerID], x + 46, y + 42, 1, 1, 0, make_color_rgb(255, 228, 164), 1);
    draw_sprite_ext(sprPauseMenuBarSecondary, global.playerHealth[playerID], x + 46, y + 42, 1, 1, 0, c_white, 1);
    
    //draw_sprite(sprPauseOptions, 0, x + 114, y + 25)
    drawPlayer(playerID, costumeID, 16, 12, x + 114 + 7, y + 25, 1, 1);
    
    draw_set_halign(fa_left);
    
    var livesText = zeroPad(global.livesRemaining, 2);
    if (!global.livesEnabled)
    {
        livesText = "--";
    }
    
    //draw_text(x + 216, y + 92 + 18, livesText);
    draw_text(x + 114, y + 42, livesText);
    
    //draw_sprite(sprBoltBig, 0, x + 144, y + 28 -5)
    draw_sprite_ext(sprBoltBig, 0, x + 144, y + 28 - 5, 1, 1, 0, c_white, 1);
    draw_sprite_ext(sprBoltBig, 1, x + 144, y + 28 - 5, 1, 1, 0, colP, 1);
    draw_sprite_ext(sprBoltBig, 2, x + 144, y + 28 - 5, 1, 1, 0, colS, 1);
    
    draw_text(x + 136, y + 42, zeroPad(global.bolts, 4));
    
    draw_sprite(sprEnergyElement, 0, x + 176, y + 25)
    
    draw_text(x + 172, y + 42, zeroPad(global.energyElements, 3));
    
    draw_set_halign(fa_left);
    
    if pauseRow == 1 &amp;&amp; pauseRowOption == 0
    {
        draw_sprite(sprPauseOptions, 5, x + 30, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 24, y + 203, "WPN.");
    }
    else
    {
        draw_sprite(sprPauseOptions, 5, x + 30, y + 179)        
        draw_set_color(c_white)
        draw_text(x + 24, y + 203, "WPN.");
    }
    
    
    if pauseRow == 1 &amp;&amp; pauseRowOption == 1
    {
        draw_sprite(sprPauseOptions, 1, x + 75, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 66, y + 203, "ITEM");
    }
    else
    {
        draw_sprite(sprPauseOptions, 1, x + 75, y + 179)        
        draw_set_color(c_white)
        draw_text(x + 66, y + 203, "ITEM");
    }
    
    
    if pauseRow == 1 &amp;&amp; pauseRowOption == 2
    {
        draw_sprite(sprPauseOptions, 2, x + 120, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 113, y + 203, "OPTN");
    }
    else
    {
        draw_sprite(sprPauseOptions, 2, x + 120, y + 179)        
        draw_set_color(c_white)
        draw_text(x + 113, y + 203, "OPTN");
    }
    
    
    if pauseRow == 1 &amp;&amp; pauseRowOption == 3
    {
        if retryConfirm
        {
        draw_sprite(sprPauseOptions, 3, x + 165, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 159, y + 203, "OK?");
        }
        else
        {
        draw_sprite(sprPauseOptions, 3, x + 165, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 159, y + 203, "RTRY");
        }
    }
    else
    {
        draw_sprite(sprPauseOptions, 3, x + 165, y + 179)        
        draw_set_color(c_white)
        draw_text(x + 159, y + 203, "RTRY");
    }
    
    
    if pauseRow == 1 &amp;&amp; pauseRowOption == 4
    {
        if exitConfirm
        {
        draw_sprite(sprPauseOptions, 4, x + 210, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 203, y + 203, "OK?");
        }
        else
        {
        draw_sprite(sprPauseOptions, 4, x + 210, y + 179)        
        draw_set_color(c_aqua)
        draw_text(x + 203, y + 203, "EXIT");
        }
    }
    else
    {
        draw_sprite(sprPauseOptions, 4, x + 210, y + 179)        
        draw_set_color(c_white)
        draw_text(x + 203, y + 203, "EXIT");
    }
    }
    draw_set_color(c_white)
    
    // colored text overlays
    if (global.showColoredTextOverlays)
    {
        draw_sprite_ext(sprDot, 0, view_xview[0] + 16, view_yview[0], view_wview[0] - 32, view_hview[0], 0,
            make_color_rgb(global.coloredTextOverlaysRed, global.coloredTextOverlaysGreen, global.coloredTextOverlaysBlue),
            global.coloredTextOverlaysOpacity / 255);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
