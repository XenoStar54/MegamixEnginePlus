<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprProtoEye</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprProtoEyeIntro;
poseImgSpeed = 10 / 60;
image_index = 0;
contactDamage = 4;
attackTimer = 0;
phase = 0;
delayTimer = 30;
jumpTimer = 16;
eyeJumps = 3;
grav = 0.25;
calibrateDirection();

// customizable hard mode attack
hardMode = false;

_im = 0; // required for animationLoop()
stopOnFlash = true;

// Health Bar
healthBarPrimaryColor[1] = 0;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_1.nsf";
musicType = "VGM";
musicTrackNumber = 8;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objTornadoBlow, 4);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 0);
enemyDamageValue(objIceWall, 4);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 2);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 3);
enemyDamageValue(objSlashClaw, 3);
enemyDamageValue(objSakugarne, 3);
enemyDamageValue(objSuperArrow, 2);
enemyDamageValue(objWireAdapter, 2);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 2);
enemyDamageValue(objBlackHoleBomb, 2);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 4);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 2);
enemyDamageValue(objTenguBlade, 3);
enemyDamageValue(objTenguDash, 3);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objSaltWater, 0);
enemyDamageValue(objConcreteShot, 2);
enemyDamageValue(objHomingSniper, 2);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (entityCanStep())
{
    if (isFight == true)
    {
        attackTimer++;
        // phase code
        switch (phase)
        {
            case 0: // he do the jump
                sprite_index = sprProtoEye;
                if(eyeJumps &gt; 0)
                {
                    if(ground)
                    {
                        xspeed = 0;
                    }
                    if(ground &amp;&amp; delayTimer &lt;= 0)
                    {
                        jumpTimer--;
                        if (jumpTimer == 15)
                        {
                            image_index = 0;
                        }
                        else if (jumpTimer == 10)
                        {
                            image_index = 1;
                        }
                        else if (jumpTimer == 5)
                        {
                            image_index = 2;
                        }
                        if (jumpTimer == 0)
                        {
                            yspeed = -6;
                            xspeed = xSpeedAim(x, y, x + (image_xscale * 70), y, yspeed, grav)
                            eyeJumps--;
                            delayTimer = 30;
                        }
                    }
                    if(ground &amp;&amp; delayTimer &gt; 0)
                    {
                        if(jumpTimer &lt;= 0)
                        {
                            if(xspeed == 0)
                            {
                                jumpTimer = 16;
                                playSFX(sfxHeavyLand);
                            }
                        }
                        image_index = 3;
                        delayTimer--;
                    }
                }
                else
                {
                    if(ground)
                    {
                        xspeed = 0;
                        image_xscale *= -1;
                        attackTimer = 0;
                        phase = 1;
                    }
                }
                break;
            case 1: // he shoot the shot
                eyeJumps = 3;
                if (attackTimer == 15)
                {
                    sprite_index = sprProtoEyeShoot;
                    image_index = 0;
                }
                if (attackTimer == 30)
                {
                    image_index = 1;
                }
                if (attackTimer == 45)
                {   
                    sprite_index = sprProtoEye;
                    image_index = 3;
                    playSFX(sfxEnemyShootClassic);
                    // here's the hard mode attack, shoot three bullets
                    if (!hardMode)
                    {
                        a = instance_create(x+2*image_xscale, y-34*image_yscale, objEnemyBullet);
                        // aim bullet at Mega Man if he's alive otherwise just shoot forward
                        if instance_exists(objMegaman)
                        {
                            a.dir = point_direction(x+2*image_xscale, y-34*image_yscale, objMegaman.x, objMegaman.y);
                        }
                        else
                        {
                            a.dir = point_direction(x+2*image_xscale, y-34*image_yscale, x+32*image_xscale, y);
                        }
                        a.sprite_index = sprProtoEyeShot;
                        a.image_speed = 0.25;
                        a.spd = 2;
                    }
                    else
                    {
                        a = instance_create(x+2*image_xscale, y-34*image_yscale, objEnemyBullet);
                        b = instance_create(x+2*image_xscale, y-34*image_yscale, objEnemyBullet);
                        c = instance_create(x+2*image_xscale, y-34*image_yscale, objEnemyBullet);
                        // aim bullet at Mega Man if he's alive otherwise just shoot forward
                        if instance_exists(objMegaman)
                        {
                            a.dir = point_direction(x+2*image_xscale, y-34*image_yscale, objMegaman.x, objMegaman.y);
                            b.dir = (point_direction(x+2*image_xscale, y-34*image_yscale, objMegaman.x, objMegaman.y)) + 22.5;
                            c.dir = (point_direction(x+2*image_xscale, y-34*image_yscale, objMegaman.x, objMegaman.y)) - 22.5;
                        }
                        else
                        {
                            a.dir = point_direction(x+2*image_xscale, y-34*image_yscale, x+32*image_xscale, y);
                            b.dir = (point_direction(x+2*image_xscale, y-34*image_yscale, x+32*image_xscale, y)) + 22.5;
                            c.dir = (point_direction(x+2*image_xscale, y-34*image_yscale, x+32*image_xscale, y)) - 22.5;
                        }
                        a.sprite_index = sprProtoEyeShot;
                        a.image_speed = 0.25;
                        a.spd = 2;
                        b.sprite_index = sprProtoEyeShot;
                        b.image_speed = 0.25;
                        b.spd = 2;
                        c.sprite_index = sprProtoEyeShot;
                        c.image_speed = 0.25;
                        c.spd = 2;
                    }
                }
                if (attackTimer == 75)
                {
                    phase = 0;
                    attackTimer = 0;
                    jumpTimer = 16;
                    delayTimer = 30;
                }
                break;
        }
    }
}
else
{ 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objEnemyBullet)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
