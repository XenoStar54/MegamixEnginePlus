<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRingJump</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprRingMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
pose = sprRingPose
poseImgSpeed = 0.25
contactDamage = 6
ground = 0
timer = 0
phase = 0
didShoot = 0
walkX = 0
ringID1 = -4
ringID2 = -4
shot = false

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_4.nsf";
musicType = "VGM";
musicTrackNumber = 17;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 0);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 4);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 2);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 2);
enemyDamageValue(objShadowBlade, 0);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 0);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 2);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 2);

// MM10
enemyDamageValue(objTripleBlade, 0);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 2);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSolarBlaze, 4);

// MM11
enemyDamageValue(objBlockDropper, 0);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 4);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 4);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 3);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if (entityCanStep())
{
    if (isFight == 1)
    {
        image_speed = 0
        grav = 0.25
        switch phase
        {
            case 0:
                xspeed = 0
                if (timer == 0)
                {
                    sprite_index = sprRingShoot
                    image_index = 0
                    calibrateDirection();
                }
                timer += 1
                if (round(timer) == 10 &amp;&amp; (!instance_exists(ringID1)))
                {
                    var ID = instance_create((x + (image_xscale * 16)), y, objRingProjectile);
                    ID.image_xscale = image_xscale
                    ringID1 = ID
                    playSFX(sfxMagicCard);
                }
                if (sprite_index == sprRingShoot)
                {
                    if ((timer % 5) == 0 &amp;&amp; timer != 0)
                    {
                        image_index += 1
                        if (image_index &gt;= image_number)
                        {
                            sprite_index = sprRingStand
                            image_index = 0
                        }
                    }
                }
                if (timer &gt;= 50)
                {
                    timer = 0
                    phase = 1
                }
                break
            case 1:
                xspeed = 0
                sprite_index = sprRingPrepareJump
                timer += 1
                if (timer &gt;= 4)
                {
                    timer = 0
                    phase = 2
                    didShoot = 0
                }
                break
            case 2:
                xspeed = 0
                if (timer == 0 &amp;&amp; (ground == 1 || place_meeting(x, (y + yspeed), objSpring)))
                {
                    yspeed = -6.75
                    sprite_index = sprRingJump
                }
                timer += 1
                if (timer &gt; 0 &amp;&amp; yspeed &gt;= 0 &amp;&amp; didShoot == 0)
                {
                    timer = 0
                    didShoot = 1
                    sprite_index = sprRingJumpShoot
                    image_index = 0
                    calibrateDirection();
                }
                if (sprite_index == sprRingJumpShoot)
                {
                    if ((round(timer) % 5) == 0 &amp;&amp; timer != 0)
                    {
                        if (round(timer) == 5 &amp;&amp; (!instance_exists(ringID2)))
                        {
                            ID = instance_create((x + (image_xscale * 16)), y, objRingProjectile)
                            ID.image_xscale = image_xscale
                            ringID2 = ID
                            playSFX(sfxMagicCard);
                        }
                        image_index += 1
                        if (image_index &gt;= image_number)
                        {
                            sprite_index = sprRingJump
                            image_index = 0
                        }
                    }
                }
                if (timer &gt; 0 &amp;&amp; yspeed &gt;= 0 &amp;&amp; (ground == 1 || place_meeting(x, (y + 8), objSpring)))
                {
                    timer = 0
                    phase = 3
                    didShoot = 0 
                }
                break
            case 3:
                xspeed = 0
                sprite_index = sprRingPrepareJump
                timer += 1
                if (timer &gt;= 6)
                {
                    if instance_exists(objMegaman)
                    targX = target.x;
                    timer = 0
                    phase = 4
                }
                break
            case 4:
                if(!shot){
                sprite_index = sprRingWalk
                }else{
                sprite_index = sprRingWalk2
                }
                image_speed = 0.2
                if (timer == 0)
                {
                    calibrateDirection();
                    if instance_exists(objMegaman)
                        walkX = (sprite_get_xcenter_object(objMegaman) + (image_xscale * 32))
                    else
                        walkX = (x + (image_xscale * 128))
                }
                moveTowardPoint(targX, y, 3);
                timer += 1 
                xspeed = (image_xscale * 2)
                if (timer &gt; 20)
                {
                    if(!shot)
                    {
                    if (instance_exists(target))
                        {
                            if (global.keyShootPressed[target.playerID])
                            {
                                shot = true
                                ID = instance_create((x + (image_xscale * 16)), y, objRingProjectile)
                                ID.image_xscale = image_xscale
                                ringID2 = ID
                                playSFX(sfxMagicCard);
                            }
                        }
                    }
                }
                if ((bbox_left &lt;= view_xview + 32 &amp;&amp; /* image_xscale */ image_xscale == -1)
                    || (bbox_right &gt;= view_xview + view_wview - 32 &amp;&amp; /* image_xscale */ image_xscale == 1)
                    || (checkSolid(/* image_xscale */ image_xscale * 16, 0) || (xcoll * image_xscale &gt; 0) || distance_to_point(targX, y) &lt; 5))
                {
                    xspeed = 0
                    timer = 0
                    phase = 5
                }
                break
            case 5:
                xspeed = 0
                sprite_index = sprRingStand
                calibrateDirection();
                timer += 1
                if (timer &gt;= 25)
                {
                    timer = 0
                    phase = 0
                    shot = 0
                }
                break
               
        }
        
    }
    
}
else
    image_speed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objRingProjectile)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
