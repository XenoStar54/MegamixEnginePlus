<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFreezeIntro</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprFreezeMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

// if Freeze Man freezes the floor, he will bug out and repeat an attack over and over again. Here's a timer for ice that fixes that.
icedTimer = 0;

// special animation
introType = 0;
customPose = true;

pose = sprFreezeIntro;
poseImgSpeed = 4 / 40;

contactDamage = 8;
ground = false;
attackTimer = 0;
timescale = 1;

dir = -1;
timer = 0;
FirstAttack = 0
JumpCount = 0
xcollCount = 0

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 999;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

// Health Bar
healthBarPrimaryColor[1] = 2;
healthBarSecondaryColor[1] = 14;

music = "MM7Boss.nsf"
musicType = "VGM"
musicTrackNumber = 0
musicVolume = 1

enemyDamageValue(objDustCrusher, 4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1, 1);
}
if (entityCanStep())
{
    // Intro animation
    if (startIntro)
    {
        image_xscale = -1;
        canFillHealthBar = false;
        
        startIntro = false;
        isIntro = true;
        visible = true;
        
        blockCollision = blockCollisionStart;
        grav = gravStart;
        
        imageNoMin = 0;
        imageTimerMax = 6;
        
        //with(objTimeSwitch)
        //image_index = 10
        
        
    }
    else if (isIntro)
    {
        attackTimer ++;
        
        // stop on hitting ground
        if (ycoll &gt; 0)
        {
            yspeed = 0;
            xspeed = 0;
                
            image_index = 0;
        }
        
        else if (attackTimer == 90)        
        image_index = 1;  
        
        else if (attackTimer == 95)        
        image_index = 2;  
        
        else if (attackTimer == 100)       
        image_index = 3;  
        
        else if (attackTimer == 105)        
        image_index = 1;  
        
        else if (attackTimer == 110)        
        image_index = 2;  
        
        else if (attackTimer == 115)        
        image_index = 3;  
        
        else if (attackTimer == 120)       
        image_index = 0;  
        
        else if (attackTimer == 160)        
        image_index = 4;  
        
        else if (attackTimer == 165)
        {
        for (b = 0; b &lt; 4; b += 1)
        {
        if (b == 0)
        {
            xx = -12;
            yy = 0;
            xs = -0.5;
            ys = -2;
        }
        if (b == 1)
        {
            xx = 0;
            yy = 10;
            xs = -0.5;
            ys = -3;
        }
        if (b == 2)
        {
            xx = 5;
            yy = -7;
            xs = 0.5;
            ys = -3;
        }
        if (b == 3)
        {
            xx = 12;
            yy = 14;
            xs = 0.5;
            ys = -2;
        }
        i = instance_create(bboxGetXCenter() + xx, bboxGetYCenter() + yy, objEnemyBullet);
        i.sprite_index = sprChillBlockShards;
        i.image_index = b;
        i.grav = 0.2;
        i.xspeed = xs;
        i.yspeed = ys;
        i.contactDamage = 0;
        i.reflectable = 0;
        }
        playSFX(sfxFreezeManPower);
        image_index = 5;  
        }
        else if (attackTimer == 200)        
        image_index = 6;  
        
        else if (attackTimer == 210)       
        image_index = 7;  
        
        else if (attackTimer == 215)       
        image_index = 8;  
        
        else if (attackTimer == 220)        
        image_index = 9;  
        
        else if (attackTimer == 222)       
        image_index = 10;  
        
        else if (attackTimer == 224)        
        image_index = 11;  
        
        else if (attackTimer == 226)       
        image_index = 12;  
        
        else if (attackTimer == 228)        
        image_index = 13;  
        
        else if (attackTimer == 230)        
        image_index = 9;  
              
        else if (attackTimer == 270)
        {
            canFillHealthBar = true;
            isIntro = false;
            attackTimer = 0;
            setTargetStep();
        }
    
        
    }
    if (isFight)
    {
        icedTimer++;
        if instance_exists(objIce)
        {
            if icedTimer == 600
            {
                with(objIce)
                {
                    instance_create(x, y, objExplosion)
                    instance_destroy();
                }
            }   
        }
    
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = gravAccel;
        }
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(1, 1);
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        switch (phase)
        {
            case 0: // 煽り
            if (global.keyShootPressed[target.playerID])
            {
            phase = 1
            attackTimer = 0
            }
    
                if (attackTimer == 2)                
                sprite_index = sprFreezeStand;       
                
                if (attackTimer == 60){
                sprite_index = sprFreezeComeOn;  
                image_index = 0         
                }
                
                if (attackTimer == 65){
                sprite_index = sprFreezeComeOn;  
                image_index = 1         
                }
                
                if (attackTimer == 70){
                sprite_index = sprFreezeComeOn;  
                image_index = 2         
                }  
                   
                if (attackTimer == 75){
                sprite_index = sprFreezeComeOn;  
                image_index = 1         
                }
                
                if (attackTimer == 80){
                sprite_index = sprFreezeComeOn;  
                image_index = 2         
                } 
                    
                if (attackTimer == 100){
                attackTimer = 0
                image_index = 0         
                }                                                            
                break;
                
           // Walking
            case 1:
                xspeed = 1.5 * image_xscale;
                sprite_index = sprFreezeWalk
                image_speed = 0.15;
                        
                if (ground)
                {
                   if (instance_exists(target))
                   {
                      if(!JumpCount)
                      {
                         if (global.keyShootPressed[target.playerID])
                         {
                            phase = 2
                            JumpCount = 1
                            attackTimer = 0
                         }
                      }
                   }
                   if (xcoll != 0)
                        {
                            image_xscale *= -1;
                            xcollCount++
                            if(xcollCount == 1)
                            {
                                if(FirstAttack == 0)
                                {
                                   phase = 5
                                   xcollCount = 0
                                   attackTimer = 0;
                                }
                                if (instance_exists(objIce))
                                {
                                     phase = 3
                                     xcollCount = 0
                                     attackTimer = 0;
                                }
                                else
                                {
                                   phase = 5
                                   xcollCount = 0
                                   attackTimer = 0;
                                }
                               xcollCount = 0
                               attackTimer = 0;
                               JumpCount = 0
                            }
                            
                        }
                }
                break;

                case 2: // Jump
                
                if (attackTimer == 1){
                delay = 3;
                sprite_index = sprFreezeJump;   
                yspeed = -4.5;
                xspeed = 1.8 * image_xscale;
                ground = false;
                hasFired = true;                            
                }                                                                
            
                if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 16){
                    phase = 1;
                    timer = 0
                    playSFX(sfxKnightLand);
                }
                break;
                
            case 3: // Freeze Shoot (Up)
            sprite_index = sprFreezeAttack1;
            
            if (attackTimer == 1)   
            image_index = 0
            
            if (attackTimer == 5)            
            image_index = 1
            
            if (attackTimer == 10)            
            image_index = 0
            
            if (attackTimer == 15)            
            image_index = 1
            
            if (attackTimer == 20)            
            image_index = 0
            
            if (attackTimer == 25)            
            image_index = 1
            
            if (attackTimer == 30)            
            image_index = 2
            
            if (attackTimer == 35)            
            image_index = 3
            
            if (attackTimer == 45){
            image_index = 4
            instance_create(x+8*image_xscale,y,objFreezeCracker);            
            }
            
            if (attackTimer == 55){
            phase = 1
            attackTimer = 0;                        
            }
            break;
            
            case 4: // Floor Freese
            if (attackTimer == 1)
            {
                image_index = 0
                delay = 3;
                sprite_index = sprFreezeAttack2;   
                yspeed = -7;
                xspeed = 1.4 * image_xscale;
                ground = false;
                hasFired = true;  
                          
            }    
            if (attackTimer == 45){       
                image_index = 1
            }   
            if (attackTimer == 50)
            {       
                image_index = 2;
                icedTimer = 0;
               if(image_xscale = 1)
               {
                  proj = instance_create(x+13*image_xscale,y,objFreezeCracker2);
                  proj.FreezeDistance = 0
               }
               if(image_xscale = -1)
               {
                proj = instance_create(x+13*image_xscale,y,objFreezeCracker2);
                proj.FreezeDistance = 1
               }
            }  
            
            if (attackTimer == 55)      
            image_index = 0

            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 50){
            phase = 1;
            attackTimer = 0;
            playSFX(sfxKnightLand);
            }
            break;
                
             case 5: // FreezeCracker
             if (attackTimer == 1){
                image_index = 0
                delay = 3;
                sprite_index = sprFreezeAttack3;   
                yspeed = -7;
                ground = false;
                hasFired = true;  
             }    
             if (attackTimer == 50)
             image_index = 1
             
             if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 50){
                    image_index = 2
                    proj = instance_create(x+13*image_xscale,y,objFreezeCracker3);
                    proj.xspeed = image_xscale*4.5;
                    proj.image_xscale = image_xscale;
                    phase = 6;
                    attackTimer = 0;
                    FirstAttack = 1
                    playSFX(sfxKnightLand);
             }
             break;  
                
            case 6: // Wait
            
            if (attackTimer == 10){
               if (!instance_exists(objIce))
               {
                  phase = choose(1, 4);
                  attackTimer = 0;  
               }
               else{
               phase = 1
               attackTimer = 0;  
               }
            attackTimer = 0;                        
            }
            break;     
        }   
    }
}
else
{ }

// flash stopper drains Quick Man's health:
if (global.timeStopped &amp;&amp; !global.frozen)
{
    healthpoints -= 1 / 30;
    if (healthpoints &lt;= 0)
        event_user(EV_DEATH);
    
    // flash stopper drains extra fast:
    with (objFlashStopper)
        phase -= 3;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Bye
with (objEnemyBullet)
{
    instance_destroy();
}
with (objFreezeCracker)
{
    instance_destroy();
}
with (objFreezeCracker2)
{
    instance_destroy();
}
with (objFreezeCracker3)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objFloorFreeze)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
with (objFreezeIcicle)
{
    instance_destroy();
}
with (objIce)
{
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
