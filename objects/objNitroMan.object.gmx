<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNitroMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprNitroManIntro2;
poseImgSpeed = 12 / 60;
contactDamage = 4;
ground = false;
attackTimer = 0;
introType = 4;

imageTimer = 0;
imageTimerMax = 99;

imageNoMin = 0;
attackTimerMax = 145;
phase = 0;
oldPhase = 2;
jumpY = -7;
driveX = 4.5;
delay = 0;
hasFired = false;
slide = false;
skidDir = image_xscale;
pauseGravity = false;
grav = 0.2;
memGrav = grav;
getX = 0;

canIce = true;

randomiser = -1;

spreadAttack = false;

if (global.difficulty == DIFF_HARD)
{
    spreadAttack = true;
    shotsToFire = 3;
}
else
{
    spreadAttack = false;
    if (global.difficulty == DIFF_EASY)
        shotsToFire = 1;
    else
        shotsToFire = 2;
}

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_10.nsf";
musicType = "VGM";
musicTrackNumber = 18;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 4);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 4);
enemyDamageValue(objMagnetMissile, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 2);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1);

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 2);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 4);
enemyDamageValue(objTornadoBlow, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objBreakDash, 4);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 3);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objIceWall, 4);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 2);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cS = instance_create(x + (24 * image_xscale), y + 3, objChillSpike);
cS.image_xscale = image_xscale;
cS.toWall = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fire chill spike at wall</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cS = instance_create(x + (24 * image_xscale), y + 3, objChillSpike);
cS.image_xscale = image_xscale;
cS.yspeed = -3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fire chill spike at mega man</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1, 2);
}
if (entityCanStep())
{
    if (isFight)
    {
        // this sets up nitro man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = memGrav;
        }
        
        // resets the image timer if nitro man ever changes poses
        if (pose != sprite_index)
        {
            pose = sprite_index;
            imageTimer = 0;
        }
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this is the animation system. don't touch this.
        imageTimer += 1;
        
        // image animation cheat (cycles between pose every 4 frames)
        if (imageTimer mod 4 == 1)
        {
            switch(floor(image_index))
            {
                case 4:
                    image_index = 5;
                    break;
                case 5:
                    image_index = 4;
                    break;
                case 6:
                    image_index = 7;
                    break;
                case 7:
                    image_index = 6;
                    break;
                case 8:
                    image_index = 9;
                    break;
                case 9:
                    image_index = 8;
                    break;
                case 10:
                    image_index = 11;
                    break;
                case 11:
                    image_index = 10;
                    break;
                case 18:
                    image_index = 19;
                    break;
                case 19:
                    image_index = 18;
                    break;
            }
        }
        
        // this prevents nitroman man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(1);
        }
        if (phase &gt; 0 &amp;&amp; phase != oldPhase)
        {
            oldPhase = phase;
        }
        
        switch (phase)
        {
            case 0: // idle  
                if (getX == 0)
                    getX = abs(x - (view_xview + view_wview / 2));
                xspeed = 0;
                sprite_index = sprNitroMan;
                if (attackTimer &gt;= 10 || image_index &gt; 1 || attackTimer == -50)
                    image_index = 0;
                if (attackTimer &gt;= 20)
                {
                    calibrateDirection();
                    if (shotsToFire &gt; 0)
                    {
                        phase = 6;
                        shotsToFire -= 1;
                    }
                    else
                    {
                        phase = 1;
                        shotsToFire = choose(0,1,2);
                    }
                    
                    if (phase == 1)
                    {
                        yspeed = -4;
//                    var getPose = view_xview+view_wview/2 - ((getX-(16*image_xscale))*image_xscale);
//                    xspeed = (getPose-x)/30;
                        xspeed = arcCalcXspeed(yspeed, grav, x, y, view_xview+view_wview/2 - ((getX+16)*image_xscale), y);
                        ground = false;
                    }
                    attackTimer = 0;
                }
                break;
            case 1: // jump back
                if (ground)
                {
                    if (image_index == 12)
                    {
                        image_index = 2;
                    }
                    xspeed = 0;
                    if (image_index &lt; 4)
                    {
                        image_index += 1/4;
                    }
                    else
                    {
                        if (image_index &lt; 18)
                        {
                            image_index = 18;
                        }
                        if (attackTimer &gt;= 60)
                        {
                            playSFX(sfxRushCycle1);
                            phase = choose(2,4);
                            skidDir = image_xscale;
                            attackTimer = 0;
                            image_index = 4;
                            if (phase == 4)
                                image_index = 6;
                            xspeed = driveX*image_xscale;
                        }
                    }
                }
                else
                {
                    image_index = 12;
                }
                break;
            case 2: // chasing
            case 3:
                if (!place_meeting(x-image_xscale*32,y,objSolid))
                    calibrateDirection();
                if (skidDir != image_xscale || place_meeting(x+image_xscale*32,y,objSolid))
                {
                    image_index = 10;
                    playSFX(sfxRushCycle2);
                    if place_meeting(x+image_xscale*32,y,objSolid)
                        image_xscale = -image_xscale;
                    skidDir = image_xscale;
                }
                if (image_index == 10 || image_index == 11)
                {
                    if (sign(xspeed*3) == image_xscale)
                    {
                        phase += 1;
                        if (phase &lt; 4)
                        {
                            image_index = 4;
                        }
                        else
                        {
                            image_index = 6;
                            xspeed = image_xscale/4;
                        }
                    }
                }
                if (abs(xspeed) &lt;= driveX || sign(xspeed) != image_xscale)
                {
                    xspeed += 1/5*image_xscale;
                }
                break;
            case 4: // wall time
                // if wall rding go up)
                if (image_index &gt;= 8)
                {
                    yspeed = -driveX;
                    xspeed = 0;
                    if attackTimer &gt; 20
                    {
                        phase = 5;
                        image_xscale = -image_xscale;
                        xspeed = image_xscale;
                        image_index = 12;
                    }
                }
                
                if (xspeed == 0 &amp;&amp; image_index &lt; 8)
                {
                    image_index = 8;
                    attackTimer = 0;
                    // activate for 1 frame to prevent being stuck in a wall
                    xspeed = -image_xscale*4;
                }
                    
                if (abs(xspeed) &lt;= driveX &amp;&amp; image_index &lt; 8)
                {
                    xspeed += 1/5*image_xscale;
                }
                
                break;
            case 5: // air throw
                if yspeed &gt;= 0
                {
                    // go for landing
                    if (attackTimer == 40)
                    {
                        image_index = 12;
//                        xspeed = image_xscale*2.25;
                        xspeed = arcCalcXspeed(yspeed, memGrav, x, y, view_xview+view_wview/2 + (16*image_xscale), ystart);
                    }
                    
                    // attack windup animation
                    if (attackTimer &lt; 20)
                    {
                        xspeed = 0;
                        image_index = 13;
                    } // throw animation
                    else if (attackTimer &lt; 40)
                    {
                        image_index = 14;
                    }
                    // reset phases
                    else if (ground)
                    {
                        phase = 0;
                        attackTimer = -60; // give an extra second
                        image_index = 1;
                    }
                    // do attack
                    if (attackTimer == 20)
                    {
                        var proj = instance_create(x+8*image_xscale,y,objNitroManCutter);
                        proj.yspeed = 2;
                        proj.image_xscale = -1;
                        proj.xspeed = arcCalcXspeed(proj.yspeed, proj.grav, x+8*image_xscale, y, view_xview+view_wview/2 + 96, ystart);
                        var proj = instance_create(x+8*image_xscale,y,objNitroManCutter);
                        proj.yspeed = 2;
                        proj.image_xscale = 1;
                        proj.xspeed = arcCalcXspeed(proj.yspeed, proj.grav, x+8*image_xscale, y, view_xview+view_wview/2 - 96, ystart);
                        // attack
                        playSFX(sfxWheelCutter1);
                    }
                    
                    // stop gravity if timer less then 30
                    pauseGravity = (attackTimer &lt; 40 &amp;&amp; phase == 5);
                    
                }
                else
                // if going up don't stop movement
                    attackTimer = 0;
                
                break;

            case 6: // floor throw
                // go for landing
                // attack windup animation
                if (attackTimer &lt; 20 || (attackTimer &gt; 40 &amp;&amp; attackTimer &lt; 60))
                {
                    xspeed = 0;
                    image_index = 15;
                } // throw animation
                else if (attackTimer &lt; 40 || (attackTimer &gt; 60 &amp;&amp; attackTimer &lt; 80))
                {
                    image_index = 17;
                }
                // reset phases
                else if (attackTimer &gt;= 100)
                {
                    phase = 0;
                    attackTimer = -30; // give half a second
                    image_index = 1;
                }
                // do attack
                if (attackTimer == 20)
                {
                    var proj = instance_create(x+8*image_xscale,y,objNitroManCutter);
                    proj.yspeed = 2;
                    proj.xspeed = image_xscale*2;
                    proj.image_xscale = image_xscale;
                }
                if (attackTimer == 60)
                {
                    var proj = instance_create(x+8*image_xscale,y,objNitroManCutter);
                    proj.yspeed = -6;
                    proj.xspeed = image_xscale*1.5;
                    proj.image_xscale = image_xscale;
                }
                break;
            case 7: // ice freeze
                if (attackTimer &gt;= 60)
                {
                    phase = 0;
                    attackTimer = 20;
                }
                break;
            
        }
//        x = round(x);
    }
}
else
{ }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if (other.object_index == objPharaohShot)
{
    with (objPharaohShot)
    {
        if (sprite_index = sprPharaohShotCharged)
        {
            extraDamage = 4;
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objNitroManCutter)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
    
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (other.sprite_index == sprChillShot)
{
    attackTimer = 0;
    phase = 7;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is used for "tier boss"-esque cutscenes. Until you specifically set startIntro to false,
// the boss will continue to run this code and wait for you to specify it's the end.
// Here is an example cutscene.

// Check if cutsceneScript is set
if (cutsceneScript != "")
{
    script_execute(cutsceneScript);
    exit;
}

// DON'T REMOVE THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING
cutsceneTimer += 1;
if (cutsceneTimer &lt; 20)
{
    visible = false;
    sprite_index = sprNitroManIntro;
}

if (cutsceneTimer mod 4 == 1)
{
    switch(floor(image_index))
    {
        case 0:
            image_index = 1;
            break;
        case 1:
            image_index = 0;
            break;
        case 2:
            image_index = 3;
            break;
        case 3:
            image_index = 2;
            break;
        case 4:
            image_index = 5;
            break;
        case 5:
            image_index = 4;
            break;
    }
}

if (cutsceneTimer == 20)
{
    visible = true;
    blockCollision = false;
    yspeed = -1.5;
    y -= 64;
    image_index = 0;
    image_xscale = -image_xscale;
    xspeed = image_xscale*4;
    x = view_xview-16+(view_wview*(image_xscale == -1));
    playSFX(sfxRushCycle1);
}

if (cutsceneTimer == 40)
{
    blockCollision = true;
}
if (cutsceneTimer == 49 &amp;&amp; !(x &gt; xstart-40 &amp;&amp; x &lt; xstart+40))
{
    cutsceneTimer = 48;
}

if (cutsceneTimer == 50)
{
    playSFX(sfxRushCycle2);
    image_index = 4;
    image_xscale = -image_xscale;
}
if (cutsceneTimer &gt;= 50 &amp;&amp; cutsceneTimer &lt; 600)
{
    xspeed = xspeed/1.1;
    if (round(xspeed) == 0)
    {
        xspeed = 0;
        cutsceneTimer = 600;
    }
}
else if (ground &amp;&amp; image_index &lt; 2 &amp;&amp; yspeed &gt;= 0) // land
    image_index = 2;

//yspeed -= 1/15;
//y += yspeed;
if y &gt;= ystart
{
    yspeed = 0;
    y = ystart;
}

if (cutsceneTimer == 600)
{
    startIntro = false; // now start the boss.
    isIntro = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead)
{
    if (drawBoss) // actually draw itself
    {
        if ((iFrames mod 4) &lt; 2 || !iFrames)
        {
            var iceBlinkTime = 42;
            if ((ceil(iFrames / 2) mod 2) || (iceTimer &gt; 0 &amp;&amp; (iceTimer &gt; iceBlinkTime || (iceTimer &lt;= iceBlinkTime &amp;&amp; iceTimer mod 4 == 0))))
            {
                var flashcol = c_white;
                if (iceTimer &gt; 0 &amp;&amp; (iceTimer &gt; iceBlinkTime || (iceTimer &lt;= iceBlinkTime &amp;&amp; iceTimer mod 4 == 0)))
                {
                    switch (iceGraphicStyle)
                    {
                        case 1:
                            flashcol = 0;
                            break;
                        default:
                            flashcol = make_color_rgb(0, 120, 255);
                            break;
                    }
                }
                
                if(!iFrames || (iFrames &amp;&amp; iceTimer &gt; 0))
                {
                    d3d_set_fog(true, flashcol, 0, 0);
                }
                drawSelf();
                d3d_set_fog(false, 0, 0, 0);
                
                if (iceTimer &gt; 0 &amp;&amp; (iceTimer &gt; iceBlinkTime || (iceTimer &lt;= iceBlinkTime &amp;&amp; iceTimer mod 4 == 0)))
                {
                    draw_set_blend_mode(bm_add);
                    drawSelf();
                    draw_set_blend_mode(bm_normal);
                }
            }
            else
                drawSelf();
        }
        else // Hitspark
        {
            draw_sprite_ext(sprHitspark, 0, spriteGetXCenter(), spriteGetYCenter(), 1, 1, 0, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
