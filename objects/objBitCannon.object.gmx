<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBitManBullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 2;
blockCollision = 0;

image_speed = 0.5;

penetrate = 3;
pierces = 3;

playSFX(sfxWheelCutter1);

grav = 0;
timer = 10;
timerMax = 5;
state = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(true)
{
    if(state == 0) // held
    {
        if(parent)
        {
            image_xscale = parent.image_xscale;
            image_yscale = parent.image_yscale;
            var xOffset = 18;
            var yOffset = 0;
            if(parent.ground)
            {
                if(parent.isSlide)
                {
                    xOffset -= 8;
                    yOffset += 2;
                }
                else
                {
                    if(parent.spriteX == 4 || parent.spriteX == 6) yOffset += 4;
                    else yOffset += 5;
                    if(parent.spriteX &gt;= 3 &amp;&amp; parent.spriteX &lt;= 6) xOffset -= 2;
                }
            }
            else if(parent.climbing)
            {
                xOffset -= 5;
                yOffset += 3;
            }
            else
            {
                xOffset -= 5;
            }
            x = parent.x + xOffset*parent.image_xscale;
            y = parent.y + yOffset*parent.image_yscale;
            parent.spriteY = 1;
            parent.isShoot = 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(state == 0) // held
    {
        if(instance_exists(parent))
        {
            image_xscale = parent.image_xscale;
            image_yscale = parent.image_yscale;
            var xOffset = 18;
            var yOffset = 0;
            if(parent.ground)
            {
                if(parent.isSlide)
                {
                    xOffset -= 8;
                    yOffset += 2;
                }
                else
                {
                    if(parent.spriteX == 4 || parent.spriteX == 6) yOffset += 4;
                    else yOffset += 5;
                    if(parent.spriteX &gt;= 3 &amp;&amp; parent.spriteX &lt;= 6) xOffset -= 2;
                }
            }
            else if(parent.climbing)
            {
                xOffset -= 5;
                yOffset += 3;
            }
            else
            {
                xOffset -= 5;
            }
            x = parent.x + xOffset*parent.image_xscale;
            y = parent.y + yOffset*parent.image_yscale;
            parent.spriteY = 1;
            parent.isShoot = 1;
            if(parent.climbing)
            {
                yspeed = 0;
                if(parent.xDir &gt; 0)
                {
                    parent.image_xscale = 1;
                    image_xscale = 1;
                }
                else if(parent.xDir &lt; 0)
                {
                    parent.image_xscale = -1;
                    image_xscale = -1;
                }
                else parent.image_xscale = image_xscale;
            }
            
            if(!global.keyShoot[playerID] || parent.iFrames &lt; 0)
            {
                state = 1;
                playSFX(sfxWheelCutter2);
            }
        }
        else
        {
            state = 1;
            playSFX(sfxWheelCutter2);
        }
        
        if(checkSolid(0,0))
        {
            timer++;
            if(timer &gt;= timerMax &amp;&amp; global.ammo[playerID,ds_map_find_value(global.weaponID,objBitCannon)] &gt; 0)
            {
                timer = 0;
                var bit = instance_create(x,y,objBitCannonBit);
                bit.grav = 0.25*image_yscale;
                bit.image_xscale = -image_xscale;
                bit.image_yscale = image_yscale;
                bit.xspeed = -image_xscale * random_range(1,3);
                bit.yspeed = -random_range(1,3) * image_yscale;
                global.ammo[playerID,ds_map_find_value(global.weaponID,objBitCannon)] -= 0.1;
            }
        }
        else
        {
            timer = timerMax;
        }
    }
    else if(state == 1) // released
    {
        if(checkSolid(0,0))
        {
            xspeed = image_xscale * 1;
            timer++;
            if(timer &gt;= timerMax &amp;&amp; global.ammo[playerID,ds_map_find_value(global.weaponID,objBitCannon)] &gt; 0)
            {
                timer = 0;
                var bit = instance_create(x,y,objBitCannonBit);
                bit.grav = 0.25*image_yscale;
                bit.image_xscale = -image_xscale;
                bit.image_yscale = image_yscale;
                bit.xspeed = -image_xscale * random_range(1,3);
                bit.yspeed = -random_range(1,3) * image_yscale;
                global.ammo[playerID,ds_map_find_value(global.weaponID,objBitCannon)] -= 0.2;
            }
        }
        else
        {
            xspeed = image_xscale * 3;
            timer = timerMax;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// EV_WEAPON_CONTROL

var launchNewOne = 1;
for(var j = 0; j &lt; instance_number(objBitCannon); j++)
{
    var checkedInstance = instance_find(objBitCannon,j);
    if(checkedInstance.state == 0)
    {
        launchNewOne = 0;
        j = instance_number(objBitCannon);
    }
}

if (!playerIsLocked(PL_LOCK_SHOOT))
{
    if(global.keyShoot[playerID] &amp;&amp; launchNewOne)
    {
        i = fireWeapon(20, 0, objBitCannon, 2, 1, 1, 0);
        if (i)
        {
            i.image_xscale = image_xscale;
            i.image_yscale = image_yscale;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("BIT CANNON", global.nesPalette[20], global.nesPalette[34], sprWeaponIconsBitCannon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// nope

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
