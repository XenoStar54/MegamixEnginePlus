<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSuperBassBossHover</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprNumberManEXEidle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
introType = 0;
customPose = 1;
poseImgSpeed = 0;
contactDamage = 4;
ground = false;
phase = 0;
timer = 0;
hasTriggeredFall = false;
grav = 0;
myGrav = grav;

imgSpdHover = 0.3;
spd = 1.75;
quickSpd = 3.5;
diveSpd = 5;
dir = -1;
yMemo = y;
wallThickness = 16;

newPhase = 0;
prevMove = -1;
prevPrevMove = -2;
roamTimeout = 90;

// Health Bar
healthBarPrimaryColor[1] = 0;
healthBarSecondaryColor[1] = 3;

// Music

music = "BassBossTheme.spc";
musicType = "VGM";
musicVolume = 0.8;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 2);

/*
// MaGMML3
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 3);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 0);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objMagneticShockwave, 2);
enemyDamageValue(objIceWall, 3);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 2);
enemyDamageValue(objSakugarne, 0);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 2);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 4);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 4);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 5);
enemyDamageValue(objRainFlush, 3);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 4);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);

// Misc.
enemyDamageValue(objPowerStone, 0);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBrickWeapon, 1);
enemyDamageValue(objIceSlasher, 3);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        timer = 0;
        phase = 0;
        newPhase = 0;
        prevMove = -1;
        prevPrevMove = -2;
        hasTriggeredFall = false;
        yMemo = y;
        y -= view_hview;
        xspeed = 0;
        yspeed = 0;
        grav = 0;
        blockCollision = 0;
        startIntro = false;
        isIntro = true;
    }
    else if(isIntro)
    {
        if(!hasTriggeredFall)
        {
            sprite_index = sprSuperBassBossHover;
            image_speed = imgSpdHover;
            if(target) calibrateDirection();
            visible = true;
            if(abs(y - yMemo) &gt; 1)
            {
                yspeed = (yMemo - y)/15;
            }
            else
            {
                shiftObject(0,yMemo - y,0);
                hasTriggeredFall = true;
                yspeed = 0;
            }
        }
        else
        {
            if(timer == 0)
            {
                sprite_index = sprSuperBassBossInvincible;
                image_speed = imgSpdHover;
                playSFX(sfxAbsorb);
            }
            timer++;
            if(timer == 30)
            {
                with(instance_create(bboxGetXCenter(),bboxGetYCenter(),objSuperBassBossSuperChargedParticle))
                {
                    parent = other;
                    playSFX(sfxPharaohShotCharged);
                }
            }
            if(timer == 60)
            {
                sprite_index = sprSuperBassBossShoot;
                image_speed = imgSpdHover;
            }
            if(timer &gt;= 90)
            {
                sprite_index = sprSuperBassBossHover;
                image_speed = imgSpdHover;
                isIntro = false;
                canFillHealthBar = true;
                phase = 0;
                timer = 0;
            }
        }
    }
    else if(isFight)
    {
        if(phase == 0) // hover around
        {
            if(!blockCollision)
            {
                if(!checkSolid(0,0)) blockCollision = 1;
            }
            sprite_index = sprSuperBassBossHover;
            image_speed = imgSpdHover;
            if(target) calibrateDirection();
            if(checkSolid(dir*spd*2,0)) dir *= -1;
            xspeed = dir*spd;
            timer++;
            if(timer == roamTimeout)
            {
                if(prevMove == prevPrevMove &amp;&amp; prevMove &gt; 0)
                {
                    if(prevMove == 1) newPhase = choose(2,4);
                    else if(prevMove == 2) newPhase = choose(1,4);
                    else if(prevMove == 4) newPhase = choose(1,2);
                    else newPhase = choose(1,2,4);
                }
                else newPhase = choose(1,2,4);
            }
            else if(timer &gt; roamTimeout)
            {
                var stopCheck = false;
                if(newPhase == 1)
                {
                    if(timer &gt; roamTimeout)
                    {
                        xspeed = 0;
                    }
                    if(timer &gt; roamTimeout + 15)
                    {
                        stopCheck = true;
                    }
                }
                else if(newPhase == 2)
                {
                    if(x &gt; view_xview + view_wview/2) dir = 1;
                    else dir = -1;
                    if(abs(x - (view_xview + view_wview/2)) &gt; view_wview/4)
                    {
                        xspeed = 0;
                        stopCheck = true;
                    }
                }
                else if(newPhase == 4)
                {
                    if(x &gt; view_xview + view_wview/2) dir = -1;
                    else dir = 1;
                    xspeed = dir*spd;
                    if(abs(x - (view_xview + view_wview/2)) &lt; abs(xspeed))
                    {
                        shiftObject((view_xview + view_wview/2) - x,0,blockCollision);
                        xspeed = 0;
                        stopCheck = true;
                    }
                }
                
                if(stopCheck)
                {
                    prevPrevMove = prevMove;
                    prevMove = newPhase;
                    phase = newPhase;
                    xspeed = 0;
                    timer = 0;
                }
            }
        }
        else if(phase == 1) // shoot twice
        {
            if(target) calibrateDirection();
            if(!blockCollision)
            {
                if(!checkSolid(0,0)) blockCollision = 1;
            }
            if(ground)
            {
                sprite_index = sprSuperBassBossStand;
                image_speed = 0;
                timer++;
                if(timer &lt; 15 || timer &gt; 75) image_index = 0;
                else image_index = 1;
                if(timer == 30 || timer == 60)
                {
                    var xpos = 17, ypos = 3;
                    var shot = instance_create(x+image_xscale*xpos,y+image_yscale*ypos,objSuperBassBossChargedShot);
                    shot.xspeed = image_xscale*3;
                    shot.image_xscale = image_xscale;
                    playSFX(sfxEnkerShot);
                }
                else if(timer &gt;= 90)
                {
                    yspeed = -image_yscale*diveSpd;
                    sprite_index = sprSuperBassBossHover;
                    image_speed = imgSpdHover;
                }
            }
            else
            {
                if(timer == 0) yspeed = image_yscale*diveSpd;
                else if(timer &gt;= 90) yspeed = -image_yscale*diveSpd;
                sprite_index = sprSuperBassBossHover;
                image_speed = imgSpdHover;
                if((sign(yspeed) == -image_yscale &amp;&amp; abs(y - yMemo) &lt;= abs(yspeed)) || checkSolid(0,-image_yscale))
                {
                    shiftObject(0,(yMemo-y),blockCollision);
                    timer = 0;
                    phase = 0;
                    yspeed = 0;
                }
            }
        }
        else if(phase == 2) // fly up then prepare BIG LASER
        {
            if(timer == 0)
            {
                blockCollision = 0;
                xspeed = 0;
                yspeed = 0;
                sprite_index = sprSuperBassBossInvincible;
                image_speed = imgSpdHover;
                
                playSFX(sfxAbsorb);
            }
            timer++;
            if(timer == 30)
            {
                with(instance_create(bboxGetXCenter(),bboxGetYCenter(),objSuperBassBossSuperChargedParticle))
                {
                    parent = other;
                    playSFX(sfxPharaohShotCharged);
                }
            }
            
            if(timer &gt;= 60)
            {
                if((image_yscale &gt; 0 &amp;&amp; y &gt; view_yview - 24) || (image_yscale &lt; 0 &amp;&amp; y &lt; view_yview + view_hview + 24))
                {
                    yspeed = -image_yscale*diveSpd;
                    sprite_index = sprSuperBassBossUp;
                    image_speed = imgSpdHover;
                }
                else
                {
                    // teleport to the other side of the arena; if a target exists, teleport behind them
                    var xpos = x;
                    if(target)
                    {
                        xpos = target.x;
                        if(xpos &lt; view_xview + view_wview/2)
                        {
                            x = view_xview + 8 + wallThickness;
                            image_xscale = 1;
                        }
                        else
                        {
                            x = view_xview + view_wview - 8 - wallThickness;
                            image_xscale = -1;
                        }
                    }
                    else
                    {
                        if(xpos &gt; view_xview + view_wview/2)
                        {
                            x = view_xview + 8 + wallThickness;
                            image_xscale = 1;
                        }
                        else
                        {
                            x = view_xview + view_wview - 8 - wallThickness;
                            image_xscale = -1;
                        }
                    }
                    yspeed = 0;
                    xspeed = 0;
                    phase = 3;
                    timer = -1;
                }
            }
        }
        else if(phase == 3) // BIG LASER
        {
            if(timer == -1)
            {
                if(abs(y - (yMemo-32*image_yscale)) &gt; abs(yspeed))
                {
                    sprite_index = sprSuperBassBossHover;
                    image_speed = imgSpdHover;
                    yspeed = image_yscale*diveSpd;
                }
                else
                {
                    timer = 0;
                    yspeed = 0;
                    xspeed = 0;
                }
            }
            else
            {
                if(timer &lt; 15)
                {
                    sprite_index = sprSuperBassBossDownPrepare;
                    image_speed = 0;
                    image_index = 0;
                    shiftObject(0,(yMemo-32*image_yscale) - y,blockCollision);
                    timer++;
                }
                else if(timer == 15)
                {
                    sprite_index = sprSuperBassBossDown;
                    image_speed = imgSpdHover;
                    var beamXOffset = 4;
                    var beamYOffset = 6;
                    var beam = instance_create(x+beamXOffset*image_xscale,y+beamYOffset*image_yscale,objSuperBassBossBeam);
                    beam.parent = self;
                    beam.xOffset = beamXOffset;
                    beam.yOffset = beamYOffset;
                    beam.image_xscale = image_xscale;
                    timer++;
                    playSFX(sfxKomusoShot);
                }
                else
                {
                    var endCheck = false;
                    if(image_xscale &gt; 0)
                    {
                        if(abs(x - (view_xview + view_wview - wallThickness)) &lt;= 32) endCheck = true;
                    }
                    else
                    {
                        if(abs(x - (view_xview + wallThickness)) &lt;= 32) endCheck = true;
                    }
                    if(!endCheck) xspeed = quickSpd*image_xscale;
                    else
                    {
                        with(objSuperBassBossBeam) instance_destroy();
                        xspeed = 0;
                        if(abs(y - yMemo) &gt; abs(yspeed)) // float down
                        {
                            sprite_index = sprSuperBassBossHover;
                            image_speed = imgSpdHover;
                            yspeed = image_yscale*spd;
                        }
                        else // end move
                        {
                            shiftObject(0,yMemo - y,blockCollision);
                            phase = 0;
                            timer = 0;
                            xspeed = 0;
                            yspeed = 0;
                            dir = image_xscale;
                            if(!blockCollision)
                            {
                                if(!checkSolid(0,0)) blockCollision = 1;
                            }
                        }
                    }
                }
            }
        }
        else if(phase == 4) // METEOR SHOTS
        {
            if(timer == 0)
            {
                sprite_index = sprSuperBassBossInvincible;
                image_speed = imgSpdHover;
                xspeed = 0;
                yspeed = 0;
                
                playSFX(sfxAbsorb);
            }
            timer++;
            if(timer == 30)
            {
                with(instance_create(bboxGetXCenter(),bboxGetYCenter(),objSuperBassBossSuperChargedParticle))
                {
                    parent = other;
                    playSFX(sfxPharaohShotCharged);
                }
            }
            
            if(timer &gt;= 60)
            {
                if(timer &lt; 75)
                {
                    sprite_index = sprSuperBassBossHover;
                    image_speed = imgSpdHover;
                }
                else if(timer &lt; 90)
                {
                    sprite_index = sprSuperBassBossUpPrepare;
                    image_speed = 0;
                    image_index = 0;
                }
                else if(timer == 90)
                {
                    sprite_index = sprSuperBassBossUp;
                    image_speed = imgSpdHover;
                    var shotXOffset = 9, shotYOffset = -15;
                    var shot = instance_create(x+shotXOffset*image_xscale,y+shotYOffset*image_yscale,objSuperBassBossMeteorShotMaker);
                    shot.yspeed = -image_yscale*4;
                    shot.image_yscale = image_yscale;
                    playSFX(sfxEnkerShotBig);
                }
                else if(timer == 120)
                {
                    var shotXOffset = 9, shotYOffset = -15;
                    var shot = instance_create(x+shotXOffset*image_xscale,y+shotYOffset*image_yscale,objSuperBassBossMeteorShotMaker);
                    shot.yspeed = -image_yscale*4;
                    shot.image_yscale = image_yscale;
                    shot.offset = 24;
                    playSFX(sfxEnkerShotBig);
                }
                else if(timer &gt; 150)
                {
                    sprite_index = sprSuperBassBossHover;
                    image_speed = imgSpdHover;
                    if(target) calibrateDirection();
                    dir = image_xscale;
                    phase = 0;
                    timer = 0;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index == sprSuperBassBossInvincible) other.guardCancel = 4;
else event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
// kill your stuff
with(prtEnemyProjectile) event_user(EV_DEATH);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
