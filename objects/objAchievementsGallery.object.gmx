<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.nextRoom = -1;
visible = 0;

if (!instance_number(object_index) &gt; 1 || instance_exists(objOptionsMenu))
{
    instance_destroy();
    visible = 0;
    exit;
}

cursorImgIndex = 0;
cursorImgSpd = 0.1;

arrowBlinkTimer = 20;
showArrow = true;

phase = 0;
option = 0;
selected = 0;
buffer = 0;

subOption = 0;
aboutToDelete = 0;
timer = 0;

visibleOptions = 12;
optionOffset = 0;

verticalQuickScrollTimer = 25;
horizontalQuickScrollTimer = 25;

// Control settings
newControls = 0;
current = 'NONE';
press = 1;
currentKeys[40]=-1;
keyID = 0;
key = -1;

// achievement name
achievementName[0] = "CUT MAN'S SECRET"
achievementName[1] = "CUT MAN'S ANOTHER SECRET"
//for(var i = 2; i &lt; 32; i++) achievementName[i] = 'placeholder'

// achievement description
achievementDesc[0] = "Find a hidden yashichi#in Cut Man's level."
achievementDesc[1] = "Find another hidden yashichi#in Cut Man's level."
//for(var i = 2; i &lt; 32; i++) achievementDesc[i] = 'placeholder'

// achievement name to check for
achievementNick[0] = 'getCutManYashichi';
achievementNick[1] = 'getCutManYashichi2';
//for(var i = 2; i &lt; 32; i++) achievementNick[i] = 'placeholder'

achievementObtained = makeArray(0);

event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open and close behavior
switch (phase)
{
    // Fading out
    case 0:
        if (objGlobalControl.fadeAlpha == 1)
        {
            global.nextRoom = 0;
            objGlobalControl.showhealth = 0;
            visible = 1;
            phase++;
        }
        break;
    
    // Fading in
    case 1:
        if (objGlobalControl.fadeAlpha == 0)
        {
            phase++;
        }
        break;
    
    // Doing menu selections
    case 2: // done elsewhere 
        break;
    
    // Fading out
    case 3:
        global.nextRoom = -1;
        phase++;
        break;
    
    // End fading out
    case 4:
        if (objGlobalControl.fadeAlpha == 1 &amp;&amp; global.nextRoom != 0)
        {
            global.nextRoom = 0;
            visible = 0;
        }
        else if (objGlobalControl.fadeAlpha == 0 &amp;&amp; global.nextRoom == 0)
        {
            global.frozen = true;
            instance_destroy();
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view achievements

if(array_length_1d(achievementName) &lt;= visibleOptions)
{
    optionOffset = 0;
}

if(phase == 2 &amp;&amp; !selected)
{
    if(aboutToDelete == 0)
    {
        // Up / down controls
        if (global.keyUpPressed[0] || (global.keyUp[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
        {
            // up
            option -= 1;
            if (option &lt; 0)
            {
                // loop
                option = array_length_1d(achievementName) - 1;
                optionOffset = max(array_length_1d(achievementName) - visibleOptions, 0);
            }
            else if (option &lt; optionOffset)
            {
                optionOffset--;
            }
            
            playSFX(sfxMenuMove);
        }
        else if (global.keyDownPressed[0] || (global.keyDown[0] &amp;&amp; verticalQuickScrollTimer &lt;= 0))
        {
            // down
            option += 1;
            if (option &gt;= array_length_1d(achievementName))
            {
                // loop
                option = 0;
                optionOffset = 0;
            }
            else if (option &gt;= optionOffset + visibleOptions)
            {
                optionOffset++;
            }
            
            playSFX(sfxMenuMove);
        }
        
        // vertical quick scroll timer handling
        if (horizontalQuickScrollTimer == 25 // don't quick scroll vertically if doing it horizontally
        &amp;&amp; (global.keyUp[0] ^^ global.keyDown[0]) // only activate quick scroll if one button is being held
        &amp;&amp; !(option &lt;= 0 &amp;&amp; global.keyUp[0]) &amp;&amp; !(option &gt;= array_length_1d(achievementName) - 1 &amp;&amp; global.keyDown[0])) // don't wrap around with quick scroll
        {
            if (verticalQuickScrollTimer &lt;= 0)
            {
                // slight pause between scrolls
                verticalQuickScrollTimer = 9;
            }
            
            verticalQuickScrollTimer--;
        }
        else
        {
            verticalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
        }
        
        // horizontal quick scroll timer handling
        if (verticalQuickScrollTimer == 25 // don't quick scroll horizontally if doing it vertically
        &amp;&amp; (global.keyLeft[0] ^^ global.keyRight[0]))
        {
            if (horizontalQuickScrollTimer &lt;= 0)
            {
                // slight pause between scrolls
                horizontalQuickScrollTimer = 9;
            }
            
            horizontalQuickScrollTimer--;
        }
        else
        {
            horizontalQuickScrollTimer = 25; // &lt;-- time until quick scroll here
        }
    }
    else if(aboutToDelete == 1)
    {
        if(global.keyLeftPressed[0] || global.keyRightPressed[0])
        {
            subOption = !subOption;
            playSFX(sfxMenuMove);
        }
    }
    else if(aboutToDelete == 2)
    {
        if(timer &gt; 0) timer--;
        else aboutToDelete = 0;
    }
    
    
    if(global.keySlidePressed[0]) // reset achievements
    {
        if(!aboutToDelete)
        {
            subOption = 0;
            aboutToDelete = 1;
        }
        else
        {
            if(!subOption)
            {
                if(global.achievementsAreSaveFileBound)
                {
                    global.achievementTrackerSave = makeArray(0);
                }
                else
                {
                    global.achievementTrackerIndependent = makeArray(0);
                }
                saveLoadAchievements(1);
                playSFX(sfxMenuSelect);
                aboutToDelete = 2;
                timer = 30;
                event_user(0);
            }
            else
            {
                aboutToDelete = 0;
            }
        }
    }
    
    if(global.keyShootPressed[0] || global.keyPausePressed[0]) // leave
    {
        selected = 1;
        phase++;
        playSFX(sfxMenuSelect);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reload achievements
var arrayToCheck = global.achievementTrackerIndependent;
if(global.achievementsAreSaveFileBound) arrayToCheck = global.achievementTrackerSave;

for(var i = 0; i &lt; array_length_1d(achievementNick); i++)
    achievementObtained[i] = (indexOf(arrayToCheck,achievementNick[i]) &gt; 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_color(c_white);

// center display on non-standard resolutions
drawXPositionList = view_xview + 32;
drawYPositionList = view_yview + 16;

// draw list bg
draw_set_color(global.nesPalette[54]);
draw_rectangle(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, 0);
draw_set_color(c_white);

// draw line below achievement name
draw_set_color(global.nesPalette[14]);
draw_rectangle(view_xview, drawYPositionList-2 + (option - optionOffset)*12, view_xview + view_wview, drawYPositionList+9 + (option - optionOffset)*12, 0);
draw_set_color(c_white);

// animate cursor
cursorImgIndex += cursorImgSpd;
if (cursorImgIndex &gt;= 5)
{
    cursorImgIndex -= 5;
}

// draw cursor
draw_sprite(sprOptionsCursor, cursorImgIndex, drawXPositionList - 24, drawYPositionList + (option - optionOffset)*12);

// draw achievements list
for(var j = 0; j &lt; min(visibleOptions, array_length_1d(achievementName)); j++)
{
    var i = j + optionOffset;
    if(achievementObtained[i])
    {
        draw_sprite(sprWilyCastleDots,0,drawXPositionList-12,drawYPositionList + (i - optionOffset)*12)
        draw_set_color(global.nesPalette[34]);
    }
    draw_text(drawXPositionList, drawYPositionList + (i - optionOffset)*12, achievementName[i]);
    draw_set_color(c_white);
}

// draw desc
draw_set_color(global.nesPalette[14]);
draw_rectangle(view_xview, drawYPositionList + (visibleOptions)*12 + 2, view_xview + view_wview, view_yview+view_hview, 0);
draw_set_color(c_white);

if(aboutToDelete &gt; 0)
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    if(aboutToDelete == 1)
    {
        draw_text(view_xview+view_wview/2, drawYPositionList + 180, "Reset achievement progress?");
        var opt = 'yes';
        if(subOption) opt = 'no';
        draw_text(view_xview+view_wview/2, drawYPositionList + 180 + 12, opt);
    }
    else if(aboutToDelete == 2)
    {
        draw_text(view_xview+view_wview/2, drawYPositionList + 180, "Achievements reset.");
    }
}
else
{
    draw_text(view_xview+8, drawYPositionList + (visibleOptions+1)*12 + 4 + 2, achievementDesc[option]);
    if(achievementObtained[option])
    {
        draw_set_color(global.nesPalette[34]);
        draw_text(drawXPositionList+8, drawYPositionList + (visibleOptions)*12 + 4 + 2, 'COMPLETED!');
        draw_set_color(c_white);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
