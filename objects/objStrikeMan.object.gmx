<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprStrikeMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskStrikeMan</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprStrikeManPose;
introType = 0;
poseImgSpeed = 0;
contactDamage = 4;
ground = false;
attackTimer = 0;

thrownObject = objStrikeManProjectile;
thrownObjectCode = "";

spriteNormal = sprStrikeMan;
spriteBall = sprStrikeManBall;
spriteSpin = sprStrikeManSpin;
spriteTired = sprStrikeManTired;

timer = 0;
phase = 0;

myGrav = 0.25;

baseBallDmg = 2;
ballDmgInc = 1;
ballHitCount = 5;
ballSpd = 5;
ballAims = 1;

baseSpinBallDmg = 2;
spinBallDmgInc = 1;
spinBallHitCount = 5;
spinBallSpd = 5;
spinBallAims = 0;

jumpTypeTracker = 1;
throwTypeTracker = 0;
jumpTracker = 0;

doesSpin = 0;
doesGetTired = 0;
randomJump = 0;
ballsDestroyedTracker = 0;
ballsDestroyedThreshold = 2;

spinsLeft = 0;
throwsPerSpin = 4;

previousMoveTracker = -1;
previousPreviousMoveTracker = -2;
previousJumpTracker = -1;
previousPreviousJumpTracker = -2;

xDest = x;
yDest = y;

throwCheck[0] = 0;
throwCheck[1] = 0;
throwCheck[2] = 0;
throwCheck[3] = 0;

destroysMyBall[0] = objTripleBlade;

// @cc: this variable dictates which difficulty mode Strike Man uses
overrideDifficultyMode = -1;
// -1: determined by game's current difficulty
// 0: easy
// 1: normal
// 2: hard
// 3: custom

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 33;

// Music
music = "Mega_Man_10.nsf";
musicType = "VGM";
musicTrackNumber = 18;

// Damage Table
enemyDamageValue(objBusterShot, 2);
enemyDamageValue(objBusterShotHalfCharged, 2);
enemyDamageValue(objBusterShotCharged, 4);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 0);

// MM2
enemyDamageValue(objMetalBlade, 4);

// MM3
enemyDamageValue(objNeedleCannon, 4);
enemyDamageValue(objMagnetMissile, 0);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 0);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 4);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 4);

// MM6
enemyDamageValue(objPlantBarrier, 0);
enemyDamageValue(objYamatoSpear, 4);

// MM7
enemyDamageValue(objSlashClaw, 4);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 3);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 0);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 4);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 4);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 2);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        calibrateDirection();
        visible = true;
        phase = 0;
        timer = 0;
        attackTimer = 0;
        grav = myGrav;
        xspeed = 0;
        yspeed = 5*sign(myGrav);
        y -= view_hview*sign(myGrav);
        blockCollision = 0;
        // well, let's do it
        if(overrideDifficultyMode == -1)
        {
            if(global.difficulty == DIFF_EASY) overrideDifficultyMode = 0;
            else if(global.difficulty == DIFF_HARD) overrideDifficultyMode = 2;
            else overrideDifficultyMode = 1;
        }
        switch(overrideDifficultyMode)
        {
            case 0:
                baseBallDmg = 2;
                ballDmgInc = 1;
                ballHitCount = 4;
                ballSpd = 4;
                ballAims = 1;
                jumpTypeTracker = -1;
                throwTypeTracker = 0;
                doesSpin = 0;
                doesGetTired = 0;
                randomJump = 0;
                thrownObject = objStrikeManProjectile;
                thrownObjectCode = "";
                break;
            case 1:
                baseBallDmg = 2;
                ballDmgInc = 1;
                ballHitCount = 5;
                ballSpd = 5;
                ballAims = 1;
                jumpTypeTracker = -1;
                throwTypeTracker = 0;
                doesSpin = 0;
                doesGetTired = 0;
                randomJump = 0;
                thrownObject = objStrikeManProjectile;
                thrownObjectCode = "";
                break;
            case 2:
                baseBallDmg = 2;
                ballDmgInc = 1;
                ballHitCount = 6;
                ballSpd = 5;
                ballAims = 1;
                jumpTypeTracker = -1;
                throwTypeTracker = 0;
                doesSpin = 1;
                throwsPerSpin = 4;
                doesGetTired = 2;
                randomJump = 1;
                baseSpinBallDmg = 2;
                spinBallDmgInc = 1;
                spinBallHitCount = 5;
                spinBallSpd = 5;
                spinBallAims = 0;
                ballsDestroyedThreshold = 2;
                thrownObject = objStrikeManProjectile;
                thrownObjectCode = "";
                break;
        }
        startIntro = false;
        isIntro = true;
        sprite_index = pose;
        previousMoveTracker = -1;
        previousPreviousMoveTracker = -2;
    }
    else if(isIntro)
    {
        if(y != ystart &amp;&amp; !blockCollision)
        {
            if(sign(ystart - y) != sign(grav))
            {
                y = ystart;
                grav = 0;
                blockCollision = 1;
            }
        }
        else
        {
            timer++;
            if(timer &lt; 5)
            {
                image_index = 2;
            }
            else if(timer &lt; 25)
            {
                image_index = 3;
            }
            else if(timer &lt; 30)
            {
                image_index = 4;
            }
            else if(timer &lt; 40)
            {
                image_index = 5;
            }
            else if(timer &lt; 50)
            {
                image_index = 3;
            }
            else if(timer &lt; 55)
            {
                image_index = 4;
            }
            else if(timer &lt; 58)
            {
                image_index = 5;
            }
            else
            {
                image_index = 0;
                canFillHealthBar = 1;
                setTargetStep();
                isIntro = false;
                grav = myGrav;
                timer = 0;
                phase = 0;
                sprite_index = spriteNormal;
            }
        }
    }
    else if (isFight)
    {
        if(true) // yes
        {
            if(phase == 0) // pick throw type
            {
                calibrateDirection();
                timer++;
                if(timer &lt; 26)
                {
                    image_index = 0;
                }
                else if(timer &lt; 39)
                {
                    image_index = 1;
                }
                else
                {
                    timer = 0;
                    if(doesSpin) throwTypeTracker = choose(0,0,1,1,2);
                    else throwTypeTracker = choose(0,1);
                    if(previousMoveTracker == previousPreviousMoveTracker)
                    {
                        if(doesSpin)
                        {
                            if(previousMoveTracker == 0) throwTypeTracker = choose(1,1,2);
                            else if(previousMoveTracker == 1) throwTypeTracker = choose(0,0,2);
                            else if(previousMoveTracker == 2) throwTypeTracker = choose(0,1);
                            else throwTypeTracker = choose(0,0,1,1,2);
                        }
                        else
                        {
                            if(previousMoveTracker == 0) throwTypeTracker = 1;
                            else if(previousMoveTracker == 1) throwTypeTracker = 0;
                            else throwTypeTracker = choose(0,1);
                        }
                    }
                    if(throwTypeTracker == 2) phase = 4;
                    else phase = 1;
                    previousPreviousMoveTracker = previousMoveTracker;
                    previousMoveTracker = throwTypeTracker;
                }
            }
            else if(phase == 1) // throw
            {
                if(throwTypeTracker == 0) // forwards throw
                {
                    if(ground)
                    {
                        if(timer == 0)
                        {
                            calibrateDirection();
                            yspeed = ySpeedAim(y,y-32*sign(grav),grav);
                            timer++;
                            image_index = 2;
                        }
                        else if(timer == 1)
                        {
                            playSFX(sfxStrikeManThrow);
                            image_index = 3;
                            var ball = instance_create(x,y,thrownObject);
                            if(thrownObject == objStrikeManProjectile)
                            {
                                ball.trackDamage = baseBallDmg;
                                ball.dmgInc = ballDmgInc;
                                ball.hitCount = ballHitCount;
                                ball.gravMemo = sign(myGrav);
                                ball.spd = ballSpd;
                                ball.aim = ballAims;
                                ball.myAngle = 90-90*image_xscale;
                                ball.destroysMe = destroysMyBall;
                                ball.motherObject = self;
                            }
                            if(thrownObjectCode != "") with(ball) stringExecutePartial(other.thrownObjectCode);
                            timer++;
                        }
                        else
                        {
                            timer++;
                            if(timer &lt; 4)
                            {
                                image_index = 3;
                            }
                            else if(timer &lt; 17)
                            {
                                image_index = 4;
                            }
                            else if(timer &lt; 34)
                            {
                                image_index = 5;
                            }
                            else
                            {
                                image_index = 5;
                                phase = 2;
                                timer = 0;
                            }
                        }
                    }
                }
                else // downwards throw
                {
                    if(ground)
                    {
                        if(timer == 0)
                        {
                            calibrateDirection();
                            yspeed = ySpeedAim(y,y-80*sign(grav),grav);
                            timer = -1;
                            image_index = 2;
                        }
                        else
                        {
                            timer++;
                            if(timer &lt; 15)
                            {
                                image_index = 1;
                            }
                            else
                            {
                                image_index = 0;
                                phase = 2;
                                timer = 0;
                            }
                        }
                    }
                    else
                    {
                        if(timer == -1)
                        {
                            if(yspeed == 0 || sign(yspeed) == sign(myGrav))
                            {
                                grav = 0;
                                timer = 0;
                                yspeed = 0;
                            }
                        }
                        else if(grav == 0)
                        {
                            timer++;
                            if(timer == 10)
                            {
                                playSFX(sfxStrikeManThrow);
                                image_index = 3;
                                var ball = instance_create(x,y,thrownObject);
                                if(thrownObject == objStrikeManProjectile)
                                {
                                    ball.trackDamage = baseBallDmg;
                                    ball.dmgInc = ballDmgInc;
                                    ball.hitCount = ballHitCount;
                                    ball.gravMemo = sign(myGrav);
                                    ball.spd = ballSpd;
                                    ball.aim = ballAims;
                                    ball.destroysMe = destroysMyBall;
                                    ball.myAngle = 90-90*image_xscale - 45*sign(image_xscale)*sign(myGrav);
                                    ball.motherObject = self;
                                }
                                if(thrownObjectCode != "") with(ball) stringExecutePartial(other.thrownObjectCode);
                            }
                            else if(timer == 14)
                            {
                                image_index = 4;
                            }
                            else if(timer &gt;= 30)
                            {
                                image_index = 5;
                                grav = myGrav;
                            }
                        }
                        else
                        {
                            timer = 1;
                        }
                    }
                }
            }
            else if(phase == 2) // wind down from throw
            {
                if(ground)
                {
                    image_index = 0;
                    timer++;
                    if(timer &gt; 30)
                    {
                        timer = 0;
                        phase = 3;
                        if(jumpTypeTracker &lt; 0 || randomJump)
                        {
                            if(previousJumpTracker == previousPreviousJumpTracker)
                            {
                                if(previousJumpTracker) jumpTypeTracker = 0;
                                else jumpTypeTracker = 1;
                            }
                            else jumpTypeTracker = choose(0,1);
                        }
                        else jumpTypeTracker = !jumpTypeTracker;
                        previousPreviousJumpTracker = previousJumpTracker;
                        previousJumpTracker = jumpTypeTracker;
                    }
                    else if(timer &gt; 15)
                    {
                        calibrateDirection();
                        image_index = 1;
                    }
                }
                else
                {
                    image_index = 5;
                }
            }
            else if(phase == 3) // jump
            {
                if(ground)
                {
                    jumpTracker = 1;
                    if(jumpTypeTracker) // small jump
                    {
                        if(timer == 0)
                        {
                            image_index = 5;
                            yspeed = ySpeedAim(y,y-32*sign(grav),grav);
                        }
                        else if(timer == 1)
                        {
                            yspeed = ySpeedAim(y,y-80*sign(grav),grav);
                            xspeed = image_xscale*0.75;
                            playSFX(sfxStrikeManRollingBounce);
                        }
                        else if(timer == 2)
                        {
                            yspeed = ySpeedAim(y,y-32*sign(grav),grav);
                            xspeed = image_xscale*2.5;
                            playSFX(sfxStrikeManRollingBounce);
                            yDest = y;
                        }
                        else
                        {
                            timer = 0;
                            image_speed = 0;
                            image_index = 0;
                            sprite_index = spriteNormal;
                            phase = 0;
                            xspeed = 0;
                        }
                    }
                    else // big jump
                    {
                        if(timer == 0)
                        {
                            image_index = 5;
                            yspeed = ySpeedAim(y,y-80*sign(grav),grav);
                        }
                        else if(timer == 1)
                        {
                            yspeed = ySpeedAim(y,y-56*sign(grav),grav);
                            xspeed = image_xscale*1.25;
                            playSFX(sfxStrikeManRollingBounce);
                        }
                        else if(timer == 2)
                        {
                            yspeed = ySpeedAim(y,y-80*sign(grav),grav);
                            xspeed = image_xscale*0.75;
                            playSFX(sfxStrikeManRollingBounce);
                            yDest = y;
                        }
                        else
                        {
                            timer = 0;
                            image_speed = 0;
                            image_index = 0;
                            sprite_index = spriteNormal;
                            phase = 0;
                            xspeed = 0;
                        }
                    }
                }
                else
                {
                    if((yspeed == 0 || sign(yspeed) == sign(myGrav)) &amp;&amp; jumpTracker)
                    {
                        if(timer == 0)
                        {
                            sprite_index = spriteBall;
                            image_speed = 0.4;
                        }
                        timer++;
                        jumpTracker = 0;
                    }
                    
                    if(sign(yspeed) == sign(myGrav) &amp;&amp; timer == 3 &amp;&amp; abs(y - yDest) &lt;= (48-32*jumpTypeTracker) &amp;&amp; jumpTracker == 0)
                    {
                        sprite_index = spriteNormal;
                        image_index = 5;
                        image_speed = 0;
                    }
                }
            }
            else if(phase == 4) // jump to middle
            {
                if(ground)
                {
                    timer++;
                    if(timer &lt; 5)
                    {
                        xDest = view_xview+view_wview/2;
                        yDest = y-sign(myGrav)*64;
                        if(x &lt; xDest)image_xscale = 1;
                        else image_xscale = -1;
                        image_index = 1;
                    }
                    else
                    {
                        timer = 0;
                        grav = myGrav;
                        yspeed = ySpeedAim(y,yDest - 32*sign(myGrav),grav);
                        xspeed = xSpeedAim(x,y,xDest,yDest,yspeed,grav);
                        image_index = 5;
                    }
                }
                else
                {
                    if(sign(yspeed) == sign(myGrav))
                    {
                        image_index = 6;
                    }
                    else
                    {
                        image_index = 5;
                    }
                    
                    if((sign(yspeed) == sign(myGrav) &amp;&amp; abs(y - yDest) &lt; abs(yspeed)) || ground)
                    {
                        if(abs(y - yDest) &lt; abs(yspeed))
                        {
                            y = yDest;
                        }
                        if(abs(x - xDest) &lt; abs(xspeed))
                        {
                            x = xDest;
                        }
                        xspeed = 0;
                        yspeed = 0;
                        grav = 0;
                        timer = 0;
                        phase = 5;
                        ballsDestroyedTracker = 0;
                        sprite_index = spriteSpin;
                        image_speed = 0.4;
                        playSFX(sfxStrikeManSpinAttack);
                        spinsLeft = doesSpin - 1;
                    }
                }
            }
            else if(phase == 5) // spin
            {
                timer++;
                if(timer &lt;= 30*throwsPerSpin)
                {
                    if(timer mod 30 == 0)
                    {
                        if(throwCheck[0]+throwCheck[1]+throwCheck[2]+throwCheck[3] == 4)
                        {
                            throwCheck[0] = 0;
                            throwCheck[1] = 0;
                            throwCheck[2] = 0;
                            throwCheck[3] = 0;
                        }
                        
                        var rng = choose(0,1,2,3);
                        while(throwCheck[rng]) rng = choose(0,1,2,3);
                        throwCheck[rng] = 1;
                        var angle = 90-90*image_xscale;
                        switch(rng)
                        {
                            case 0:
                                angle = 0;
                                break;
                            case 1:
                                angle = 180;
                                break;
                            case 2:
                                angle = -45*sign(myGrav);
                                break;
                            case 3:
                                angle = 180+45*sign(myGrav);
                                break;
                        }
                        var ball = instance_create(x,y,thrownObject);
                        if(thrownObject == objStrikeManProjectile)
                        {
                            ball.trackDamage = baseSpinBallDmg;
                            ball.dmgInc = ballDmgInc;
                            ball.hitCount = spinBallHitCount;
                            ball.gravMemo = -sign(myGrav);
                            ball.spd = spinBallSpd;
                            ball.aim = spinBallAims;
                            ball.myAngle = angle;
                            ball.destroysMe = destroysMyBall;
                            ball.motherObject = self;
                        }
                        if(thrownObjectCode != "") with(ball) stringExecutePartial(other.thrownObjectCode);
                    }
                }
                else
                {
                    if(spinsLeft == 0)
                    {
                        if((doesGetTired == 2 &amp;&amp; ballsDestroyedTracker &gt;= ballsDestroyedThreshold))
                        {
                            timer = 30*throwsPerSpin+60+1;
                        }
                    }
                    if(timer == 30*throwsPerSpin+60)
                    {
                        if(spinsLeft &gt; 0)
                        {
                            spinsLeft--;
                            timer = 0;
                        }
                    }
                    else if(timer &gt; 30*throwsPerSpin+60)
                    {
                        if(grav == 0)
                        {
                            grav = myGrav;
                        }
                        else if(ground)
                        {
                            timer = 0;
                            image_speed = 0;
                            sprite_index = spriteNormal;
                            image_index = 1;
                            phase = 6;
                        }
                    }
                }
            }
            else if(phase == 6) // wind down
            {
                if(doesGetTired == 1 || (doesGetTired &amp;&amp; ballsDestroyedTracker &lt; ballsDestroyedThreshold))
                {
                    timer++;
                    if(timer &lt; 15)
                    {
                        image_index = 1;
                    }
                    else if(timer &lt; 75)
                    {
                        if(image_speed == 0)
                        {
                            image_index = 0;
                            image_speed = 0.1;
                            sprite_index = spriteTired;
                            playSFX(sfxStrikeManDizzy);
                        }
                    }
                    else
                    {
                        image_speed = 0;
                        sprite_index = spriteNormal;
                        image_index = 0;
                        phase = 2;
                        timer = 0;
                    }
                }
                else
                {
                    timer++;
                    if(timer &lt; 15)
                    {
                        image_index = 1;
                    }
                    else
                    {
                        image_speed = 0;
                        sprite_index = spriteNormal;
                        image_index = 0;
                        phase = 2;
                        timer = 0;
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index == spriteBall)
{
    other.guardCancel = 3;
}
else
{
    event_inherited();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(thrownObject) event_user(10);

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
