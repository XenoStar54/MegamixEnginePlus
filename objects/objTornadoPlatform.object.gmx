<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMM9SpinningPlatform</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtRailPlatform</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
canHit = false;

image_speed = 0.1;
//@cc: decide how fast the battery spins; affects player spin rate and direction
imgSpd = 0.1;

respawnRange = -1;
despawnRange = -1;

xOffset = 16;
noFlicker = false;

isSolid = 2;
blockCollision = 0;
grav = 0;

mySpeed = 1;

// Enemy-specific code
spinRate = (1 / 3);
spinMod = 10;
spinTimer = 0;

for (i = 0; i &lt; global.playerCount; i += 1)
{
    attached[i] = false;
    attachX[i] = x;
    offset[i] = 0;
    animOffset[i] = 0;
    shootLock[i] = false;
    jumpLock[i] = false;
    lockReleaseCountdown[i] = -1;
}

currX = x;
currY = y;

//@cc: if true, jumping at the platform from below will attach to it
funMode = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Handle rotation animation
with (objMegaman)
{
    with (other)
    {
        if (attached[other.playerID])
        {
            other.x = x + attachX[other.playerID];
            other.y = y - 16 + (41 * offset[other.playerID]) + 7*(other.image_yscale &lt; 0);
            // other.image_yscale = 1;
            
            sprx = (animOffset[other.playerID] * 3 + 3*(other.image_yscale &lt; 0)) mod 6;
            spry = 12;
            
            // handle depth of player
            depth = other.depth - playerDir[other.playerID]*other.image_yscale;
            
            with (other)
            {
                playerHandleSprites("Magnet");
            }
        }
    }
}

// Stop movement if out of range
if (instance_exists(objMegaman))
{
    if (!insideSection(x, y))
    {
        x -= xspeed;
        y -= yspeed;
        x = currX;
        y = currY;
    }
    else
    {
        currX = x;
        currY = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    // Check for drop rails
    if (instance_exists(lastRail))
    {
        if (lastRail.drop)
        {
            image_speed = 0;
        }
        else
        {
            image_speed = imgSpd;
        }
    }
    else
    {
        image_speed = imgSpd;
    }
    
    // Rotate this absolute madman if they're touching the platform
    with (objMegaman)
    {
        with (other)
        {
            // Check if the player is touching the platform or is already attached
            var ascendCheck = 0;
            if(other.gravDir &gt; 0)
            {
                if(bbox_top &lt; other.bbox_top) ascendCheck = 1;
            }
            else
            {
                if(bbox_bottom &gt; other.bbox_bottom) ascendCheck = 1;
            }
            if ((place_meeting(x, y - other.gravDir * 2, other) &amp;&amp; !place_meeting(x, y, other) &amp;&amp; other.ground)
                || (place_meeting(x, y + other.gravDir * 2, other) &amp;&amp; /*sign(other.yspeed) == -other.gravDir &amp;&amp;*/ funMode &amp;&amp; ascendCheck)
                || attached[other.playerID])
            {
                // If they're not attached, start ROTATING
                if (!attached[other.playerID])
                {
                    if(jumpLock[other.playerID]) jumpLock[other.playerID] = lockPoolRelease(jumpLock[other.playerID]);
                    
                    attached[other.playerID] = true;
                    var lock = lockPoolLock(PL_LOCK_SHOOT,PL_LOCK_SLIDE);
                    lock.targetInstance = other.id;
                    shootLock[other.playerID] = lock;
                    var lock = lockPoolLock(PL_LOCK_JUMP);
                    lock.targetInstance = other.id;
                    jumpLock[other.playerID] = lock;
                    attachX[other.playerID] = other.x - x; // set x rotation origin
                    
                    spinTimer = 0; // reset timer
                    
                    // based on where they land on the platform, set the proper Stuff
                    if (other.y &gt; y + 8)
                    {
                        offset[other.playerID] = 1;
                        animOffset[other.playerID] = 0;
                        playerDir[other.playerID] = -1;
                    }
                    else
                    {
                        offset[other.playerID] = 0;
                        animOffset[other.playerID] = 0;
                        playerDir[other.playerID] = 1;
                    }
                } // Actual rotating code
                else if (attached[other.playerID])
                {
                    // Update position + variables
                    
                    // Rotate UNLESS the platform is over a drop rail
                    if (image_speed != 0)
                    {
                        spinTimer += abs(imgSpd*10);
                        
                        if (spinTimer &gt;= spinMod)
                        {
                            spinTimer -= spinMod;
                            offset[other.playerID] += spinRate*sign(imgSpd) * playerDir[other.playerID];
                            animOffset[other.playerID] += spinRate*sign(imgSpd);
                            if(offset[other.playerID] &lt; 0) offset[other.playerID]++;
                            if(animOffset[other.playerID] &lt; 0) animOffset[other.playerID] += 2;
                        }
                    }
                    
                    // handle playerDirection spinning when going under the platform etc
                    if (offset[other.playerID] &gt;= 1)
                    {
                        offset[other.playerID] = 1;
                        animOffset[other.playerID] = 1;
                        playerDir[other.playerID] = -1*sign(imgSpd);
                    }
                    if (offset[other.playerID] &lt;= 0)
                    {
                        offset[other.playerID] = 0;
                        animOffset[other.playerID] = 0;
                        playerDir[other.playerID] = 1*sign(imgSpd);
                    }
                    
                    // Jumping off the platform
                    if (global.keyJumpPressed[other.playerID])
                    {
                        with(other)
                        {
                            playerJump();
                            canMinJump = true;
                        }
                        if (other.y &gt; bboxGetYCenter())
                        {
                            if(other.gravDir &gt; 0)
                            {
                                other.yspeed = 0;
                                other.jumpCounter = 1;
                            }
                            else other.jumpCounter = 0;
                            other.y = bbox_top + 25;
                        }
                        else
                        {
                            if(other.gravDir &lt; 0)
                            {
                                other.yspeed = 0;
                                other.jumpCounter = 1;
                            }
                            else other.jumpCounter = 0;
                            other.y = bbox_top - 17;
                        }
                        attached[other.playerID] = false;
                        
                        // It was easier to just flip the players sprites temporarily for this
                        // other.image_yscale = other.gravDir;
                        shootLock[other.playerID] = lockPoolRelease(shootLock[other.playerID]);
                        lockReleaseCountdown[other.playerID] = 2;
                    }
                    
                    // no land sound pls
                    if (instance_exists(other))
                        other.playLandSound = 0;
                }
            }
            
            if(lockReleaseCountdown[other.playerID] &gt; 0)
            {
                lockReleaseCountdown[other.playerID]--;
                if(!global.keyJump[other.playerID] || lockReleaseCountdown[other.playerID] == 0)
                {
                    jumpLock[other.playerID] = lockPoolRelease(jumpLock[other.playerID]);
                    lockReleaseCountdown[other.playerID] = -1;
                }
            }
        }
    }
}
else image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
