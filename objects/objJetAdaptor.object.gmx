<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJetAdaptor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

maxAmmo = 28;
contactDamage = 0;
shiftVisible = 3;
image_speed = 0;
bulletLimitCost = 0;

canHit = false;
canDamage = false;

jetInUse = false;

jetTimer = 0;
jetPhase = 0;
jetTimerStallMax = 10;
jetTimerAscendMax = 34;
jetTimerMax = 80;
jetFallDecel = 0.2;

refillUsingAmmoPickups = true;
refillUsingYashichi = true;
infiniteJet = false;

refillingFuel = 0;

jetLock = false;

jetSpd = 2;

jetEnableSlide = 2;
// jetEnableSlide controls user's ability to slide
// 0 - user can't slide
// 1 - user can slide
// 2 - user can slide and airslide

jetSlideLock = 0;

despawnRange = -1;
respawnRange = -1;

animTimer = 0;

saveAirSlideCounterMax = -1;

allowAerialRefill = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(parent))
{
    if(jetLock) jetLock = lockPoolRelease(jetLock);
    if(jetSlideLock) jetSlideLock = lockPoolRelease(jetSlideLock);
    if(saveAirSlideCounterMax != -1) parent.airSlideCounterMax = saveAirSlideCounterMax;
}

if(audio_is_playing(sfxJetAdaptor)) stopSFX(sfxJetAdaptor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if(infiniteJet) parent.jetAdaptorUseTime = 0;

if(global.weapon[playerID] == global.weaponID[? self.object_index])
{
    global.ammo[playerID, global.weapon[playerID]] = clamp((jetTimerMax-parent.jetAdaptorUseTime)*maxAmmo/jetTimerMax,0,maxAmmo);
}

if(jetInUse)
{
    parent.spriteX = 8 + 2*parent.isShoot + ((animTimer mod 4) &gt; 1);
    parent.spriteY = 12;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if(entityCanStep())
{
    if(!refillUsingAmmoPickups) global.ammo[playerID, global.weapon[playerID]] = maxAmmo;
    else global.ammo[playerID, global.weapon[playerID]] = maxAmmo*(jetTimerMax-parent.jetAdaptorUseTime)/jetTimerMax;
    
    if(!jetEnableSlide &amp;&amp; !jetSlideLock &amp;&amp; !parent.isSlide)
    {
        with(parent)
        {
            other.jetSlideLock = lockPoolLock(PL_LOCK_SLIDE);
            other.jetSlideLock.targetInstance = self.id;
        }
    }
    
    // add air slides when using jet adaptor with a specific setting
    if(saveAirSlideCounterMax == -1)
    {
        saveAirSlideCounterMax = parent.airSlideCounterMax;
        if(jetEnableSlide &gt;= 2) parent.airSlideCounterMax += (jetEnableSlide-1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!instance_exists(parent))
{
    instance_destroy();
    exit;
}

if (entityCanStep())
{
    depth = parent.depth - 1;
    
    if(!jetInUse)
    {
        var gravityCheck = 1;
        with(parent) if(playerIsLocked(PL_LOCK_GRAVITY)) gravityCheck = 0;
        if(!parent.ground &amp;&amp; !parent.isSlide &amp;&amp; sign(parent.yspeed) != -parent.gravDir &amp;&amp; global.keyJump[playerID] &amp;&amp; parent.jetAdaptorUseTime &lt; jetTimerMax &amp;&amp; gravityCheck &amp;&amp; parent.jumpCounter &gt;= parent.jumpCounterMax)
        {
            jetInUse = true;
            with(parent)
            {
                other.jetLock = lockPoolLock(PL_LOCK_GRAVITY,PL_LOCK_JUMP,PL_LOCK_GROUND);
                other.jetLock.targetInstance = self.id;
            }
            if(sign(parent.yspeed) == parent.gravDir) jetPhase = 0;
            else jetPhase = 1;
            playSFX(sfxJetAdaptor);
            jetTimer = 0;
            animTimer = 0;
            allowAerialRefill = false;
        }
        else
        {
            if(parent.ground || !gravityCheck)
            {
                allowAerialRefill = true;
            }
        }
    }
    else
    {
        parent.jetAdaptorUseTime++;
        allowAerialRefill = false;
        switch(jetPhase)
        {
            case 0: // user is still falling
                parent.yspeed -= sign(parent.yspeed)*jetFallDecel;
                if(sign(parent.yspeed) != sign(parent.gravDir))
                {
                    parent.yspeed = 0;
                    jetPhase = 1;
                }
                break;
            case 1: // user is stalling in the air preparing to blast off
                parent.yspeed = 0;
                jetTimer++;
                if(jetTimer &gt;= jetTimerStallMax)
                {
                    jetPhase = 2;
                    jetTimer = 0;
                }
                break;
            case 2: // user is soaring
                parent.yspeed = -jetSpd*parent.gravDir;
                jetTimer++;
                if(jetTimer &gt;= jetTimerAscendMax)
                {
                    jetPhase = 3;
                }
                break;
            case 3: // user is stalling in the air waiting for the fuel to run out
                parent.yspeed = 0;
                break;
        }
        
        if(parent.jetAdaptorUseTime &gt;= jetTimerMax || !global.keyJump[playerID] || parent.isSlide)
        {
            jetInUse = false;
            if(jetLock) jetLock = lockPoolRelease(jetLock);
            if(audio_is_playing(sfxJetAdaptor)) stopSFX(sfxJetAdaptor);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var existenceCheck = true;

with(objJetAdaptor)
{
    if(parent == other) existenceCheck = false;
}

if(existenceCheck) // Jet Adaptor should now spawn itself
{
    var jet = fireWeapon(0,0,objJetAdaptor,3,0,0,0);
    jet.jetSlideLock = 0;
    jet.refillingFuel = 0;
}

// normal firing
scrBusterControl(false, true, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("JET ADAPTOR", -2, -2, sprWeaponIconsJetAdaptor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(parent)) exit;

if(jetInUse)
{
    animTimer++;
    parent.spriteX = 8 + 2*parent.isShoot + ((animTimer mod 4) &gt; 1);
    parent.spriteY = 12;
}

x = parent.x;
y = parent.y;

var _x = floor((x * global.screenScale) + .5) / global.screenScale;
var _y = floor((y * global.screenScale) + .5) / global.screenScale;

var baseCol = c_white;
var pid = playerID;

with (parent)
{
    if (inked)
    {
        _inked = true;
        baseCol = c_ltgray;
    }
}

// don't draw yourself if Mega is invisible
var drawMe = true;

with(parent)
{
    if (teleporting || showReady) drawMe = false;
    else if (isHit &amp;&amp; (hitTimer mod 8) &lt;= 3) drawMe = false;
    else if ((iFrames mod 4) &gt;= 2) drawMe = false;
    else if(!visible) drawMe = false;
}

if(drawMe)
    drawCostume(sprite_index, parent.spriteX, parent.spriteY, _x, _y, parent.image_xscale,
    parent.image_yscale, baseCol, global.primaryCol[pid], global.secondaryCol[pid],
    global.outlineCol[pid], image_alpha, image_alpha, image_alpha, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
