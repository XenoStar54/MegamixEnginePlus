<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTerra</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
introType = 0;
customPose = true;
poseImgSpeed = 0;
contactDamage = 4;
hasTriggeredFall = false;
blockCollision = true;

phase = 0;
timer = 0;
animTimer = 0;
xSpeedStore = 0;
lastPhase = 0;
preLastPhase = 0;
detectDistance = 96;
myGrav = grav;
dir = 0;
delay = 120;

spriteNormal = sprTerra;
spriteWarp = sprTerraWarp;
spriteFlash = sprTerraFlash;

// Healthbar color
healthBarPrimaryColor[1] = 47;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5GB.gbs";
musicType = "VGM";
musicTrackNumber = 6;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48HMML
enemyDamageValue(objFlameMixer, 1);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG24HMML
enemyDamageValue(objSuperArmBlockProjectile, 4);
enemyDamageValue(objSuperArmDebris, 3);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);

// Misc.
enemyDamageValue(objPowerStone, 3);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        y -= view_hview*image_yscale;
        calibrateDirection();
        phase = 0;
        timer = 0;
        animTimer = 0;
        hasTriggeredFall = false;
        canFillHealthBar = false;
        image_index = 0;
        visible = true;
        startIntro = false;
        isIntro = true;
        sprite_index = spriteWarp;
        image_speed = 0;
        yspeed = 4*image_yscale;
    }
    else if(isIntro)
    {
        if(!hasTriggeredFall)
        {
            if(abs(y - ystart) &lt; abs(yspeed))
            {
                y = ystart;
                yspeed = 0;
                hasTriggeredFall = true;
                image_index = 1;
                playSFX(sfxTeleportIn);
            }
        }
        else
        {
            timer++;
            if(timer &lt; 4)
            {
                image_index = 1;
            }
            else if(timer &lt; 8)
            {
                image_index = 2;
            }
            else if(timer &lt; 13)
            {
                image_index = 3;
            }
            else if(timer == 13)
            {
                image_index = 0;
                sprite_index = spriteNormal;
            }
            else if(timer &lt; 61)
            {
                image_index = 0;
            }
            else if(timer &lt; 85)
            {
                image_index = 1;
            }
            else if(timer &lt; 119)
            {
                image_index = 2;
            }
            else
            {
                timer = 0;
                animTimer = 0;
                phase = 0;
                lastPhase = -1;
                preLastPhase = -2;
                xSpeedStore = 0;
                canFillHealthBar = true;
                isIntro = false;
                grav = gravStart;
                blockCollision = blockCollisionStart;
                setTargetStep();
            }
        }
    }
    else if(isFight)
    {
        if(phase == 0) // decide your next attack
        {
            if(ground)
            {
                xspeed = 0;
                image_index = 0;
                if(target)
                {
                    calibrateDirection();
                    timer++;
                    if(abs(target.x - x) &lt; detectDistance) // run
                    {
                        phase = 3;
                        image_index = 3;
                        yspeed = -4.5*sign(myGrav);
                        xspeed = -image_xscale;
                        timer = 0;
                    }
                }
                if(timer &gt;= 15)
                {
                    var phaseCandidate = choose(1,2);
                    if(lastPhase == preLastPhase) phaseCandidate = 3 - lastPhase;
                    phase = phaseCandidate;
                    preLastPhase = lastPhase;
                    lastPhase = phaseCandidate;
                    timer = 0;
                    image_index = 1;
                }
            }
            else image_index = 3;
        }
        else if(phase == 1) // spark chaser
        {
            if(ground)
            {
                timer++;
                if(timer &lt; 0)
                {
                    image_index = 0;
                }
                else if(timer &lt; 16)
                {
                    image_index = 1;
                }
                else if(timer == 16)
                {
                    playSFX(sfxSparkChaser);
                    image_index = 1;
                    with(instance_create(x+30*image_xscale,y+3*image_yscale,objTerraSparkChaser))
                    {
                        parent = other;
                    }
                }
                else if(timer &lt; 36)
                {
                    image_index = 1;
                }
                else
                {
                    timer = -delay;
                    phase = 0;
                }
            }
            else image_index = 3;
        }
        else if(phase == 2) // stun sphere
        {
            if(ground)
            {
                timer++;
                if(timer &lt; 0)
                {
                    image_index = 0;
                }
                else if(timer &lt; 16)
                {
                    image_index = 1;
                }
                else if(timer == 16)
                {
                    playSFX(sfxElecnShoot);
                    image_index = 1;
                    var angle = 0;
                    repeat(3)
                    {
                        with(instance_create(x+30*image_xscale,y+3*image_yscale,objTerraStunSphere))
                        {
                            initAngle = angle;
                            image_xscale = other.image_xscale;
                            image_yscale = other.image_yscale;
                        }
                        angle += 120;
                    }
                }
                else if(timer &lt; 36)
                {
                    image_index = 1;
                }
                else if(timer &lt; 36+delay)
                {
                    image_index = 0;
                }
                else
                {
                    timer = 0;
                    phase = 0;
                }
                
                if(target &amp;&amp; target.isFrozen) // if frozen, instantly Spark Chaser them
                {
                    image_index = 1;
                    timer = 0;
                    phase = 1;
                    preLastPhase = lastPhase;
                    lastPhase = 1;
                }
            }
            else image_index = 3;
        }
        else if(phase == 3) // first jump back
        {
            if(ground)
            {
                xspeed = 0;
                image_index = 0;
                if(target &amp;&amp; abs(target.x - x) &lt; detectDistance) // warp away
                {
                    phase = 4;
                    image_index = 3;
                    yspeed = -6*sign(myGrav);
                    timer = 0;
                }
                else
                {
                    phase = 0;
                }
            }
            else
            {
                image_index = 3;
            }
        }
        else if(phase == 4) // begin warp
        {
            if(timer == 0)
            {
                if(sign(yspeed) != -sign(myGrav))
                {
                    timer++;
                    grav = 0;
                    yspeed = 0;
                    animTimer = 0;
                }
            }
            else
            {
                timer++;
                if(timer &lt; 25)
                {
                    animTimer++;
                    if(animTimer mod 5 == 0)
                    {
                        if(image_index &lt; 5) image_index++;
                        else image_index = 3;
                    }
                }
                else if(timer == 25)
                {
                    canHit = false;
                    canDamage = false;
                    sprite_index = spriteFlash;
                    image_index = 0;
                }
                else
                {
                    if((timer-25) mod 3 == 0)
                    {
                        if(image_index &lt; 9) image_index++;
                        else
                        {
                            timer = 0;
                            visible = false;
                            sprite_index = spriteNormal;
                            phase = 5;
                            animTimer = 0;
                        }
                    }
                }
            }
        }
        else if(phase == 5) // end warp
        {
            timer++;
            if(timer &lt; 80)
            {
                if(target)
                {
                    if(target.x &lt; view_xview + view_wview/2) dir = 1;
                    else dir = -1;
                }
                else
                {
                    dir = choose(-1,1);
                }
                // dir 1 - appear on the right edge facing left
                // dir -1 - appear on the left edge facing right
            }
            else if(timer == 80)
            {
                x = view_xview + view_wview/2 + dir*(view_wview/2) - dir*32;
                while(checkSolid(0,0))
                {
                    if(!checkSolid(0,16*image_yscale)) y += 16*image_yscale;
                    else if(!checkSolid(0,32*image_yscale)) y += 32*image_yscale;
                    else x -= 16*dir;
                }
                image_xscale = -dir;
                visible = true;
                sprite_index = spriteFlash;
                image_index = 9;
            }
            else if(timer == 81)
            {
                sprite_index = spriteNormal;
                image_index = 3;
            }
            else if(timer &lt; 104)
            {
                animTimer++;
                if(animTimer mod 5 == 0)
                {
                    if(image_index &lt; 5) image_index++;
                    else image_index = 3;
                }
            }
            else
            {
                grav = myGrav;
                canDamage = true;
                canHit = true;
                image_index = 3;
                timer = -15;
                animTimer = 0;
                var phaseCandidate = choose(1,2);
                if(lastPhase == preLastPhase) phaseCandidate = 3 - lastPhase;
                phase = phaseCandidate;
                preLastPhase = lastPhase;
                lastPhase = phaseCandidate;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

with (objTerraSparkChaser) if(parent == other) instance_destroy();
with (objTerraStunSphere) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
