<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>queuePause();
wheelPhase = -1;

imageOffsetMax = 24;
imageOffsetDuration = 8;

weaponWheelSelectedWeapon = -1;

playerID = -1;
parent = noone;
shadeAlphaMax = 0.5;
shadeAlpha = 0;
prevWeapon = 0;
wheelWeaponsNum = 8;

wheelPage = 0;
wheelNewPage = 0;
switchDir = 0;
switchAngularVelocity = 0.1;
switchTimerMax = 8;
switchTimer = switchTimerMax;

for(var i = 0; i &lt; wheelWeaponsNum; i++) imageOffset[i] = 0;

// 0: quit when pressed; 1: quit when no longer holding
// quitMode = global.weaponWheelActivationMethod;
quitMode = 0;

// when 0, wheel will remember the weapon player opened it with and use this as center pick
// when 1, center pick is always character's initial weapon (for Mega Man, it's Mega Buster)
resetToMainWeapon = 0;

playSFX(sfxPause);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>queueUnpause();
global.weaponWheelLastUsedPage[playerID] = wheelPage;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// this is stupid ok
if(instance_exists(parent))with(parent)if(playerIsLocked(PL_LOCK_PAUSE))with(other)
{
    instance_destroy();
    exit;
}

// remove self if no valid player exists
var existenceCheck = 1;
if(!instance_exists(parent) || parent.dead) existenceCheck = 0;
else with(objMegaman)
{
    if(self.id == other.parent.id) existenceCheck = 0;
}
if(existenceCheck)
{
    instance_destroy();
    exit;
}
// THERE CAN BE ONLY ONE!!!
with(objWeaponWheel)
{
    if(self.id != other.id) instance_destroy();
}

// prepare
if(wheelPhase == -1)
{
    prevWeapon = global.weapon[playerID];
    if(resetToMainWeapon) global.weapon[playerID] = 0;
    wheelPhase = 0;
    wheelPage = global.weaponWheelLastUsedPage[playerID];
}
// manifest self upon Mega
else if(wheelPhase == 0)
{
    for(var i = 0; i &lt; wheelWeaponsNum; i++)
    {
        imageOffset[i] += imageOffsetMax/imageOffsetDuration;
    }
    
    shadeAlpha += shadeAlphaMax/imageOffsetDuration;
    
    var fullCheck = 0;
    for(var i = 0; i &lt; wheelWeaponsNum; i++)
    {
        if(imageOffset[i] &gt;= imageOffsetMax)
        {
            imageOffset[i] = imageOffsetMax;
            fullCheck++;
        }
    }
    if(fullCheck == wheelWeaponsNum)
    {
        wheelPhase = 1;
        shadeAlpha = shadeAlphaMax;
    }
}
// select your weapon
else if(wheelPhase == 1)
{
    var wheelXdir = sign(global.keyRight[playerID] - global.keyLeft[playerID]);
    var wheelYdir = sign(global.keyDown[playerID] - global.keyUp[playerID]);
    var prevSelected = weaponWheelSelectedWeapon;
    if(wheelXdir == 0 &amp;&amp; wheelYdir == 0)
    {
        weaponWheelSelectedWeapon = -1;
    }
    else
    {
        weaponWheelSelectedWeapon = wheelPage*wheelWeaponsNum + (2 - 2*wheelXdir) * (wheelYdir == 0) - (2 * wheelYdir - wheelYdir*wheelXdir) * (wheelYdir != 0);
        if(weaponWheelSelectedWeapon &lt; wheelPage*wheelWeaponsNum) weaponWheelSelectedWeapon += wheelWeaponsNum;
    }
    
    if(weaponWheelSelectedWeapon != prevSelected)
    {
        if(weaponWheelSelectedWeapon != -1)
        {
            playSFX(sfxMenuMove);
        }
    }
    
    if(weaponWheelSelectedWeapon &lt; -1 || weaponWheelSelectedWeapon + 1 &gt;= array_height_2d(global.weaponWheelSavedWeapon)) weaponWheelSelectedWeapon = -1;
    
    if(weaponWheelSelectedWeapon == -1)
    {
        if(resetToMainWeapon) global.weapon[playerID] = 0;
        else global.weapon[playerID] = prevWeapon;
    }
    else
    {
        var w = global.weaponWheelSavedWeapon[weaponWheelSelectedWeapon + 1,playerID];
        if(global.weaponLocked[w])
        {
            if(resetToMainWeapon) w = 0;
            else w = prevWeapon;
        }
        global.weapon[playerID] = w;
    }
    
    switchDir = sign(global.keyWeaponSwitchRightPressed[playerID] - global.keyWeaponSwitchLeftPressed[playerID]);
    
    if(wheelPage != 0 &amp;&amp; global.keyWeaponSwitchRight[playerID] &amp;&amp; global.keyWeaponSwitchLeft[playerID])
    {
        wheelNewPage = 0;
        switchDir = 0;
        wheelPhase = 3;
        switchTimer = switchTimerMax;
        playSFX(sfxWeaponSwitch);
    }
    else if(switchDir != 0)
    {
        var pageNum = floor((array_height_2d(global.weaponWheelSavedWeapon)-1)/wheelWeaponsNum);
        if(pageNum &lt; 2) playSFX(sfxError);
        else
        {
            wheelNewPage = (wheelPage+switchDir+pageNum) mod pageNum;
            wheelPhase = 3;
            switchTimer = switchTimerMax;
            playSFX(sfxWeaponSwitch);
        }
    }
    else if((!quitMode &amp;&amp; global.keyWeaponWheelPressed[playerID]) || (quitMode &amp;&amp; !global.keyWeaponWheel[playerID]))
    {
        wheelPhase = 2;
        if(weaponWheelSelectedWeapon == -1) playSFX(sfxTextBox);
        else playSFX(sfxMenuSelect);
        if(global.weapon[playerID] != prevWeapon)
        {
            with(prtPlayerProjectile) instance_destroy();
            chargeTimer = 0;
        }
    }
}
// delete wheel
else if(wheelPhase == 2)
{
    for(var i = 0; i &lt; wheelWeaponsNum; i++)
    {
        imageOffset[i] -= imageOffsetMax/imageOffsetDuration;
    }
    shadeAlpha -= shadeAlphaMax/imageOffsetDuration;
    
    var fullCheck = 0;
    for(var i = 0; i &lt; wheelWeaponsNum; i++)
    {
        if(imageOffset[i] &lt;= 0)
        {
            imageOffset[i] = 0;
            fullCheck++;
        }
    }
    if(fullCheck == wheelWeaponsNum)
    {
        shadeAlpha = 0;
        instance_destroy();
    }
}
// spin to change wheel page
else if(wheelPhase == 3)
{
    if(switchTimer &lt;= 0)
    {
        wheelPhase = 4;
        wheelPage = wheelNewPage;
        switchTimer = 0;
        switchDir *= -1;
    }
    else switchTimer--;
}
// finish spin
else if(wheelPhase == 4)
{
    if(switchTimer &gt;= switchTimerMax)
    {
        wheelPhase = 1;
        switchTimer = 0;
        switchDir = 0;
        switchTimer = switchTimerMax;
    }
    else switchTimer++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shadeAlpha != 0)
{
    draw_sprite_ext(sprDot,0,view_xview,view_yview,view_wview,view_hview,0,c_black,shadeAlpha);
}

x = bboxGetXCenterObject(parent);
y = bboxGetYCenterObject(parent);

var col;
col[0, 0] = global.nesPalette[0];
col[1, 0] = global.nesPalette[13];
col[0, 1] = global.primaryCol[0];
col[1, 1] = global.secondaryCol[0];
col[0, 2] = make_color_rgb(255, 228, 164);
col[1, 2] = c_white;

// diagonal weapon icons
for(var i = 1; i &lt; wheelWeaponsNum; i += 2)
{
    w = global.weaponWheelSavedWeapon[wheelPage*wheelWeaponsNum + i + 1,playerID];
    if(global.weaponLocked[w]) w = 0;
    cl = (weaponWheelSelectedWeapon == wheelPage*wheelWeaponsNum + i) &amp;&amp; (wheelPhase == 1);
    var radius = imageOffset[i]*(switchTimer/switchTimerMax) + 2*cl;
    var spinAngle = switchTimer*switchDir*switchAngularVelocity - switchTimerMax*switchDir*switchAngularVelocity;
    var xOff = -8 + cos(2*pi*i/wheelWeaponsNum + spinAngle)*radius;
    var yOff = -8 - sin(2*pi*i/wheelWeaponsNum + spinAngle)*radius;
    draw_sprite_ext(global.weaponIcon[w], 0, x+xOff, y+yOff, 1, 1, 0, col[!cl, 2], 1);
    draw_sprite_ext(global.weaponIcon[w], 1, x+xOff, y+yOff, 1, 1, 0, col[0, cl], 1);
    draw_sprite_ext(global.weaponIcon[w], 2, x+xOff, y+yOff, 1, 1, 0, col[1, cl], 1);
    draw_sprite_ext(global.weaponIcon[w], 3, x+xOff, y+yOff, 1, 1, 0, col[1, 2], cl);
}

// cardinal weapon icons
for(var i = 0; i &lt; wheelWeaponsNum; i += 2)
{
    w = global.weaponWheelSavedWeapon[wheelPage*wheelWeaponsNum + i + 1,playerID];
    if(global.weaponLocked[w]) w = 0;
    cl = (weaponWheelSelectedWeapon == wheelPage*wheelWeaponsNum + i) &amp;&amp; (wheelPhase == 1);
    var radius = imageOffset[i]*(switchTimer/switchTimerMax) + 2*cl;
    var spinAngle = switchTimer*switchDir*switchAngularVelocity - switchTimerMax*switchDir*switchAngularVelocity;
    var xOff = -8 + cos(2*pi*i/wheelWeaponsNum + spinAngle)*radius;
    var yOff = -8 - sin(2*pi*i/wheelWeaponsNum + spinAngle)*radius;
    draw_sprite_ext(global.weaponIcon[w], 0, x+xOff, y+yOff, 1, 1, 0, col[!cl, 2], 1);
    draw_sprite_ext(global.weaponIcon[w], 1, x+xOff, y+yOff, 1, 1, 0, col[0, cl], 1);
    draw_sprite_ext(global.weaponIcon[w], 2, x+xOff, y+yOff, 1, 1, 0, col[1, cl], 1);
    draw_sprite_ext(global.weaponIcon[w], 3, x+xOff, y+yOff, 1, 1, 0, col[1, 2], cl);
}

// draw Mega Buster icon in the middle
var w = 0;
if(!resetToMainWeapon) w = prevWeapon;
var cl = (weaponWheelSelectedWeapon == -1);
var xOff = -8, yOff = -8;
draw_sprite_ext(global.weaponIcon[w], 0, x+xOff, y+yOff, 1, 1, 0, col[!cl, 2], 1);
draw_sprite_ext(global.weaponIcon[w], 1, x+xOff, y+yOff, 1, 1, 0, col[0, cl], 1);
draw_sprite_ext(global.weaponIcon[w], 2, x+xOff, y+yOff, 1, 1, 0, col[1, cl], 1);
draw_sprite_ext(global.weaponIcon[w], 3, x+xOff, y+yOff, 1, 1, 0, col[1, 2], cl);

var pageNum = floor((array_height_2d(global.weaponWheelSavedWeapon)-1)/wheelWeaponsNum);
if(pageNum &gt;= 2 &amp;&amp; wheelPhase &gt; -1)
{
    var drawDir = parent.image_yscale;
    if(parent.y &lt; view_yview+40) drawDir = -1;
    else if(parent.y &gt; view_yview+view_hview-40) drawDir = 1;
    draw_set_color(c_white);
    draw_set_valign(fa_center);
    draw_set_halign(fa_center);
    draw_text(x,y-drawDir*39,string(wheelPage+1)+'/'+string(pageNum));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
