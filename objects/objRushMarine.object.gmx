<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRushMarine</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 0;

canHit = false;
doesTransition = true;
blockCollision = 1;
bubbleTimer = 0;
grav = 0;
bubbleTimer = -1;
respawnRange = -1;
despawnRange = -1;

decreaseAmmoTimer = 0;
decreaseAmmoTimerMax = 60;

surfOffset = 3;
maxSpd = 1.2;
spd = maxSpd;
xVel = 0;
yVel = 0;
canJet = true;
isBoosting = false;
shootTimer = 0;

timer = 4 * 60;
alarm[0] = 4 * 60;

playerLock = false;
moveLock = false;
turnLock = false;
jumpLock = false;

imgIndex = 0;
animTimer = 0;

// vehicle vars
weaponsAllowed = true;
shootYOffset = 15;
riderPhysicsAllowed = false;
physicsLock = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (instance_exists(parent))
{
    if (playerLock)
    {
        playerLock = lockPoolRelease(playerLock);
    }
    
    if (moveLock)
    {
        moveLock = lockPoolRelease(moveLock);
        canMinJump = true;
    }
    
    if (jumpLock)
    {
        jumpLock = lockPoolRelease(jumpLock);
    }
    
    if (turnLock)
    {
        turnLock = lockPoolRelease(turnLock);
    }
    
    parent.mask_index = mskMegaman;
    parent.vehicle = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Teleport away
i = instance_create(x, y, objRushTeleport);
i.upordown = 'up';
i.parent = parent;
i.type = 'boost';
canCoil = false;
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Update sprites of rider if they're on it
if (isBoosting)
{
    with (parent)
    {
        vehicle = other.id;
        playerHandleSprites("Marine");
        other.x = x;
        other.y = y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    // force rush marine mask
    if (instance_exists(parent) &amp;&amp; (isBoosting || !canJet))
    {
        parent.mask_index = mskMegamanMarine;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (!global.frozen)
{
    if (sprite_index != sprRush &amp;&amp; sprite_index != sprRushMarine)
    {
        yspeed = 0;
    }
    
    if (!isBoosting)
    {
        if (checkSolid(0, 0, false, true))
        {
            // teleported inside a wall somehow; teleport out
            event_perform(ev_alarm,0);
            instance_destroy();
            exit;
        }
        
        if (instance_exists(parent))
        {
            if (!instance_exists(parent.vehicle))
            {
                var meg = noone;
                if (image_yscale == 1)
                {
                    meg = collision_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom,
                            parent, false, false);
                }
                else
                {
                    meg = collision_rectangle(bbox_left, bbox_bottom, bbox_right, bbox_bottom,
                            parent, false, false);
                }
                
                if (instance_exists(meg) &amp;&amp; global.ammo[playerID, global.weapon[playerID]] != 0
                    &amp;&amp; parent.yspeed != 0 &amp;&amp; sign(parent.yspeed) == sign(parent.image_yscale)) // falling into marine
                {
                    event_user(1);
                }
            }
        }
    }
    else if (alarm[1] &lt; 0)
    {
        if (moveLock)
        {
            xVel = spd * sign(global.keyRight[playerID] - global.keyLeft[playerID]);
            yVel = spd * sign(global.keyDown[playerID] - global.keyUp[playerID]);
        }
        
        with (parent)
        {
            var hs = other.xVel;
            var vs = other.yVel;
            
            if (((image_yscale &gt; 0 &amp;&amp; !collision_rectangle(bbox_left, bbox_top, bbox_right, y + other.surfOffset, objWater, false, false))
                || (image_yscale &lt; 0 &amp;&amp; !collision_rectangle(bbox_left, y - other.surfOffset, bbox_right, bbox_bottom, objWater, false, false)))
                || !inWater)
            {
                // out of water / surface of water
                
                // can now jump
                if (other.jumpLock)
                {
                    other.jumpLock = lockPoolRelease(other.jumpLock);
                    other.jumpCounter = jumpCounterMax - 1;
                }
                
                canMinJump = false; // marine can only do full jumps
                
                // activate gravity and movement upon jumping out or falling out of the water
                if (!inWater || jumpCounter == jumpCounterMax)
                {
                    vs = 0;
                    hs = 0;
                    jumpCounter = jumpCounterMax; // no air jumping from falling out of water
                    
                    if (other.moveLock)
                    {
                        other.moveLock = lockPoolRelease(other.moveLock);
                    }
                    
                    if (other.turnLock)
                    {
                        other.turnLock = lockPoolRelease(other.turnLock);
                    }
                }
                
                // re-lock grav and movement when on dry land
                if (ground)
                {
                    if (!other.moveLock)
                    {
                        other.moveLock = lockPoolLock(PL_LOCK_MOVE, PL_LOCK_GRAVITY,
                            PL_LOCK_AERIAL);
                        
                        hs = 0;
                        vs = 0;
                    }
                    
                    if (!other.turnLock)
                    {
                        other.turnLock = lockPoolLock(PL_LOCK_TURN);
                    }
                }
                
                // reload only a single jump when on rush marine
                if (jumpCounter &lt; jumpCounterMax - 1)
                {
                    jumpCounter = jumpCounterMax - 1;
                }
                
                // stay at water surface
                if (other.moveLock &amp;&amp; inWater)
                {
                    if ((image_yscale &gt; 0 &amp;&amp; !collision_rectangle(bbox_left, bbox_top + vs, bbox_right, y + other.surfOffset + vs, objWater, false, false))
                        || (image_yscale &lt; 0 &amp;&amp; !collision_rectangle(bbox_left, y - other.surfOffset + vs, bbox_right, bbox_bottom + vs, objWater, false, false)))
                    {
                        vs = 0;
                        
                        // snap to water surface (if marine starts glitching out, check this first, lol)
                        if (!collision_line(bbox_left, y + other.surfOffset * image_yscale + image_yscale, bbox_right,
                            y + other.surfOffset * image_yscale + image_yscale, objWater, false, false))
                        {
                            var preY = y;
                            for (var i = 0; i &lt; (bbox_bottom - bbox_top) / 2; i++)
                            {
                                if (collision_line(bbox_left, y + other.surfOffset * image_yscale + image_yscale, bbox_right,
                                    y + other.surfOffset * image_yscale + image_yscale, objWater, false, false))
                                {
                                    preY = y;
                                    break;
                                }
                                else
                                {
                                    shiftObject(0, image_yscale, true);
                                }
                            }
                            
                            y = preY;
                        }
                    }
                }
            }
            else
            {
                if (!other.jumpLock)
                {
                    other.jumpLock = lockPoolLock(PL_LOCK_JUMP);
                }
                
                if (!other.moveLock)
                {
                    other.moveLock = lockPoolLock(PL_LOCK_MOVE,
                        PL_LOCK_GRAVITY, PL_LOCK_AERIAL);
                    
                    // snap to water surface if landing into it (if marine starts glitching out, check this first, lol)
                    if (collision_line(bbox_left, y + other.surfOffset * image_yscale, bbox_right,
                        y + other.surfOffset * image_yscale, objWater, false, false))
                    {
                        var preY = y;
                        for (var i = 0; i &lt; (bbox_bottom - bbox_top) / 2; i++)
                        {
                            if (!collision_line(bbox_left, y + other.surfOffset * image_yscale, bbox_right,
                                y + other.surfOffset * image_yscale, objWater, false, false))
                            {
                                preY = y;
                                break;
                            }
                            else
                            {
                                shiftObject(0, -image_yscale, true);
                            }
                        }
                        
                        y = preY;
                    }
                }
                
                if (other.turnLock)
                {
                    other.turnLock = lockPoolRelease(other.turnLock);
                }
                
                jumpCounter = jumpCounterMax - 1;
            }
            
            if (ground)
            {
                if (sign(vs) == sign(image_yscale))
                {
                    vs = 0;
                }
            }
            
            if (other.moveLock) // player has control when jumping
            {
                xspeed = hs
                yspeed = vs;
            }
        }
        
        decreaseAmmoTimer++;
        if (decreaseAmmoTimer &gt;= decreaseAmmoTimerMax &amp;&amp; instance_exists(parent)
            &amp;&amp; global.playerHealth[parent.playerID] &gt; 0)
        {
            decreaseAmmoTimer = 0;
            global.ammo[playerID, global.weapon[playerID]] = max(0,
                global.ammo[playerID, global.weapon[playerID]] - 1);
            if (global.ammo[playerID, global.weapon[playerID]] &lt;= 0)
            {
                if (parent)
                {
                    x = parent.x;
                    y = parent.y;
                    event_perform(ev_alarm,0);
                    instance_destroy();
                }
                
                isBoosting = false;
            }
        }
        
    }
    else
    {
        with (parent)
        {
            xspeed = 0;
            yspeed = 0;
        }
    }
    
    // propeller animation
    imgIndex = (imgIndex+.333) % 32;
    if (alarm[1] &lt; 0)
    {
        animTimer = (animTimer+.25)%2;
    }
    else
    {
        animTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (dead &amp;&amp; !isBoosting)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _canSpawn = !instance_exists(myRushMarine);
with (objRushMarine)
{
    if (playerID == other.playerID)
    {
        _canSpawn = false;
    }
}

with (objRushTeleport)
{
    if (playerID == other.playerID)
    {
        _canSpawn = false;
    }
}

_canSpawn = _canSpawn &amp;&amp; global.ammo[playerID, global.weapon[playerID]] &gt; 0;

if (_canSpawn)
{
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT))
    {
        i = fireWeapon(26, 0, objRushTeleport, 1, 0, 0, 0);
        if (instance_exists(i))
        {
            with (i)
            {
                type = 'marine';
                y = view_yview;
                if (image_yscale &lt; 0)
                {
                    y += view_hview;
                }
            }
        }
    }
}

// firing
scrBusterControl(false, !instance_exists(myRushMarine), !_canSpawn);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("RUSH MARINE", -2, -2, sprWeaponIconsRushMarine);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0;
meg = parent;
blockCollision = false;
shiftVisible = 2;

///Setting up treble boost (need outside for calling from teleport)
meg.jumpCounter = meg.jumpCounterMax - 1;
meg.canMinJump = false;
meg.myRushMarine = id;
visible = false;
canJet = false;
timer = -1;
isBoosting = true;
meg.isSlide = false;
meg.dashJumped = false;
meg.ground = false;
meg.xspeed = 0;
meg.yspeed = 0;

with (meg)
{
    other.playerLock = lockPoolLock(PL_LOCK_SLIDE, PL_LOCK_CLIMB);
    other.moveLock = lockPoolLock(PL_LOCK_MOVE, PL_LOCK_GRAVITY, PL_LOCK_AERIAL);
    other.jumpLock = lockPoolLock(PL_LOCK_JUMP);
    
    if (!inWater &amp;&amp; ground)
    {
        other.turnLock = lockPoolLock(PL_LOCK_TURN);
    }
    
    mask_index = mskMegamanMarine;
    image_xscale = other.image_xscale;
    shiftObject(other.x - x, other.y - y, true);
}

alarm[0] = -1;
alarm[1] = 12;
xspeed = 0;
yspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawPlayer(playerID, costumeID, 0, 13, x, y, image_xscale, image_yscale);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
