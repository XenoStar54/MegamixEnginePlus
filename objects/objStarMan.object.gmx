<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprStarStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprChillMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

starTimer = 300;
deathTimer = 0;

customPose = true;
hasTriggeredFall = false;
introType = 1;
contactDamage = 4;
ground = false;
attackTimer = 0;

firstJump = 0
shoot = 0
jumpcount = 0
shootcount = 0

randomiser = -1;

imageTimer = 0;
imageTimerMax = 99;
imageNoMin = 0;
attackTimerMax = 999;

phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;
manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[33];
healthBarSecondaryColor[1] = global.nesPalette[40];

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 4);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 0);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 2);
enemyDamageValue(objSearchSnake, 4);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 4);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objWaterWave, 4);
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 0);

// MM7
enemyDamageValue(objSlashClaw, 4);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 0);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 4);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 4);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 1);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 4);

// MM&amp;B
enemyDamageValue(objTenguBlade, 4);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 2);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1.5, 1.5);
}
if (entityCanStep())
{
    // this timer prevents Star Crash from coming back too quickly
    starTimer++;    

    // Star Man's custom intro
    if (startIntro)
    {
        y -= view_hview;
        canFillHealthBar = false;
        startIntro = false;
        isIntro = true;
        visible = true;
        grav = gravAccel;
        calibrateDirection();
    }
    else if (isIntro)
    {
        // custom intro:
        if (attackTimer == 0) &amp;&amp; (introType == 1)
        {
            sprite_index = sprStarJump
            image_index = 0;
        }
        if (y &gt;= ystart || hasTriggeredFall)
        {
            // since bosses do not have gravity during intros, we need to reuse this here.
            hasTriggeredFall = true;
            y = ystart;
            attackTimer++;
            if (attackTimer &lt; 8)
            {
                sprite_index = sprStarManIntro
                image_index = 0;
            }
            if (attackTimer == 15)
            {
                image_index = 1;
            }
            if (attackTimer == 20)
            {
                image_index = 2;
            }
            if (attackTimer == 35)
            {
                image_index = 3;
            }
            if (attackTimer == 65)
            {
                image_index = 4;
            }
            if (attackTimer == 70)
            {
                image_index = 5;
            }
            if (attackTimer == 75)
            {
                image_index = 6;
            }
            if (attackTimer == 80)
            {
                image_index = 7;
            }
            if (attackTimer == 85)
            {
                image_index = 8;
            }
            if (attackTimer == 90)
            {
                image_index = 9;
            }
            if (attackTimer == 95)
            {
                image_index = 10;
            }
            if (attackTimer == 130)
            {
                image_speed = 0;
                isIntro = false;
                attackTimer = 0;
                blockCollision = blockCollisionStart;
                canFillHealthBar = true;
            }
        } 
    }
    if (isFight)
    {
        // this sets up chill man's movement variables.
        image_speed = 0;
        if (pauseGravity)
        {
            grav = 0;
            yspeed = 0;
        }
        else
        {
            grav = 0.25;
        }
        
        // this gives MM low gravity
        if instance_exists(objMegaman)
        {
            with(objMegaman)
            {
                if !instance_exists(objGravityChangeLow)
                {
                    a = instance_create(x, y, objGravityChangeLow);
                    a.visible = false;
                }
            }
        }
        
        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        if (randomiser == oldPhase)
        {
            randomiser = choose(1,1.5,3, 4);
        }
        
        switch (phase)
        {
            case 0: // idle 
                sprite_index = sprStarStand
                if(!firstJump)
                idleTimer = 5
                else
                idleTimer = 10
                
                if (attackTimer &gt;= idleTimer)
                {
                    phase = 1                    
                    attackTimer = 0;
                }
                break;
                
           case 1: // Make Star Crash
           sprite_index = sprStarGround      
           
            if (attackTimer == 1)
            { 
            calibrateDirection();
            }
            if (attackTimer == 5)
            { 
                        
                if (!instance_exists(objStarCrashBoss) &amp;&amp; starTimer &gt;= 300)
                {
                    guard = 1;  
                    WS = instance_create(x, y, objStarCrashBoss);
                    WS.image_xscale = image_xscale;     
                }   
            }
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 6)
            {
                    if(!firstJump)
                    phase = 3
                    else
                    {
                        if(!jumpcount)
                        phase = choose(2,3,4)
                        else
                        {
                        phase = 3
                        }
                    }
                    attackTimer = 0
            }
            break;
            
            case 2://Ground Shoot
                sprite_index = sprStarJump
                if (attackTimer == 1)
                {
                    calibrateDirection();
                    yspeed = -7
                    xspeed = (image_xscale * 1)
                }
                if (ground &amp;&amp; yspeed &gt;= 0)
                {
                    attackTimer = 0                            
                    phase = 2.5
                    xspeed = 0
                    yspeed = 0
                    sprite_index = sprStarGround
                }
                break;
                
            case 2.5:
            
                calibrateDirection();
                if (attackTimer == 10 &amp;&amp; !shoot)
                {
                    sprite_index = sprStarAirShoot
                    calibrateDirection();                    
                    yspeed = -2              
                }
                if (attackTimer &gt; 11 &amp;&amp; yspeed &gt;= 0 &amp;&amp; !shoot)
                {                                        
                    shoot = 1
                    attackTimer = 0
                    pauseGravity = true   
                }
                if(shoot)
                {
                    if (attackTimer == 5)
                    {
                        image_index = 1
                        guard = 0;
                        with (objStarCrashBoss)
                        {
                            go = true;
                        }             
                    }
                    if (attackTimer == 10)
                    image_index = 2;
                    if (attackTimer == 15)
                    image_index = 3;
                    if (attackTimer == 20)
                    image_index = 4;
                    if (attackTimer == 25)
                    image_index = 5;
                    if (attackTimer == 30)
                    image_index = 6;
                    if (attackTimer == 35)
                    image_index = 7;
                    if (((!instance_exists(objStarCrashBoss) &amp;&amp; attackTimer &gt; 35)) || attackTimer &gt; 180)
                    {
                        pauseGravity = false                         
                        sprite_index = sprStarJump
                        if(ground)
                        {
                            attackTimer = 0                            
                            phase = 0
                            shoot = 0
                            shootcount++
                            randomize();
                            if(shootcount == 2)
                            {
                                jumpcount = choose(2,3,4)   
                                shootcount = 0 
                            }
                            else
                            jumpcount = choose(0,2,3,4) 
                        }                   
                    }
                }
                break
                
            
            case 3://Jump
                sprite_index = sprStarJump
                if (attackTimer == 1)
                {
                    calibrateDirection();
                    randomize();
                    if(!firstJump)
                    {
                        yspeed = -5.3;
                        firstJump = 1;
                    }
                    else
                    yspeed = choose(-5.3, -5.3, -5.3, -5.3, -7);
                    if instance_exists(objMegaman)
                    {
                        if(yspeed == -5.3)
                        xspeed = arcCalcXspeed(yspeed, grav, x, y, target.x, y)
                     
                        if(yspeed == -7)
                        xspeed = (image_xscale * 1)
                    }                     
                    else
                    xspeed = (image_xscale * 2)
                }
                if (ground &amp;&amp; yspeed &gt;= 0)
                {
                    if(jumpcount)
                    jumpcount -=1
                    
                    attackTimer = 0                            
                    phase = 0
                    xspeed = 0
                    yspeed = 0
                }
                break
                
                case 4: //Air Shoot
                sprite_index = sprStarJump
                if (attackTimer == 1)
                {
                    calibrateDirection();
                    
                    yspeed = -7
                    xspeed = (image_xscale * 1)
                    
                    if(image_xscale == 1)
                    img = 1
                    else
                    img = 0
                    
                }
                if (yspeed &gt;= 0)
                {
                    attackTimer = 0                            
                    phase = 4.5
                    xspeed = 0
                    yspeed = 0  
                    pauseGravity = true                  
                }
                break
                
                case 4.5:
                calibrateDirection();
                sprite_index = sprStarAirShoot
                    if (attackTimer == 1)
                    {
                    calibrateDirection();
                    image_index = 1
                    guard = 0;
                        with (objStarCrashBoss)
                        {
                            go = true
                        }             
                    }
                    if (attackTimer == 10)
                    image_index = 2
                    if (attackTimer == 15)
                    image_index = 3
                    if (attackTimer == 20)
                    image_index = 4
                    if (attackTimer == 25)
                    image_index = 5
                    if (attackTimer == 30)
                    image_index = 6
                    if (attackTimer == 35)
                    image_index = 7
                    if (((!instance_exists(objStarCrashBoss) &amp;&amp; attackTimer &gt; 35)) || attackTimer &gt; 180)
                    {                        
                        sprite_index = sprStarJump
                        attackTimer = 0;                            
                        phase = 5;                   
                    }                   
                    
                break
                
            case 5: 
                sprite_index = sprStarJump
                    if (attackTimer == 1)
                    {
                        pauseGravity = false
                        if(!img)
                        {
                            xspeed = -1
                        }
                        else
                        {
                            xspeed = 1
                        }
                    }
                    if (ground)
                    {                                             
                        attackTimer = 0                            
                        phase = 0 
                        shootcount++
                        xspeed = 0  
                        randomize();
                        if(shootcount == 2)
                        {
                            jumpcount = choose(2,3,4)   
                            shootcount = 0 
                        }
                        else
                        jumpcount = choose(0,2,3,4)             
                    }                   
                break;
        }     
    }
}
else
{ 

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// set weapons that can pierce Star Crash
canDestroyMe[0] = objLaserTrident;
canDestroyMe[1] = objSearchSnake;
canDestroyMe[2] = objWaterShield;
canDestroyMe[3] = objRainFlush;
canDestroyMe[4] = objSlashClaw;
canDestroyMe[5] = objSaltWater;
canDestroyMe[6] = objTenguDisk;
canDestroyMe[7] = objTenguDash;
canDestroyMe[8] = objTenguBlade;
canDestroyMe[9] = objBlackHoleBomb;
canDestroyMe[10] = objWaterWave;

// guard if guarding (!!)
if (guard &amp;&amp; instance_exists(objStarCrashBoss))
{
    for(var i = 0; i &lt; array_length_1d(canDestroyMe); i++)
    {
        if(other.object_index == canDestroyMe[i] || object_get_parent(other) == canDestroyMe[i])
        {
            with(objStarCrashBoss)
            {
                instance_destroy();
            }
            starTimer = 0;
            deleteCheck = 1;
            i = array_length_1d(canDestroyMe);
        }
    }
    other.guardCancel = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

deathTimer++;

// restore normal gravity
if instance_exists(objMegaman)
{
    with(objMegaman)
    {
        a = instance_create(x, y, objGravityChangeNormal);
        a.visible = false;
    }
}

with (objStarCrashBoss)
{
    instance_destroy();
}

with (objGravityChangeLow)
{
    instance_destroy();
}

if(deathTimer &gt; 2)
{
    with (objGravityChangeNormal)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
