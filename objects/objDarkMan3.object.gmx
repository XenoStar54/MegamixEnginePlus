<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDarkMan3</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// I gave him a new AI because I was legitimately going insane trying to decipher his og AI
// walks at Mega, jumps over walls
// when within 64 pixels shoots stun rings, at set intervals, maximum of 2 at a time
// when Mega is stunned or when there are Mega's projectiles on screen he'll jump and shoot

event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
hasTriggeredFall = false;

customPose = 1;
introType = 0;
contactDamage = 4;
myGrav = grav;

timer = 0;
phase = 0;
spd = 1.5;
xSpeedStore = xspeed;
shotTracker = 2;
machgunTracker = 4;
midairTimer = -1;

// Health Bar
healthBarPrimaryColor[1] = 33;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

enemyDamageValue(objGyroAttack, 4);

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 2);
enemyDamageValue(objWaterShield, 2);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 4);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 4);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 0);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 0);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48MML
enemyDamageValue(objFlameMixer, 0);
enemyDamageValue(objRainFlush, 2);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 2);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG48MML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 2);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        y = view_yview + (view_hview*(image_yscale &lt; 0)) - 64*image_yscale;
        calibrateDirection();
        phase = 0;
        timer = 0;
        hasTriggeredFall = false;
        canFillHealthBar = false;
        image_index = 0;
        visible = true;
        startIntro = false;
        isIntro = true;
        grav = myGrav;
    }
    else if(isIntro)
    {
        if(y != ystart &amp;&amp; !hasTriggeredFall)
        {
            if(abs(y - ystart) &lt; abs(yspeed))
            {
                y = ystart;
                grav = 0;
                yspeed = 0;
                hasTriggeredFall = true;
            }
            image_index = 0;
        }
        else
        {
            if(!hasTriggeredFall) hasTriggeredFall = true;
            timer = 0;
            phase = 0;
            shotTracker = 2;
            machgunTracker = 4;
            midairTimer = -1;
            canFillHealthBar = true;
            isIntro = false;
            grav = myGrav;
            blockCollision = blockCollisionStart;
            setTargetStep();
        }
    }
    else if(isFight)
    {
        if(phase == 0) // chase after Mega
        {
            if(ground)
            {
                if(target)
                {
                    // animate
                    if(timer mod 5 == 0)
                    {
                        if(image_index &gt;= 1 &amp;&amp; image_index &lt; 4)
                        {
                            image_index++;
                        }
                        else
                        {
                            image_index = 1;
                        }
                    }
                    timer++;
                    // move
                    calibrateDirection();
                    xspeed = spd*image_xscale;
                    xSpeedStore = xspeed;
                    // detect Mega, stun him
                    if(abs(target.x - x) &lt; 64 &amp;&amp; shotTracker)
                    {
                        timer = 0;
                        phase = 1;
                        xspeed = 0;
                        xSpeedStore = xspeed;
                        image_index = 8;
                    }
                    // detect shots, jump and retaliate
                    else if(instance_exists(prtPlayerProjectile) || !shotTracker)
                    {
                        timer = 0;
                        phase = 2;
                        xspeed = 0;
                        xSpeedStore = xspeed;
                        image_index = 5;
                    }
                }
                else
                {
                    xspeed = 0;
                    xSpeedStore = xspeed;
                    image_index = 0;
                }
                
                // jump over things
                if(checkSolid(xspeed,0))
                {
                    if(!checkSolid(xspeed,-48*image_yscale))
                    {
                        yspeed = -5.25*image_yscale;
                        image_index = 6;
                    }
                    else
                    {
                        timer = 0;
                        phase = 2;
                        xspeed = 0;
                        xSpeedStore = xspeed;
                        image_index = 8;
                    }
                }
            }
            else
            {
                image_index = 6;
                timer = 0;
                xspeed = xSpeedStore;
            }
        }
        else if(phase == 1) // fire stun rings
        {
            if(target) calibrateDirection();
            timer++;
            if(timer &lt; 20)
            {
                image_index = 8;
            }
            else if(timer &lt; 25)
            {
                image_index = 10;
            }
            else if(timer &lt; 30)
            {
                image_index = 9;
            }
            else if(timer &lt; 35)
            {
                image_index = 10;
            }
            else if(timer &lt; 40)
            {
                image_index = 9;
            }
            else if(timer &lt; 45)
            {
                image_index = 10;
            }
            else if(timer == 45)
            {
                image_index = 9;
                var angle = 90-90*image_xscale;
                if(target) angle = point_direction(x,y,target.x,target.y);
                for(var i = 0; i &lt; 3; i++)
                {
                    var ring = instance_create(x,y,objDarkMan3StunRing);
                    ring.dir = angle+15*(i-1);
                }
            }
            else if(timer &lt; 50)
            {
                image_index = 9;
            }
            else if(timer &lt; 80)
            {
                image_index = 0;
            }
            else
            {
                shotTracker--;
                if(target &amp;&amp; target.isFrozen) shotTracker = 0;
                phase = 0;
                timer = 0;
            }
        }
        else if(phase == 2) // shoot bullets
        {
            if(ground)
            {
                if(target) calibrateDirection();
                timer++;
                if(timer &lt; 8)
                {
                    image_index = 5;
                    machgunTracker = 4;
                }
                else if(timer == 8)
                {
                    yspeed = -7*image_yscale;
                    xspeed = image_xscale;
                    xSpeedStore = xspeed;
                    image_index = 6;
                }
                else
                {
                    image_index = 5;
                    phase = 0;
                    timer = 0;
                    xspeed = 0;
                    xSpeedStore = xspeed;
                    shotTracker = 2;
                    machgunTracker = 4;
                    midairTimer = -1;
                }
            }
            else
            {
                if(midairTimer == -1)
                {
                    if(sign(yspeed) != -sign(myGrav))
                    {
                        yspeed = 0;
                        xspeed = 0;
                        xSpeedStore = xspeed;
                        grav = 0;
                        midairTimer = 0;
                    }
                }
                else if(midairTimer &gt;= 0)
                {
                    if(target) calibrateDirection();
                    midairTimer++;
                    if(midairTimer &lt; 5)
                    {
                        image_index = 7;
                    }
                    else if(midairTimer == 5)
                    {
                        image_index = 6;
                        var bullet = instance_create(x+19*image_xscale,y-3*image_yscale,objDarkMan3Bullet);
                        with(bullet)
                        {
                            if(target)aimAtTarget(5);
                            else xspeed = 5*other.image_xscale;
                        }
                    }
                    else if(midairTimer &lt; 10)
                    {
                        image_index = 6;
                    }
                    else
                    {
                        if(machgunTracker)
                        {
                            machgunTracker--;
                            midairTimer = 0;
                            image_index = 7;
                        }
                        else
                        {
                            midairTimer = -2;
                            grav = myGrav;
                            xspeed = image_xscale;
                            xSpeedStore = xspeed;
                        }
                    }
                }
                xspeed = xSpeedStore;
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objDarkMan3Bullet) instance_destroy();
with(objDarkMan3StunRing) instance_destroy();
with(target) if(isFrozen)
{
    freezeTimer = 0;
    isFrozen = 0;
}

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
