<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDarkMan2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskDarkMan2</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprDarkMan2;
poseImgSpeed = 3 / 60;
contactDamage = 5;

//manualColors = true;
ground = false;
attackTimer = 0;
phase = 0;
canJump = false;
delay = 0;
timesWalked = 0;
canSpeedUp = 1; //Set to 0 if you don't want Dark Man to speed up after losing half of his health points
canShoot = 0; // Set to 1 if you want Dark Man to use his special attack (not present in the original)

// Health Bar
healthBarPrimaryColor[1] = 13;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_5.nsf";
musicType = "VGM";
musicTrackNumber = 10;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 2);
enemyDamageValue(objSuperArmDebris, 2);
enemyDamageValue(objIceSlasher, 4);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 0);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 4);
enemyDamageValue(objHardKnuckle, 2);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objSearchSnake, 0);
enemyDamageValue(objSparkShock, 0);
enemyDamageValue(objShadowBlade, 1);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 4);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 4);
enemyDamageValue(objJewelSatellite, 4);
enemyDamageValue(objHornetChaser, 0);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 2);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);
enemyDamageValue(objThunderWool, 4);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 1);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 0);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 4);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 3);
enemyDamageValue(objIceWall, 2);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 2);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if (isFight == true)
    {
        if (delay &gt; 0)
            delay -= 1;
        switch (phase)
        {
            case 0: // Barrier creation
                attackTimer++;
                if(attackTimer == 20)
                {
                    sprite_index = sprDarkMan2Prep;
                    var i = instance_create(x + 17, y, objDarkMan2Barrier);
                    i.dir = -1;
                    var i = instance_create(x - 17, y, objDarkMan2Barrier);
                    i.dir = 1;
                }
                if(attackTimer == 35)
                {
                    phase = 1;
                    attackTimer = 60;
                }
                break;
            case 1: // Idle
                attackTimer++;
                sprite_index = sprDarkMan2;
                if(attackTimer == 90)
                {
                    if(timesWalked = 3)
                    {
                        phase = 3;
                        timesWalked = 0;
                        delay = 5;
                        attackTimer = 0;
                        calibrateDirection();
                    } else
                    {
                        phase = 2;
                        delay = 5;
                        attackTimer = 0;
                    }
                }
                break;
            case 2: // Walking
            if (instance_exists(target))
            {
                if (abs(target.x - x) &lt; 5 &amp;&amp; yspeed = 0)
                {
                    xspeed = 0;
                    phase = 1; //Idle
                    if(canShoot = 1) {
                        timesWalked += 1;
                    }
                } else
                {
                    if (!checkSolid(3 * image_xscale, -32, 0, 1))
                    {
                        canJump = true;
                    }
                    else
                    {
                        canJump = false;
                    }
                    // if dark man 2 hits a wall, he stops and searches mega's position again.
                    if (xspeed == 0 &amp;&amp; delay == 0 &amp;&amp; canJump == false)
                    {
                        xspeed = 0;
                        phase = 1;
                        if(canShoot = 1) {
                            timesWalked += 1;
                        }
                    }
                    // if dark man 2 hits a wall he can jump over, he does so
                    if (xspeed == 0 &amp;&amp; delay == 0 &amp;&amp; canJump == true
                        &amp;&amp; ground == true)
                    {
                        yspeed = -4;
                        delay = 5;
                        sprite_index = sprDarkMan2Jump;
                    }
                    // when dark man hits the ground, continue walking.
                    if (ground == true &amp;&amp; delay &lt;= 1 &amp;&amp; sprite_index != sprDarkMan2Walk)
                    {
                        calibrateDirection();
                        sprite_index = sprDarkMan2Walk;
                        image_speed = 0.15;
                        if(healthpoints &lt; (healthpointsStart / 3) &amp;&amp; canSpeedUp = 1)
                        {
                            xspeed = 3 * image_xscale;
                        } 
                        else if(healthpoints &gt; ((2*healthpointsStart) / 3) &amp;&amp; canSpeedUp = 1) 
                        {
                            xspeed = 1.5 * image_xscale;
                        } 
                        else 
                        {
                            xspeed = 2.25 * image_xscale;
                        }
                    }
                    if (sprite_index == sprDarkMan2Jump)
                    {
                        if(healthpoints &lt; (healthpointsStart / 2) &amp;&amp; canSpeedUp = 1)
                        {
                            xspeed = 1.5 * image_xscale;
                        } else {
                            xspeed = 0.75 * image_xscale;
                        }
                    }
                }
            } 
            else
            {
                xspeed = 0;
                sprite_index = sprDarkMan2;
            }
                break;
            case 3: //Walking but to a wall too high
                if (!checkSolid(3 * image_xscale, -32, 0, 1))
                    {
                        canJump = true;
                    }
                    else
                    {
                        canJump = false;
                    }
                    // if dark man hits a wall, he stops and attacks.
                    if (xspeed == 0 &amp;&amp; delay == 0 &amp;&amp; canJump == false)
                    {
                        sprite_index = sprDarkMan2;
                        xspeed = 0;
                        attackTimer = 0;
                        phase = 4;
                    }
                    // if dark man hits a wall he can jump over, he does so
                    if (xspeed == 0 &amp;&amp; delay == 0 &amp;&amp; canJump == true
                        &amp;&amp; ground == true)
                    {
                        yspeed = -4;
                        delay = 5;
                        sprite_index = sprDarkMan2Jump;
                    }
                    // when dark man hits the ground, continue walking.
                    if (ground == true &amp;&amp; delay &lt;= 1 &amp;&amp; sprite_index != sprDarkMan2Walk)
                    {
                        if(healthpoints &lt; (healthpointsStart / 2) &amp;&amp; canSpeedUp = 1)
                        {
                            xspeed = 3 * image_xscale;
                        } 
                        else 
                        {
                            xspeed = 1.5 * image_xscale;
                        }
                        sprite_index = sprDarkMan2Walk;
                        image_speed = 0.15;
                    }
                    if (sprite_index == sprDarkMan2Jump)
                    {
                        if(healthpoints &lt; (healthpointsStart / 2) &amp;&amp; canSpeedUp = 1)
                        {
                            xspeed = 1.5 * image_xscale;
                        } 
                        else 
                        {
                            xspeed = 0.75 * image_xscale;
                        }
                    }
                    break;
                case 4: //Barrier throwing
                    attackTimer++;
                    calibrateDirection();
                    if (attackTimer &lt;= 20)
                    {
                        sprite_index = sprDarkMan2;
                    }
                    if (attackTimer == 20)
                    {
                        sprite_index = sprDarkMan2Prep;
                    }
                    if (attackTimer == 40)
                    {
                        sprite_index = sprDarkMan2Shoot;
                        if (instance_exists(objDarkMan2Barrier))
                        {
                            with(objDarkMan2Barrier)
                            {
                                orbit = false;
                            }
                        }
                    }
                    if (attackTimer == 90)
                    {
                        sprite_index = sprDarkMan2Prep;
                        var i = instance_create(x + 17, y, objDarkMan2Barrier);
                        i.dir = -1;
                        var i = instance_create(x - 17, y, objDarkMan2Barrier);
                        i.dir = 1;
                    }
                    if (attackTimer == 120)
                    {
                        sprite_index = sprDarkMan2Jump;
                        yspeed = -3.2;
                    }
                    if (attackTimer == 140)
                    {
                        sprite_index = sprDarkMan2JumpShoot;
                        if (instance_exists(objDarkMan2Barrier))
                        {
                            with(objDarkMan2Barrier)
                            {
                                orbit = false;
                            }
                        }
                    }
                    if (attackTimer &gt;= 140 &amp;&amp; ground == true)
                    {
                        sprite_index = sprDarkMan2;
                        phase = 0;
                        attackTimer = 0;
                    }
                    break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
