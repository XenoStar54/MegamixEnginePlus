<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAtomicFireGB1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 1;
extraDamage = 0;

image_speed = 1/4;

pierces = 1;
penetrate = 0;

xspeed = 0;
yspeed = 0;
grav = 0;
blockCollision = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

audio_stop_sound(sfxAtomicFireChargeAGBI);
audio_stop_sound(sfxAtomicFireChargeBGBI);
audio_stop_sound(sfxAtomicFireChargeCGBI);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var chargeTime = 180; // Set charge time for this weapon
var initChargeTime = 20;

if (instance_number(objAtomicFireGB) &lt; 2 &amp;&amp; global.ammo[playerID, global.weapon[playerID]])
{
    if ((global.keyShoot[playerID] || (isSlide &amp;&amp; chargeTimer &gt; 0))
        &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE)
        &amp;&amp; !isShoot)
    {
        chargeTimer++;
        if (chargeTimer &gt; 0)
        {
            if (chargeTimer &lt; 90)
            {
                if (global.ammo[playerID, global.weapon[playerID]] &lt; 1)
                {
                    // cancel charging if we don't have enough ammo
                    chargeTimer = -99999999;
                }
                else
                {
                    if (!audio_is_playing(sfxAtomicFireChargeAGBI))
                    {
                        playSFX(sfxAtomicFireChargeAGBI);
                    }
                    
                    var chargeTimeDiv, chargeCol, primCol, secCol;
                    
                    primCol = global.weaponPrimaryColor[global.weaponID[? objAtomicFireGB]];
                    secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFireGB]];
                    chargeCol = global.nesPalette[44];
                    
                    if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                    {
                        global.primaryCol[playerID] = primCol;
                        global.secondaryCol[playerID] = secCol;
                        global.outlineCol[playerID] = chargeCol;
                    }
                    else
                    {
                        global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFireGB]];
                        global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFireGB]];
                        global.outlineCol[playerID] = c_black;
                    }
                }
            }
            else if (chargeTimer &lt; 180)
            {
                if (global.ammo[playerID, global.weapon[playerID]] &lt; 4)
                {
                    // cancel charging if we don't have enough ammo
                    chargeTimer = -99999999;
                }
                else
                {
                    if (audio_is_playing(sfxAtomicFireChargeAGBI))
                    {
                        audio_stop_sound(sfxAtomicFireChargeAGBI);
                    }
                    
                    if (!audio_is_playing(sfxAtomicFireChargeBGBI))
                    {
                        playSFX(sfxAtomicFireChargeBGBI);
                    }
                
                    var chargeTimeDiv, chargeCol, primCol, secCol;
                    
                    primCol = global.nesPalette[38];
                    secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFireGB]];
                    chargeCol = global.nesPalette[44];
            
                    if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                    {
                        global.primaryCol[playerID] = primCol;
                        global.secondaryCol[playerID] = secCol;
                        global.outlineCol[playerID] = chargeCol;
                    }
                    else
                    {
                        global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFireGB]];
                        global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFireGB]];
                        global.outlineCol[playerID] = c_black;
                    }
                }
            }
            else
            {
                if (global.ammo[playerID, global.weapon[playerID]] &lt; 8)
                {
                    // cancel charging if we don't have enough ammo
                    chargeTimer = -99999999;
                }
                else
                {
                    if (audio_is_playing(sfxAtomicFireChargeBGBI))
                    {
                        audio_stop_sound(sfxAtomicFireChargeBGBI);
                    }
                    
                    if (!audio_is_playing(sfxAtomicFireChargeCGBI))
                    {
                        playSFX(sfxAtomicFireChargeCGBI);
                    }
                
                    var chargeTimeDiv, chargeCol, primCol, secCol;
                    
                    primCol = global.nesPalette[40];
                    secCol = global.weaponSecondaryColor[global.weaponID[? objAtomicFireGB]];
                    chargeCol = global.nesPalette[40];
                    
                    if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                    {
                        global.primaryCol[playerID] = primCol;
                        global.secondaryCol[playerID] = secCol;
                        global.outlineCol[playerID] = chargeCol;
                    }
                    else
                    {
                        global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objAtomicFireGB]];
                        global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objAtomicFireGB]];
                        global.outlineCol[playerID] = c_black;
                    }
                }
            }
        }
    }
    else if (chargeTimer != 0 &amp;&amp; (!isSlide || chargeTimer &lt; 0))
    {
        if (!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer &gt; 0) 
        {
            shootTimer = 0;
            
            var a = noone;
            if (chargeTimer &lt; 90)
            {
                a = fireWeapon(16, 0, objAtomicFireGB, 2, 1, 2, 0);
                a.sprite_index = sprAtomicFireGB1;
                a.contactDamage = 1;
            }
            else if(chargeTimer &lt; 180)
            {
                a = fireWeapon(16, 0, objAtomicFireGB, 2, 4, 2, 0);
                a.sprite_index = sprAtomicFireGB2;
                a.contactDamage = 6;
            }
            else
            {
                a = fireWeapon(16, 0, objAtomicFireGB, 2, 8, 2, 0);
                a.sprite_index = sprAtomicFireGB3;
                a.contactDamage = 12;
            }
            
            if (instance_exists(a))
            {
                a.image_xscale = image_xscale;
                a.image_yscale = image_yscale;
                a.xspeed = image_xscale * 3;
                playSFX(sfxFireStormGBI);
            }
            
        }
        
        // Reset all charging stuff
        chargeTimer = 0;
        initChargeTimer = 0;
        audio_stop_sound(sfxAtomicFireChargeAGBI);
        audio_stop_sound(sfxAtomicFireChargeBGBI);
        audio_stop_sound(sfxAtomicFireChargeCGBI);
        playerPalette(); // Reset the colors
    }
    else if (!global.keyShoot[playerID])
    {
        // reset the janky charge timer from canceling the charging
        chargeTimer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>specialDamageValue("fire", 0);

if(sprite_index == sprAtomicFireGB1)
{
    specialDamageValue("nature", 4);
}
if(sprite_index == sprAtomicFireGB2)
{
    specialDamageValue("nature", 8);
}
if(sprite_index == sprAtomicFireGB3)
{
    specialDamageValue("nature", 14);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("ATOMIC FIRE GB", global.nesPalette[18], global.nesPalette[34], sprWeaponIconsAtomicFireGB);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

audio_stop_sound(sfxAtomicFireChargeAGBI);
audio_stop_sound(sfxAtomicFireChargeBGBI);
audio_stop_sound(sfxAtomicFireChargeCGBI);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// just insert this here since we don't want to use the NES reflect sound
canDamage = 0;
canHit = false;
direction = 45 + 90 * (xspeed + hspeed &gt; 0);
speed = 6;
xspeed = 0;
yspeed = 0;
playSFX(sfxReflectGBI);
contactDamage = 0;
audio_stop_sound(sfxAtomicFireChargeAGBI);
audio_stop_sound(sfxAtomicFireChargeBGBI);
audio_stop_sound(sfxAtomicFireChargeCGBI);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
