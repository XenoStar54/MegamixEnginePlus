<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprProtoManMM7Boss</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
hasTriggeredFall = false;

customPose = 1;
introType = 0;
contactDamage = 4;
myGrav = grav;

timer = 0;
phase = 0;
aerialTimer = 0;
lastPhase = -1;

shotCount = 0;

spriteWarp = sprProtoManMM7BossWarp;
spriteNormal = sprProtoManMM7Boss;

preIntro = false;

// Health Bar
healthBarPrimaryColor[1] = 19;
healthBarSecondaryColor[1] = 13;

storeMusic = "MM7Boss.nsf";
musicType = "VGM";
musicTrackNumber = 0;
musicLoopSecondsStart = 0;
musicLoopSecondsEnd = 0;
musicLoop = 1;
musicVolume = 1;

knocksMeBack[0] = objBusterShotCharged;

enemyDamageValue(objYamatoSpear, 4);
enemyDamageValue(objLaserTrident, 4);

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 2);

// MaGMML3
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objThunderBeam, 1);
enemyDamageValue(objBreakDash, 1);
enemyDamageValue(objMagneticShockwave, 1);
enemyDamageValue(objIceWall, 1);

// MaGMML2
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWheelCutter, 1);
enemyDamageValue(objSlashClaw, 1);
enemyDamageValue(objSakugarne, 1);
enemyDamageValue(objSuperArrow, 1);
enemyDamageValue(objWireAdapter, 1);

// MaGMML1
enemyDamageValue(objMetalBlade, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objSolarBlaze, 1);
enemyDamageValue(objTopSpin, 1);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objPharaohShot, 1);
enemyDamageValue(objBlackHoleBomb, 1);
enemyDamageValue(objMagicCard, 1);

// MaG48MML
enemyDamageValue(objFlameMixer, 1);
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objTenguBlade, 1);
enemyDamageValue(objTenguDash, 1);
enemyDamageValue(objTenguDisk, 1);
enemyDamageValue(objSaltWater, 1);
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objHomingSniper, 1);

// MaG48MML
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objChillShot, 1);
enemyDamageValue(objChillSpikeLanded, 1);

// Misc.
enemyDamageValue(objPowerStone, 1);
enemyDamageValue(objPlantBarrier, 1);
enemyDamageValue(objBlockDropper, 1);
enemyDamageValue(objIceSlasher, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (entityCanStep())
{
    if(startIntro)
    {
        y = view_yview + (view_hview*(image_yscale &lt; 0)) - 64*image_yscale;
        calibrateDirection();
        phase = 0;
        timer = 0;
        sprite_index = spriteWarp;
        hasTriggeredFall = false;
        canFillHealthBar = false;
        image_index = 0;
        visible = false;
        startIntro = false;
        isIntro = false;
        preIntro = true;
        stopMusic();
    }
    else if(preIntro)
    {
        timer++;
        if(timer == 10) playSFX(sfxWhistle);
        else if(timer &gt;= 200)
        {
            timer = 0;
            visible = true;
            preIntro = false;
            isIntro = true;
            yspeed = image_yscale*4;
        }
    }
    else if(isIntro)
    {
        if(!hasTriggeredFall)
        {
            if(abs(y - ystart) &lt; abs(yspeed))
            {
                y = ystart;
                yspeed = 0;
                hasTriggeredFall = true;
                image_index = 1;
                playSFX(sfxTeleportIn);
            }
        }
        else
        {
            timer++;
            if(timer &lt; 5)
            {
                image_index = 1;
            }
            else if(timer &lt; 10)
            {
                image_index = 2;
            }
            else if(timer == 10)
            {
                image_index = 0;
                sprite_index = spriteNormal;
            }
            else if(timer == 30)
            {
                playMusic(storeMusic, musicType, musicTrackNumber, musicLoopSecondsStart, musicLoopSecondsEnd, musicLoop, musicVolume);
            }
            else if(timer &gt; 45)
            {
                timer = 0;
                aerialTimer = 0;
                phase = 0;
                canFillHealthBar = true;
                isIntro = false;
                grav = myGrav;
                blockCollision = blockCollisionStart;
                setTargetStep();
            }
        }
    }
    else if(isFight)
    {
        if(phase == 0) // rng
        {
            if(ground)
            {
                xspeed = 0;
                image_index = 0;
                timer++;
                var newPhase = choose(1,2,3,4);
                while(newPhase == lastPhase) newPhase = choose(1,2,3,4);
                // skip some startup frames after dash
                if(lastPhase == 3 &amp;&amp; newPhase != 2) timer = 8;
                // skip some startup frames after jump
                // he's supposed to also skip the charging animation, but eh
                else if(lastPhase == 2 &amp;&amp; newPhase == 4) timer = 8;
                else timer = 0;
                aerialTimer = 0;
                shotCount = 0;
                lastPhase = newPhase;
                phase = newPhase;
            }
            else
            {
                image_index = 3;
            }
        }
        else if(phase == 1) // triple shot
        {
            timer++;
            if(timer &lt; 8)
            {
                image_index = 0;
            }
            else if(timer &lt; 18)
            {
                image_index = 0;
                if(target) calibrateDirection();
            }
            else if(timer &lt; 25)
            {
                image_index = 2;
                if(target) calibrateDirection();
            }
            else if(timer == 25)
            {
                var shot = instance_create(x+12*image_xscale,y+7*image_yscale,objEnemyBullet);
                shot.blockCollision = 0;
                shot.dir = 90-90*image_xscale;
                shot.spd = 5;
                playSFX(sfxEnemyShootClassic);
            }
            else if(timer &lt; 47)
            {
                image_index = 2;
                if(target) calibrateDirection();
            }
            else
            {
                shotCount++;
                if((target &amp;&amp; target.iFrames &lt; 0) || shotCount &gt;= 3)
                {
                    timer = 0;
                    phase = 0;
                    image_index = 0;
                }
                else
                {
                    timer = 18;
                }
            }
        }
        else if(phase == 2) // triple jump
        {
            if(ground)
            {
                aerialTimer = 0;
                if(target) calibrateDirection();
                xspeed = 0;
                image_index = 0;
                if(timer == 0 || timer == 6)
                {
                    yspeed = -6*image_yscale;
                    xspeed = image_xscale;
                    image_index = 4;
                    timer++;
                }
                else if(timer == 12)
                {
                    yspeed = -7.5*image_yscale;
                    if(target) xspeed = xSpeedAim(x,y,target.x,target.y,yspeed,grav);
                    else xspeed = image_xscale;
                    image_index = 4;
                    timer++;
                }
                else if(timer &gt; 12)
                {
                    phase = 0;
                    timer = 0;
                    aerialTimer = 0;
                }
                else
                {
                    timer++;
                }
            }
            else
            {
                aerialTimer++;
                if(timer &gt; 12)
                {
                    if(aerialTimer == 9)
                    {
                        image_index = 4;
                        var shot = instance_create(x+12*image_xscale,y,objEnemyBullet);
                        shot.blockCollision = 0;
                        shot.dir = 180+90*image_yscale;
                        shot.spd = 5;
                        playSFX(sfxEnemyShootClassic);
                    }
                    else if(aerialTimer == 16)
                    {
                        image_index = 4;
                        var shot = instance_create(x+12*image_xscale,y,objEnemyBullet);
                        shot.blockCollision = 0;
                        shot.dir = 180+90*image_yscale +22.5*image_xscale*image_yscale;
                        shot.spd = 5;
                        playSFX(sfxEnemyShootClassic);
                    }
                    else if(aerialTimer == 23)
                    {
                        image_index = 4;
                        var shot = instance_create(x+12*image_xscale,y,objEnemyBullet);
                        shot.blockCollision = 0;
                        shot.dir = 180+90*image_yscale +45*image_xscale*image_yscale;
                        shot.spd = 5;
                        playSFX(sfxEnemyShootClassic);
                    }
                    else if(aerialTimer == 30)
                    {
                        image_index = 4;
                        var shot = instance_create(x+12*image_xscale,y,objEnemyBullet);
                        shot.blockCollision = 0;
                        shot.dir = 180+90*image_yscale +67.5*image_xscale*image_yscale;
                        shot.spd = 5;
                        playSFX(sfxEnemyShootClassic);
                    }
                    else if(aerialTimer == 37)
                    {
                        image_index = 4;
                        var shot = instance_create(x+12*image_xscale,y,objEnemyBullet);
                        shot.blockCollision = 0;
                        shot.dir = 90-90*image_xscale;
                        shot.spd = 5;
                        playSFX(sfxEnemyShootClassic);
                    }
                    else if(aerialTimer &lt; 41) image_index = 4;
                    else image_index = 3;
                }
                else
                {
                    if(aerialTimer == 10)
                    {
                        image_index = 4;
                        var shot = instance_create(x+12*image_xscale,y,objEnemyBullet);
                        shot.blockCollision = 0;
                        shot.dir = 90-90*image_xscale;
                        shot.spd = 5;
                        playSFX(sfxEnemyShootClassic);
                    }
                    else if(aerialTimer &lt; 15) image_index = 4;
                    else image_index = 3;
                }
            }
        }
        else if(phase == 3) // dash
        {
            timer++;
            if(timer &lt; 14)
            {
                image_index = 1;
                if(target) calibrateDirection();
            }
            else if(timer &lt; 28)
            {
                image_index = 5;
                if(target) calibrateDirection();
            }
            else
            {
                xspeed = 2*image_xscale;
                if((timer - 28) mod 4 == 0)
                {
                    if(image_index != 9) image_index = 9;
                    else image_index = 10;
                    with(instance_create(x-14*image_xscale,y+14*image_yscale,objSlideDust))
                    {
                        image_xscale = other.image_xscale;
                        image_yscale = other.image_yscale;
                    }
                }
                if(checkSolid(xspeed,0))
                {
                    xspeed = 0;
                    timer = 0;
                    phase = 0;
                }
                else if(checkSolid(xspeed*4,0)) image_index = 5;
            }
        }
        else if(phase == 4) // charged shot
        {
            timer++;
            if(timer &lt; 8)
            {
                image_index = 0;
            }
            else if(timer &lt; 16)
            {
                image_index = 5;
                if(target) calibrateDirection();
            }
            else if(timer &lt; 40)
            {
                image_index = 6;
                if(target) calibrateDirection();
            }
            else if(timer &lt; 103)
            {
                if(timer == 40) playSFX(sfxCharged);
                if(timer mod 3 == 0)
                {
                    if(image_index &lt; 8) image_index++;
                    else image_index = 6;
                }
                if(target) calibrateDirection();
            }
            else if(timer &lt; 124)
            {
                image_index = 2;
                if(target) calibrateDirection();
                if(timer == 113) instance_create(x+12*image_xscale,y+7*image_yscale,objExplosion);
            }
            else if(timer &lt; 129)
            {
                image_index = 2;
                var shot = instance_create(x+12*image_xscale,y+7*image_yscale,objEnemyBullet);
                shot.blockCollision = 0;
                shot.dir = 90-90*image_xscale;
                shot.spd = 5;
                shot.sprite_index = sprBusterShotChargedPlus;
                shot.image_speed = 0.3;
                shot.image_xscale = image_xscale;
                shot.contactDamage = 4;
                playSFX(sfxMinorExplosion);
            }
            else if(timer &lt; 142)
            {
                image_index = 2;
                if(target) calibrateDirection();
            }
            else if(timer &lt; 155)
            {
                image_index = 5;
                if(target) calibrateDirection();
            }
            else
            {
                timer = 0;
                phase = 0;
                image_index = 0;
            }
        }
        else if(phase == 5) // knockback
        {
            image_index = 11;
            xspeed = -0.5*image_xscale;
            timer++;
            if(timer &gt;= 26)
            {
                timer = 0;
                phase = 3;
                lastPhase = 3;
                xspeed = 0;
            }
        }
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var shieldCheck = 0;
if(image_index &gt;= 5 &amp;&amp; image_index &lt;= 10)
{
    if(collision_rectangle(x+8*image_xscale, y-5*image_yscale, x+14*image_xscale, y+15*image_yscale, other.id, false, false))
    {
        shieldCheck = 1;
    }
}
if(shieldCheck) other.guardCancel = 1;
else event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objEnemyBullet) instance_destroy();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(var i = 0; i &lt; array_length_1d(knocksMeBack); i++)
{
    if(other.object_index == knocksMeBack[i] &amp;&amp; phase != 3)
    {
        i = array_length_1d(knocksMeBack);
        phase = 5;
        timer = 0;
        image_index = 11;
        if(sign(yspeed) != sign(grav)) yspeed = 0;
    }
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
