<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPUSwitchConveyorPreview</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// conveyor that swaps direction based on switch state
event_inherited();

canHit = false;
canDamage = false;
contactDamage = 0;
isSolid = 1;

blockCollision = 0;
grav = 0;
bubbleTimer = -1;

myFlag = 999;

blockSwitchStateFaction = 0;

dir = 0;
spd = 1;
hasBelt = false;
beltImg = 0;
beltImgMax = 16;
imgSpd = 1;

respawnRange = -1;
despawnRange = -1;
shiftVisible = 1;
bubbleTimer = -1;

init = 1;

// entities ignored by the conveyor
ignoreList[0] = objCrusher;
ignoreList[1] = objOshitsuOsarettsu;
ignoreList[2] = objMetalMan;

spriteToDraw = sprPUSwitchConveyor;
drawWidth = 16;
drawHeight = 16;

//@cc: when true, sprite frames on the bottom will be used for left-facing conveyor
// ONLY USE FOR 2-TILE CONVEYORS PLEASE
useBelowFramesForLeft = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(init)
{
    dir = sign(dir);
    image_xscale = ceil(image_xscale);
    if(dir == 0) dir = sign(image_xscale);
    else
    {
        if(dir &lt; 0) x = bbox_right;
        else x = bbox_left;
        image_xscale = sign(dir)*abs(image_xscale);
    }
    init = 0;
}

event_inherited();

if (entityCanStep())
{
    var activity = (global.flagParent[myFlag].active xor blockSwitchStateFaction);
    dir = sign(image_xscale)*(activity-(activity==0));
    
    var exspd = spd * dir;
    
    if (exspd != 0)
    {
        with(prtEntity)
        {
            var moveEntity = 1;
            with(other)
            {
                for(var i = 0; i &lt; array_length_1d(ignoreList); i++)
                {
                    if(instance_exists(ignoreList[i]) &amp;&amp; ignoreList[i] != noone)
                    {
                        if(other.object_index == ignoreList[i].object_index)
                        {
                            moveEntity = 0;
                        }
                    }
                }
            }
            exspd *= moveEntity;
            
            if (blockCollision &amp;&amp; !dead &amp;&amp; ground &amp;&amp; grav != 0)
            {
                if(place_meeting(x,y+2*sign(grav), other))
                {
                    if(!other.hasBelt)
                        shiftObject(exspd, 0, 1);    
                    else
                        shiftObject(exspd*sign(grav), 0, 1);  
                }
            }
        }
    }
    
    beltImg = (beltImg + spd * imgSpd);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!dead)
{
    var _img = (floor(beltImg) mod beltImgMax)+(!global.flagParent[myFlag].active)*beltImgMax;
    if(abs(image_xscale) == 1)
    {
        if(useBelowFramesForLeft &amp;&amp; dir &lt; 0) draw_sprite_part_ext(spriteToDraw,_img,0,drawHeight,drawWidth,2*drawHeight,bbox_left,y,1,image_yscale,c_white,1);
        else draw_sprite_part_ext(spriteToDraw,_img,0,0,drawWidth,drawHeight,bbox_left+drawWidth*(dir&lt;0),y,dir,image_yscale,c_white,1);
    }
    else
    {
        for(var i = 0; i &lt; abs(image_xscale); i++)
        {
            var _dimg = 2;
            if(i == 0) _dimg = 1;
            else if(i == abs(image_xscale)-1) _dimg = 3;
            if(useBelowFramesForLeft &amp;&amp; dir &lt; 0) draw_sprite_part_ext(spriteToDraw,_img,drawWidth*(_dimg),drawHeight,drawWidth,2*drawHeight,bbox_left+i*drawWidth,y,1,image_yscale,c_white,1);
            else draw_sprite_part_ext(spriteToDraw,_img,drawWidth*(_dimg),0,drawWidth,drawHeight,bbox_left+i*dir*drawWidth+(dir&lt;0)*(abs(image_xscale)*drawWidth),y,dir,image_yscale,c_white,1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
