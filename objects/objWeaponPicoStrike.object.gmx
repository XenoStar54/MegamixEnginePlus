<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWeaponPicoStrike</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 0;
blockCollision = 0;
grav = 0;
canDamage = 0;
contactDamage = 2;
penetrate = 1;
pierces = 2;

timer = 0;
timerMax = 15;
phase = 0;

picoType = 0;

screenDistX = 0;
screenDistY = 0;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(phase == 0) // show up
    {
        visible = 1;
        canDamage = 1;
        image_index = picoType mod 2;
        switch(picoType)
        {
            case 0:
                x = view_xview;
                y = view_yview+48;
                break;
            case 1:
                x = view_xview+view_wview;
                y = view_yview+48;
                break;
            case 2:
                x = view_xview+48;
                y = view_yview;
                break;
            case 3:
                x = view_xview+48;
                y = view_yview+view_hview;
                break;
            case 4:
                x = view_xview+view_wview-48;
                y = view_yview+view_hview;
                break;
            case 5:
                x = view_xview+view_wview-48;
                y = view_yview;
                break;
            default:
                instance_destroy();
                break;
        }
        phase = 1;
    }
    else if(phase == 1) // attach to self
    {
        timer++;
        switch(picoType)
        {
            case 0:
                x = view_xview + (timer/timerMax)*(view_wview/2);
                y = view_yview+48;
                break;
            case 1:
                x = view_xview+view_wview - (timer/timerMax)*(view_wview/2);
                y = view_yview+48;
                break;
            case 2:
                x = view_xview+48;
                y = view_yview + (timer/timerMax)*(view_hview/2);
                break;
            case 3:
                x = view_xview+48;
                y = view_yview+view_hview - (timer/timerMax)*(view_hview/2);
                break;
            case 4:
                x = view_xview+view_wview-48;
                y = view_yview+view_hview - (timer/timerMax)*(view_hview/2);
                break;
            case 5:
                x = view_xview+view_wview-48;
                y = view_yview + (timer/timerMax)*(view_hview/2);
                break;
            default:
                instance_destroy();
                break;
        }
        if(timer &gt;= timerMax)
        {
            switch(picoType)
            {
                case 0:
                    x = view_xview + (view_wview/2);
                    y = view_yview+48;
                    break;
                case 1:
                    x = view_xview+view_wview - (view_wview/2);
                    y = view_yview+48;
                    break;
                case 2:
                    x = view_xview+48;
                    y = view_yview + (view_hview/2);
                    break;
                case 3:
                    x = view_xview+48;
                    y = view_yview+view_hview - (view_hview/2);
                    break;
                case 4:
                    x = view_xview+view_wview-48;
                    y = view_yview+view_hview - (view_hview/2);
                    break;
                case 5:
                    x = view_xview+view_wview-48;
                    y = view_yview + (view_hview/2);
                    break;
                default:
                    instance_destroy();
                    break;
            }
            if(picoType mod 2) instance_destroy();
            else
            {
                timer = 0;
                phase = 2;
                image_index = 2;
                screenDistX = x-view_xview;
                screenDistY = y-view_yview;
            }
        }
    }
    else if(phase == 2) // form
    {
        x = view_xview+screenDistX;
        y = view_yview+screenDistY;
        timer++;
        image_index = clamp(2+3*timer/timerMax,2,5);
        if(timer &gt;= timerMax)
        {
            image_index = 5;
            timer = 0;
            phase = 3;
            var angle = point_direction(x,y,view_xview+view_wview/2,view_yview+view_hview/2);
            if(instance_exists(target))
            {
                angle = point_direction(x,y,bboxGetXCenterObject(target),bboxGetYCenterObject(target));
            }
            xspeed = cos(degtorad(angle))*8;
            yspeed = -sin(degtorad(angle))*8;
        }
    }
    else if(phase == 3) // fly
    {
        timer++;
        image_index = ((timer/3) mod 2) + 5;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var count = 0;
with(objWeaponPicoStrike) if(parent == other) count++;

if(!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; global.keyShootPressed[playerID] &amp;&amp; global.ammo[playerID,global.weapon[playerID]] &gt; 0)
{
    if(count &lt;= 2) // spawn picos
    {
        for(var j = 0; j &lt; 6; j++)
        {
            i = fireWeapon(0,0,objWeaponPicoStrike,99,3*(j==0),2,0);
            if(i)
            {
                i.picoType = j;
                if(j == 0) playSFX(sfxTimeStopper);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("PICO STRIKE",global.nesPalette[18],global.nesPalette[30],sprWeaponIconsPicoStrike);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
