<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBladeLauncher</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

bulletLimitCost = 0;

contactDamage = 2;
blockCollision = 0;
attackDelay = 0;

image_speed = 0;

penetrate = 0;
pierces = 2;

state = 0;
timer = 0;

grav = 0;
xspeed = 0;
yspeed = 0;
spd = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(state == -1) // vanish
    {
        timer++;
        if(timer mod 4 == 1) visible = !visible;
    }
    else if(state == 0) // fly
    {
        if(checkSolid(0,0))
        {
            xspeed = 0;
            yspeed = 0;
            state = 1;
        }
    }
    else if(state == 1) // wait to be ran over
    {
        if(instance_exists(objBladeLauncherBoomerang))
        {
            if(abs(objBladeLauncherBoomerang.x-x)&lt;16 &amp;&amp; abs(objBladeLauncherBoomerang.y-y)&lt;16)
            {
                spd = 6.5;
                var angle = 90-90*image_xscale + 45*image_yscale*image_xscale;
                if(instance_exists(target)) angle = point_direction(x,y,bboxGetXCenterObject(target),bboxGetYCenterObject(target));
                xspeed = cos(degtorad(angle))*spd;
                yspeed = -sin(degtorad(angle))*spd;
                image_speed = -0.5;
                state = 2;
                playSFX(sfxLaserTrident);
                penetrate = 3;
            }
        }
    }
    else if(state == 2) // also fly but now faster
    {
        image_speed = -0.5;
    }
}
else
{
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// EV_WEAPON_CONTROL

var me = objBladeLauncher;
var otherMe = objBladeLauncherBoomerang;

if(isHit)
{
    if(chargeTimer &lt; 15 &amp;&amp; isCharge &amp;&amp; initChargeTimer &gt; 0)
    {
        isCharge = false;
        chargeTimer = 0;
        initChargeTimer = 0;
    }
}

if(isCharge &amp;&amp; global.keyShoot[playerID])
{
    if (chargeTimer == 15)
                {
                    playSFX(sfxCharged);
                }
                if(global.ammo[playerID, global.weaponID[? me]]) chargeTimer++;
                if (!inked &amp;&amp; chargeTimer &gt; 15)
                {
                    var weaponColor1 = global.nesPalette[0];
                    var weaponColor2 = global.nesPalette[13];
                    switch (floor(chargeTimer / 3 mod 3))
                    {
                                case 0:
                                    global.primaryCol[playerID] = weaponColor2;
                                    global.secondaryCol[playerID] = c_black;
                                    global.outlineCol[playerID] = weaponColor1;
                                    break;
                                case 1:
                                    global.primaryCol[playerID] = c_black;
                                    global.secondaryCol[playerID] = weaponColor1;
                                    global.outlineCol[playerID] = weaponColor2;
                                    break;
                                case 2:
                                    global.primaryCol[playerID] = weaponColor1;
                                    global.secondaryCol[playerID] = weaponColor2;
                                    global.outlineCol[playerID] = c_black;
                                    break;
                    }
                }
}

if (!playerIsLocked(PL_LOCK_SHOOT))
{
    if(global.keyShootPressed[playerID] &amp;&amp; !global.ammo[playerID, global.weaponID[? me]])
    {
        with(otherMe)
        {
            if(parent == other) state = 1;
        }
    }
        if(global.keyShoot[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE) &amp;&amp; global.ammo[playerID, global.weaponID[? me]])
        {
            if (!isShoot)
            {
                if(initChargeTimer &lt;= 0) initChargeTimer = chargeTimer;
                isCharge = true;
            }
        }
        else // Release the charge shot
        {
            if (!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE) &amp;&amp; chargeTimer &gt; initChargeTimer &amp;&amp; isCharge)
            {
                /////////////////////
                // ACTUAL SHOOTING //
                /////////////////////
                
                if (chargeTimer &lt; 15) // normal shot
                {
                    var boomerangNumber = 0;
                    for(var j = 0; j &lt; instance_number(otherMe); j++)
                    {
                        var checkedInstance = instance_find(otherMe,j);
                        if(checkedInstance.parent == self) boomerangNumber++;
                    }
                    if(boomerangNumber &lt; 2 &amp;&amp; global.ammo[playerID, global.weaponID[? me]])
                    {
                        i = fireWeapon(16, 0, otherMe, 99, 1, 1, 0);
                        if (i)
                        {
                            i.xspeed = image_xscale * 4;
                        }
                        playSFX(sfxRollingCutter);
                    }
                    else
                    {
                        with(otherMe)
                        {
                            if(parent == other) state = 1;
                        }
                    }
                }
                else // Full charge
                {
                    if(global.ammo[playerID, global.weaponID[? me]])
                    {
                        with(me)
                        {
                            if(parent == other &amp;&amp; state &gt; -1 &amp;&amp; state &lt; 2) event_user(0);
                        }
                        
                        var angle = 0;
                        if(yDir != 0)
                        {
                            angle = 180+yDir*90 + (xDir != 0)*yDir*45;
                        }
                        angle -= 22.5;
                        for(var j = 0; j &lt; 3; j++)
                        {
                            i = fireWeapon(20, 0, me, 99, 2*(j == 0), 2, 1);
                            if (i)
                            {
                                i.image_index = 16*(angle+11.25)/360;
                                i.xspeed = cos(degtorad(angle))*i.spd*image_xscale;
                                i.yspeed = -sin(degtorad(angle))*i.spd;
                            }
                            angle += 22.5;
                        }
                        playSFX(sfxSlashClaw);
                    }
                }
                
                // Reset all charging stuff
                isCharge = false;
                chargeTimer = 0;
                initChargeTimer = 0;
                audio_stop_sound(sfxCharged);
                audio_stop_sound(sfxCharging);
                playerPalette(); // Reset the colors
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("BLADE LAUNCHER", global.nesPalette[0], global.nesPalette[13], sprWeaponIconsBladeLauncher);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playSFX(sfxReflect);
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// get destroyed
state = -1;
timer = 0;
yspeed = -image_yscale*3;
xspeed = -image_xscale;
grav = image_yscale*0.15;
canDamage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
