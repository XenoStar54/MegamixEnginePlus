<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPendulum</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canHit = false;
canDamage = false;
contactDamage = 0;
isSolid = 0;
grav = 0;
visible = true;
blockCollision = false;
despawnRange = -1;
image_speed = 0;

pull = 0;
//@cc: angular velocity with which pendulum starts swinging
initSpd = 0;
spd = 0;
//@cc: maximum angular velocity with which pendulum can swing
maxSpd = 9;
angle = 0;
//@cc: amount of time in frames that takes a pendulum to make 2 full swings
period = 15;
//@cc: maximum number of degrees that the pendulum can veer from its balance point
maxSwing = 90;
//@cc: this is the angle the pendulum spawns with and is its balance angle (0 - straight down, 90 - right, 225 - diagonal up left)
initAngle = 0;
//@cc: distance from the pendulum's hook point to its head in pixels (ONLY CHANGE IF YOU HAVE CHANGED THE GRAPHIC!!!)
radius = 64;
//@cc: this amount of angular velocity will be added to the pendulum when its head gets hit with player weapons
pushStrength = 1.5;
//@cc: when positive, pendulum's head will turn into a sparkle and instead of letting you stand on it, will damage you
headDamage = 0;
//@cc: when true, pendulum will ignore push force from player weapons
unphased = false;
skin[0] = sprPendulum;
skin[1] = sprPendulumAlt;

foothold = noone;

pushesMe[0] = objMM1MetBullet;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(foothold == noone || !instance_exists(foothold))
{
    foothold = instance_create(xstart,ystart,objPendulumSparkle);
    foothold.unphased = unphased;
    foothold.period = period;
    foothold.maxSwing = maxSwing;
    foothold.isSolid = (headDamage == 0);
    foothold.visible = (headDamage &gt; 0);
    foothold.contactDamage = headDamage;
    foothold.pull = pull;
    foothold.initSpd = initSpd;
    foothold.spd = spd;
    foothold.maxSpd = maxSpd;
    foothold.angle = angle+270;
    foothold.initAngle = initAngle+270;
    foothold.radius = radius;
    foothold.motherObject = self;
    foothold.x = xstart + cos(degtorad(angle+270))*radius;
    foothold.y = ystart - sin(degtorad(angle+270))*radius;
}
else
{
    image_angle = foothold.angle-270;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
angle = initAngle;
image_angle = angle;
sprite_index = skin[unphased];
spd = initSpd;
if(abs(spd) &gt; abs(maxSpd))maxSpd = spd;

if(foothold == noone || !instance_exists(foothold))
{
    foothold = instance_create(xstart,ystart,objPendulumSparkle);
    foothold.unphased = unphased;
    foothold.period = period;
    foothold.maxSwing = maxSwing;
    foothold.isSolid = (headDamage == 0);
    foothold.visible = (headDamage &gt; 0);
    foothold.contactDamage = headDamage;
    foothold.pull = pull;
    foothold.initSpd = initSpd;
    foothold.spd = spd;
    foothold.maxSpd = maxSpd;
    foothold.angle = angle+270;
    foothold.initAngle = initAngle+270;
    foothold.radius = radius;
    foothold.x = xstart + cos(degtorad(angle+270))*radius;
    foothold.y = ystart - sin(degtorad(angle+270))*radius;
    foothold.stopOnFlash = stopOnFlash;
    foothold.pushesMe = pushesMe;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
