<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSlashMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>14</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>sprSlashMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;

pose = sprSlashManIntro;
poseImgSpeed = 0.25;
introType = 4;
contactDamage = 6;
ground = false;
attackTimer = 0;
BetoTimer = 0;
groundON = 0; //ground
wallON = 0; //wall
ceilingON = 0; //ceiling

radius = 3 * 16;

//Slash Code
jumpcount = 0
nextphase = 0
slashStop = false
img = 0

// chill man has a bit of randomised shenangians going on. this variable sets it.
randomiser = -1;

// rather than using game maker's image offset features, this time round we're building a more accurate animation system.
imageTimer = 0;
imageTimerMax = 99;

// this is the minmum image_indexs of chill man for any given animation. imageNoMin is what the image_index is set to when plant man has finished an animation.
imageNoMin = 0;
attackTimerMax = 999;
phase = 0;
oldPhase = 2;
delay = 0;
hasFired = false;
pauseGravity = false;
shotsFired = 0;
frostTimer = 0;
phasetime = 0;
xOff = 0;


manualColors = true;

// Health Bar
healthBarPrimaryColor[1] = global.nesPalette[33];
healthBarSecondaryColor[1] = global.nesPalette[36];

music = "MM7Boss.nsf"
musicType = "VGM"
musicTrackNumber = 0
musicVolume = 1

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 4);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 1);
enemyDamageValue(objTopSpin, 0);
enemyDamageValue(objSearchSnake, 4);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 2);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 2); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objWeaponFreezeCracker, 4);
enemyDamageValue(objSlashClaw, 0);

// MM8
enemyDamageValue(objHomingSniper, 2);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 1);
enemyDamageValue(objLaserTrident, 0);
enemyDamageValue(objJewelSatellite, 1);
enemyDamageValue(objHornetChaser, 2);
enemyDamageValue(objBlackHoleBomb, 0);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 1);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 0);
enemyDamageValue(objSolarBlaze, 4);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 1);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 0);
enemyDamageValue(objSaltWater, 2);

// MM&amp;B
enemyDamageValue(objTenguBlade, 0);
enemyDamageValue(objTenguDash, 0);
enemyDamageValue(objTenguDisk, 0);
enemyDamageValue(objIceWall, 4);
enemyDamageValue(objMagicCard, 1);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 4);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 4);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (randomiser == -1)
{
    randomiser = choose(1.5, 1.5);
}
if (entityCanStep())
{
    if (isFight)
    {
        // this sets up chill man's movement variables.
        if (pauseGravity)
        {
            grav = 0;
        }
        else
        {
            grav = 0.25;
        }
        

        // these control various timers crash man uses - attackTimer and delay.
        // attackTimer can trigger an attack to occur after a certain amount of ticks. (around 145)
        // Delay - Delay is useful to use to stop code from firing too quickly.
        attackTimer += 1;
        if (delay &gt; 0)
        {
            delay -= 1;
        }
        
        // this prevents chill man from randomly choosing the same attack twice in a row
        if (randomiser == oldPhase)
        {
            randomiser = choose(1,1.5,3, 4);
        }
        
        switch (phase)
        {
            case 0: // idle 
                image_index = 0
                sprite_index = sprSlashMan
                
                if (attackTimer &gt;= 10)
                {
                    phase = 1                 
                    attackTimer = 0;
                    groundON = 0; //ground
                    wallON = 0; //wall
                    ceilingON = 0; //ceiling  
                    img = 0;
                    BetoTimer = 0;
                    pauseGravity = false
                }
                break;
                
           case 1://Jump (Mega Man)
                image_index = 9
                if (attackTimer == 1)
                {
                }
                if (attackTimer == 1)
                {
                    calibrateDirection();
                    randomize()

                    yspeed = -5.3
                    
                    if instance_exists(objMegaman)
                    {
                     if(yspeed == -5.3)
                        xspeed = arcCalcXspeed(yspeed, grav, x, y, target.x, y)
                    }                     
                    else
                        xspeed = (image_xscale * 2)
                }
                if (ground &amp;&amp; yspeed &gt;= 0)
                {                    
                    attackTimer = 0                            
                    phase = 10
                    xspeed = 0
                    yspeed = 0
                    playSFX(sfxKnightLand)
                    jumpcount = choose(2,3,4)
                }
                break;

            case 2://Jump
                image_index = 9
                if (attackTimer == 1)
                {
                }
                if (attackTimer == 1)
                {
                    calibrateDirection();
                    randomize()

                    yspeed = -5.3
                    xsp = choose(1,1.3)
                    
                    if instance_exists(objMegaman)
                    {
                     if(jumpcount == 2 || jumpcount == 4)
                        xspeed = arcCalcXspeed(yspeed, grav, x, y, target.x, y)
                     else
                        xspeed = (image_xscale * xsp)
                        
                    }                     
                    else
                        xspeed = (image_xscale * 2)
                }
                if (ground &amp;&amp; yspeed &gt;= 0)
                {                    
                    attackTimer = 0                            
                    phase = 10
                    xspeed = 0
                    yspeed = 0
                    jumpcount -=1;
                    playSFX(sfxKnightLand)
                }
                break;
                
            case 3: // Slash   
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            
            if (attackTimer == 15){         
            image_index = 10      
            }  
            if (attackTimer == 20){         
            image_index = 11 
             shootID = instance_create(x+35*image_xscale, y, objSlashManSlash);
                        shootID.image_xscale = image_xscale;            
            }  
            if (attackTimer == 25)        
            image_index = 12   
            if (attackTimer == 30)        
            image_index = 13                      
                       
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 45)
            {
                    attackTimer = 0      
                    slashStop = true                      
                    phase = 10
            }
            break;
            
            case 4: // Jump in            
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            if (attackTimer == 1 &amp;&amp; !groundON){
            image_index = 1
            groundON = true;
            pauseGravity = true
            }
            
            if (attackTimer == 15 &amp;&amp; groundON &amp;&amp; !wallON)
            {
                image_index = 9
                yspeed = -6.5;
                xspeed = image_xscale*-6.8;
            }
            if (attackTimer == 17 &amp;&amp; groundON &amp;&amp; !wallON)
            {
                image_index = 0
                image_speed = 0.20
                sprite_index = sprSlashManRolling;
            }
            if(xcoll != 0 &amp;&amp; !wallON)
            {
                image_index = 15
                image_speed = 0
                sprite_index = sprSlashMan;
                xspeed = 0
                yspeed = 0
                attackTimer = 0
                wallON = true
                playSFX(sfxKnightLand)
            }

            if (attackTimer == 5 &amp;&amp; wallON &amp;&amp; !ceilingON)
            {
                image_index = 14
            }
            if (attackTimer == 15 &amp;&amp; wallON &amp;&amp; !ceilingON)
            {
                image_index = 9
                yspeed = -8.5;
                xspeed = image_xscale*6.8;
            }
            if (ycoll != 0 &amp;&amp; attackTimer &gt;= 15 &amp;&amp; wallON &amp;&amp; !ceilingON)
            {
                image_index = 19
                yspeed = 0;
                xspeed = 0;
                ceilingON = true;
                playSFX(sfxKnightLand)
                attackTimer = 0
                phase = 5
                groundON = 0; //ground
                wallON = 0; //wall
                ceilingON = 0; //ceiling
            }

            break;
            
            case 5: // Beto Fall    
            BetoTimer +=1
            if (BetoTimer == 20 || BetoTimer == 60 || BetoTimer == 100 || BetoTimer == 140 || BetoTimer == 180 || BetoTimer == 220 || BetoTimer == 260 || BetoTimer == 300)
            {
                if (instance_exists(objMegaman))
                betoBaseX = sprite_get_xcenter_object(objMegaman)
                else
                betoBaseX = round((view_xview + (view_wview / 2)))
                        
                betoOffset = irandom_range(-64, 64)
                betoX = (betoBaseX + betoOffset)
                betoX = min(max(betoX, (view_xview + 32)), ((view_xview + view_wview) - 32));
                instance_create(betoX, view_yview+48, objSlashManBeto)
                playSFX(sfxEnemyDrop2);       
            }
           
            if (attackTimer &lt; 1&amp;&amp; !wallON)            
            if (attackTimer == 1&amp;&amp; !wallON){}
            if (attackTimer == 60&amp;&amp; !wallON)
            {
                if (instance_exists(objMegaman))
                {
                    if(target.x &lt; (view_xview[0] + 120))
                    {
                        xspeed = -5.5
                        image_xscale = -1
                    }
                    else
                    {
                        xspeed = 5.5
                        image_xscale = 1
                    }
                }            
                image_index = 0
                image_speed = 0.20
                sprite_index = sprSlashManRolling;
            }
            if(attackTimer &gt;= 60 &amp;&amp; xcoll != 0 &amp;&amp; !wallON){
                image_speed = 0.5
                sprite_index = sprSlashManCharge1;
                xspeed = 0
                yspeed = 2
                attackTimer = 0
                wallON = true
                image_xscale *= -1;
                playSFX(sfxKnightLand)
            }
            if (attackTimer == 15 &amp;&amp; wallON &amp;&amp; !ceilingON)
                yspeed = 1
            if (attackTimer == 35 &amp;&amp; wallON &amp;&amp; !ceilingON){
                yspeed = 0.5
                
                if(image_xscale = 1) //check
                img = 1
                
                }
            if (attackTimer == 55 &amp;&amp; wallON &amp;&amp; !ceilingON)
                yspeed = 0
            if (attackTimer == 95 &amp;&amp; wallON &amp;&amp; !ceilingON){
              
              if (instance_exists(objMegaman)){
              if(img){             
              if(target.x &lt; (view_xview[0] + 32)){
              phase = 6
              attackTimer = 0
              pauseGravity = false
              image_speed = 0
              sprite_index = sprSlashMan
              image_index = 9        
              }
              if(target.x &gt; (view_xview[0] + 32) &amp;&amp; target.x &lt; (view_xview[0] + 96)){
              phase = 7
              sprite_index = sprSlashManCharge2
              attackTimer = 0         
              }
              if(target.x &gt; (view_xview[0] + 96)){
              phase = 7
              sprite_index = sprSlashManCharge3
              attackTimer = 0
              }
              }
              else{   //image_xscale = 1
              if(target.x &gt; (view_xview[0] + 208)){
              phase = 6
              attackTimer = 0
              pauseGravity = false
              image_speed = 0
              sprite_index = sprSlashMan
              image_index = 9      
              }
              if(target.x &lt; (view_xview[0] + 208) &amp;&amp; target.x &gt; (view_xview[0] + 160)){
              phase = 7
              sprite_index = sprSlashManCharge2
              attackTimer = 0
              }
              if(target.x &lt; (view_xview[0] + 160)){
              phase = 7
              sprite_index = sprSlashManCharge3
              attackTimer = 0
              }
              }
              }
              else{
              phase = 6
              attackTimer = 0
              pauseGravity = false
              image_speed = 0
              sprite_index = sprSlashMan
              image_index = 9 
              }
              
                
               
           }
            break;
            
            case 6: // End           
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            
            if (ground &amp;&amp; attackTimer &gt; 1)
            {
                    phase = 0;
                    playSFX(sfxKnightLand)
                    attackTimer = 0
            }
            break;
            
            case 7: // Jump in   
            with (instance_create(bboxGetXCenter(), y, objTrailEffect))
                        {
                            image_xscale = other.image_xscale
                            sprite_index = other.sprite_index
                            image_index = other.image_index
                        }         
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            if (attackTimer == 1){
            playSFX(sfxSolarManSun)
            var spd;
                spd = 6;
                   if (instance_exists(target))
                   {
                      var angle;
                        angle = point_direction(spriteGetXCenter(), spriteGetYCenter(),
                        spriteGetXCenterObject(target),
                        spriteGetYCenterObject(target));
                        xspeed = cos(degtorad(angle)) * spd;
                        yspeed = -sin(degtorad(angle)) * spd;
                   }
                   else
                   {
                   xspeed = spd;
                   yspeed = 0;
                   }
            }
            
            if (ground &amp;&amp; attackTimer &gt; 1)
            {
                    phase = 8;
                    image_speed = 0
                    attackTimer = 0
                    xspeed = 0
                    yspeed = 0
            }
            break;
            
            case 8: // rolling   
               
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            if (attackTimer == 1){
            image_index = 2
            sprite_index = sprSlashManRolling
            }
            if (attackTimer == 3)
            image_index = 1
            if (attackTimer == 5)
            image_index = 0
            if (attackTimer == 10){
            phase = 0
            attackTimer = 0
            }
            
            break;
            
            
            case 10: // Normal Sprite     
           
            if (attackTimer &lt; 1)
            
            if (attackTimer == 1){}
            
            if (attackTimer == 1){ 
            calibrateDirection();        
            image_index = 0 
            if (instance_exists(target)){    
            if (distance_to_object(target) &lt;= radius &amp;&amp; !slashStop)
            nextphase = 3;
            else
            nextphase = 2
            }
            else
            nextphase = 2
            
            }       
                       
            if (ground &amp;&amp; delay == 0 &amp;&amp; attackTimer &gt; 5)
            {
                    if(jumpcount == 0)                    
                    phase = 4
                    else
                    phase = nextphase;
                    
                    attackTimer = 0
                    slashStop = false
            }
            break;
        
        }   
      
      
    }
}
else
{ }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objKabatoncueMissile)
    instance_destroy();

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This is used for "tier boss"-esque cutscenes. Until you specifically set startIntro to false,
// the boss will continue to run this code and wait for you to specify it's the end.
// Here is an example cutscene.

// Check if cutsceneScript is set
if (cutsceneScript != "")
{
    script_execute(cutsceneScript);
    exit;
}

// DON'T REMOVE THIS LINE UNLESS YOU KNOW WHAT YOU'RE DOING
cutsceneTimer += 1;
if (cutsceneTimer &lt; 40 &amp;&amp; !groundON)
{
    visible = false;
    sprite_index = sprSlashManRolling;
    grav = 0
}

if (cutsceneTimer == 40 &amp;&amp; !groundON)
{
    visible = true;
    blockCollision = false;
    yspeed = 4.5;
    image_speed = 0.20
    y -= 96;
    image_xscale = -image_xscale;
    xspeed = image_xscale*6.8;
    x = view_xview-16+(view_wview*(image_xscale == -1));
}

if (cutsceneTimer == 50 &amp;&amp; !groundON)
{
    blockCollision = true;
}
if (cutsceneTimer &gt;= 50 &amp;&amp; ground &amp;&amp; !groundON)
{
   image_index = 1
   playSFX(sfxKnightLand)
   sprite_index = sprSlashMan;
   image_speed = 0;
   groundON = true
   xspeed = 0
   yspeed = 0
   cutsceneTimer = 0
}

if (cutsceneTimer == 5 &amp;&amp; groundON &amp;&amp; !wallON)
{
    image_index = 0
}
if (cutsceneTimer == 15 &amp;&amp; groundON &amp;&amp; !wallON)
{
    image_index = 9
    yspeed = -6.5;
    xspeed = image_xscale*6.8;
}
if (cutsceneTimer == 20 &amp;&amp; groundON &amp;&amp; !wallON)
{
    image_index = 0
    image_speed = 0.20
    sprite_index = sprSlashManRolling;
}
if(xcoll != 0 &amp;&amp; !wallON)
{
    image_index = 15
    image_speed = 0
    sprite_index = sprSlashMan;
    xspeed = 0
    yspeed = 0
    image_xscale *= -1;
    cutsceneTimer = 0
    wallON = true
    playSFX(sfxKnightLand)
}

if (cutsceneTimer == 5 &amp;&amp; wallON &amp;&amp; !ceilingON)
{
    image_index = 14
}
if (cutsceneTimer == 15 &amp;&amp; wallON &amp;&amp; !ceilingON)
{
    image_index = 9
    yspeed = -6.5;
    xspeed = image_xscale*6.8;
}
if (ycoll != 0 &amp;&amp; cutsceneTimer &gt;= 15 &amp;&amp; wallON &amp;&amp; !ceilingON)
{
    image_index = 19
    yspeed = 0;
    xspeed = 0;
    ceilingON = true;
    playSFX(sfxKnightLand)
    cutsceneTimer = 0
}
if (cutsceneTimer == 25 &amp;&amp; ceilingON)
{
  grav = 0.25
  image_index = 9
}
if (cutsceneTimer &gt;= 25 &amp;&amp; ceilingON &amp;&amp; ground)
{
  image_index = 0
  playSFX(sfxKnightLand)
  startIntro = false; // now start the boss.
  isIntro = true;
  groundON = 0; //ground
  wallON = 0; //wall
  ceilingON = 0; //ceiling
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
