<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPUElecMovingBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// this block will move in a certain direction if powered by player's electricity type weapons
event_inherited();

canHit = false;
canDamage = false;
bubbleTimer = 0;
blockCollision = 1;
grav = 0;

phase = 0;
animTimer = 0;
timer = 0;
restTimerMax = 30;
dir = 0;

goSpd = 1.6;
returnSpd = 0.8;

isSolid = 1;

//@cc: if true, the block will try to stop before it crushes Mega
crushPrevention = 1;

triggerWeapon[0] = objThunderBeam;
triggerWeapon[1] = objSparkShock;
triggerWeapon[2] = objPlugBall;
triggerWeapon[3] = objThunderWool;
triggerWeapon[4] = objThunderBeamGB;
triggerWeapon[5] = objSparkShockGB;
triggerWeapon[6] = objSparkChaser;
triggerWeapon[7] = objForceField;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    if(phase == 0) // wait to get ticked off
    {
        image_index = 1+dir/90;
        for(var i = 0; i &lt; array_length_1d(triggerWeapon); i++)
        {
            if(instance_exists(triggerWeapon[i]) &amp;&amp; triggerWeapon[i] != noone)
            {
                if(collision_rectangle(bbox_left-1,bbox_top-1,bbox_right+1,bbox_bottom+1,triggerWeapon[i],0,1))
                {
                    phase = 1;
                    timer = 0;
                    image_index = 5;
                    xspeed = cos(degtorad(dir))*goSpd;
                    yspeed = -sin(degtorad(dir))*goSpd;
                    playSFX(sfxBlockZap);
                }
            }
        }
    }
    else if(phase == 1) // go!
    {
        image_index = 5+floor(animTimer/3) mod 3;
        animTimer++;
        
        if(instance_exists(objMegaman) &amp;&amp; crushPrevention) // check if Mega is in front of you
        {
            var meggers = instance_place(x+xspeed,y+yspeed,objMegaman)
            if(meggers)
            {
                with(meggers)
                {
                    if(checkSolid(other.xspeed*2,other.yspeed*2))
                    {
                        with(other)
                        {
                            xspeed = 0;
                            yspeed = 0;
                        }
                    }
                }
            }
        }
        
        // screw it
        if(dir == 0 || dir == 180)
        {
            y = ystart;
        }
        else if(dir == 90 || dir == 270)
        {
            x = xstart;
        }
        
        if(xspeed == 0 &amp;&amp; yspeed == 0)
        {
            phase = 2;
            timer = 0;
        }
    }
    else if(phase == 2) // w8
    {
        image_index = 5+floor(animTimer/3) mod 3;
        animTimer++;
        
        timer++;
        if(timer &gt;= restTimerMax)
        {
            phase = 3;
            timer = 0;
            xspeed = -cos(degtorad(dir))*returnSpd;
            yspeed = sin(degtorad(dir))*returnSpd;
        }
    }
    else if(phase == 3) // return to start
    {
        image_index = 5+floor(animTimer/3) mod 3;
        animTimer++;
        
        xspeed = -cos(degtorad(dir))*returnSpd;
        yspeed = sin(degtorad(dir))*returnSpd;
        
        if(instance_exists(objMegaman) &amp;&amp; crushPrevention) // check if Mega is in front of you
        {
            var meggers = instance_place(x+xspeed,y+yspeed,objMegaman)
            if(meggers)
            {
                with(meggers)
                {
                    if(checkSolid(other.xspeed*2,other.yspeed*2))
                    {
                        with(other)
                        {
                            xspeed = 0;
                            yspeed = 0;
                        }
                    }
                }
            }
        }
        
        // screw it
        if(dir == 0 || dir == 180)
        {
            y = ystart;
        }
        else if(dir == 90 || dir == 270)
        {
            x = xstart;
        }
        
        if(abs(x-xstart) &lt;= abs(xspeed))
        {
            xspeed = 0;
            shiftObject(xstart-x,0,1);
        }
        if(abs(y-ystart) &lt;= abs(yspeed))
        {
            yspeed = 0;
            shiftObject(0,ystart-y,1);
        }
        
        if(abs(x-xstart) &lt; 1 &amp;&amp; abs(y-ystart) &lt; 1)
        {
            xspeed = 0;
            yspeed = 0;
            phase = 0;
            timer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

xspeed = 0;
yspeed = 0;
phase = 0;
timer = 0;
animTimer = 0;
image_index = 0;
dir = (floor(wrapAngle(dir)/90) mod 4)*90;
image_xscale = 1;
image_yscale = 1;
image_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
