<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShadowMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtBoss</parentName>
  <maskName>mskShadowman</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creation code (all optional):
// infiniteCrashBombs = true; -
event_inherited();

healthpointsStart = 28;
healthpoints = healthpointsStart;
pose = sprShadowIntro;
poseImgSpeed = 10 / 60;
contactDamage = 4;
slideContact = 6;
ground = false;
attackTimer = 0;
beginAttackTimer = false;

jumpHeight = makeArray(-4,-5.5,-7);
irandomJump = true;
horSpeed = 1;
prevContact = -1;
phase = 0;
slideSpeed = 7;
slideFrames = 30;
timer = 0;
delay = 0;
hasFired = false;
jumpTimesStart = 2
jumpTimes = 3;
imgIndex = 0;
stopOnFlash = false;
shurikenObject = objShadowShuriken;
bullet = -1;
telegraph = 1;
telegraphFrames = 12;
throwFrames = 10;
bulletImgSpd = 4/20;
shurikenImgSpd = 0.5;
bulletOffset = 21;
shurikenThrowOffsetY = 12;

// Health Bar
healthBarPrimaryColor[1] = 14;
healthBarSecondaryColor[1] = 40;

// Music
music = "Mega_Man_3.nsf";
musicType = "VGM";
musicTrackNumber = 12;

// Damage Table
enemyDamageValue(objBusterShot, 1);
enemyDamageValue(objBusterShotHalfCharged, 1);
enemyDamageValue(objBusterShotCharged, 3);

// MM1
enemyDamageValue(objSuperArmBlockProjectile, 1);
enemyDamageValue(objSuperArmDebris, 1);
enemyDamageValue(objIceSlasher, 1);
enemyDamageValue(objThunderBeam, 1);

// MM2
enemyDamageValue(objMetalBlade, 1);

// MM3
enemyDamageValue(objNeedleCannon, 1);
enemyDamageValue(objMagnetMissile, 1);
enemyDamageValue(objGeminiLaser, 1);
enemyDamageValue(objHardKnuckle, 2);
enemyDamageValue(objTopSpin, 4);
enemyDamageValue(objSearchSnake, 1);
enemyDamageValue(objSparkShock, 1);
enemyDamageValue(objShadowBlade, 4);

// MM4
enemyDamageValue(objRainFlush, 1);
enemyDamageValue(objPharaohShot, 1); //Charge shot = 6

// MM5
enemyDamageValue(objPowerStone, 1);

// MM6
enemyDamageValue(objPlantBarrier, 1);

// MM7
enemyDamageValue(objSlashClaw, 2);

// MM8
enemyDamageValue(objHomingSniper, 1);

// MM9
enemyDamageValue(objConcreteShot, 1);
enemyDamageValue(objTornadoBlow, 4);
enemyDamageValue(objLaserTrident, 1);
enemyDamageValue(objJewelSatellite, 0);
enemyDamageValue(objHornetChaser, 1);
enemyDamageValue(objBlackHoleBomb, 1);

// MM10
enemyDamageValue(objTripleBlade, 1);
enemyDamageValue(objWaterShield, 0);
enemyDamageValue(objChillShot, 2);
enemyDamageValue(objChillSpikeLanded, 4);
enemyDamageValue(objThunderWool, 1);
enemyDamageValue(objWheelCutter, 2);
enemyDamageValue(objSolarBlaze, 1);

// MM11
enemyDamageValue(objBlockDropper, 1);

// MMI

// MMII
enemyDamageValue(objSakugarne, 2);

// MMIII

// MMIV

// MMV
enemyDamageValue(objSparkChaser, 1);
enemyDamageValue(objGrabBuster, 1);
enemyDamageValue(objBreakDash, 4);
enemyDamageValue(objSaltWater, 1);

// MM&amp;B
enemyDamageValue(objTenguBlade, 2);
enemyDamageValue(objTenguDash, 4);
enemyDamageValue(objTenguDisk, 2);
enemyDamageValue(objIceWall, 1);
enemyDamageValue(objMagicCard, 0);

// MM&amp;B2
enemyDamageValue(objFlameMixer, 1);

// Other
enemyDamageValue(objMagneticShockwave, 1);

// Utilities
enemyDamageValue(objWireAdapter, 1);
enemyDamageValue(objSuperArrow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// its a ninja what do you expect
event_inherited();

// he throws the shuriken and does a cool ninja slide
if (entityCanStep())
{
    target = objMegaman;
    if (isFight == true)
    {
        sprite_index = sprShadowMan;
        switch (phase)
        {
            case 0:
            {
                imgIndex = 4;
                if ground
                {
                    timer++
                    calibrateDirection();
                    xspeed = 0;
                    imgIndex = 1;
                    var prevJump = jumps;
                    if jumps &gt; 0
                    {
                        if timer &gt; 1
                        {
                            jumps -= 1;
                            ground = false;
                            xspeed = horSpeed*image_xscale;
                            yspeed = jumpHeight[irandom_range(0,array_length_1d(jumpHeight)-1)];
                            timer = 0;
                        }
                    }
                    else
                    {                      
                        phase = choose(4,2)
                        jumps = jumpTimes;
                        timer = 0;
                    }
                }
                else
                {
                    timer = 0;
                }
            }
            break;
            case 1: //slide
            {
                imgIndex = 8;
                if prevContact == -1
                {
                    prevContact = contactDamage;
                    contactDamage = slideContact;    
                }
                if ground
                {
                    if timer == 0
                    {
                        with (instance_create(x + (abs(x - bbox_right) - 2) * sign(image_xscale), y + (abs(y - bbox_bottom) - 2) * sign(image_yscale), objSlideDust))
                        {
                            image_xscale = other.image_xscale;
                        }
                    }
                    timer++
                    if instance_exists(target)
                    {  
                        if (x &gt; target.x)    
                        {
                            firstcheck = x;
                            secondcheck = target.x;
                        }
                        else
                        {
                            firstcheck = target.x;
                            secondcheck = x;
                        }
                        
                        if checkSolid(1 * image_xscale, 0) or (abs(distance_to_point(target.x, y)) &gt;= 16 and secondcheck &gt; firstcheck)
                        {      
                            xspeed = 0
                            phase = 0;
                            timer = 5;
                            imgIndex = 1;
                            contactDamage = prevContact;
                            prevContact = -1;
                            jumps = jumpTimes;
                        }
                    }           
                    if (timer &lt; slideFrames)
                    { 
                        xspeed = slideSpeed*image_xscale;                    
                    }
                    else
                    {
                        phase = 0;
                        timer = -1;
                        imgIndex = 1;
                        contactDamage = prevContact;
                        prevContact = -1;
                        jumps = jumpTimes;
                    }
                }   
            }
            break;
            case 2: //shuriken telegraph
            {
                imgIndex = 5;
                if bullet == -1
                {
                    bullet = instance_create(bboxGetXCenter(),y-bulletOffset*image_yscale,objShadowShuriken)
                    bullet.effect = 1;
                    bullet.xspeed = 0;
                    bullet.yspeed = 0;
                    bullet.minFrame = 0;
                    bullet.maxFrame = 4;
                    bullet.reflectable = 0;
                    bullet.canHit = false;
                    bullet.canDamage = false;
                    bullet.despawnRange = -1;
                    bullet.contactDamage = 0;
                    bullet.imgSpd = bulletImgSpd;
                }
                if bullet != -1 &amp;&amp; instance_exists(bullet)
                {
                    if bullet.image_index &gt; 2
                    {
                        imgIndex = 6;
                        if bullet.image_index &gt;= 4
                        {
                            with (bullet)
                            {
                                instance_destroy();
                            }
                            imgIndex = 7;
                            phase = 3;
                            bullet = -1;
                        }
                    }
                }
                
            }
            break;
            case 3: // throw shuriken
            {
                imgIndex = 7;
                playSFX(sfxShadowBlade);
                if timer == 0
                {
                    var i = instance_create(bboxGetXCenter(),bboxGetYCenter() - shurikenThrowOffsetY,shurikenObject);   
                    i.xspeed = 4.5*image_xscale;
                    i.yspeed = 0;
                    i.imgSpd = shurikenImgSpd;
                    var i = instance_create(bboxGetXCenter(),bboxGetYCenter() - shurikenThrowOffsetY,shurikenObject);   
                    i.xspeed = 4*image_xscale;
                    i.yspeed = -4.5;
                    i.imgSpd = shurikenImgSpd;
                }
                timer++
                if timer &gt;= throwFrames
                {
                    phase = 0;
                    timer = -1;
                    imgIndex = 1;
                    jumps = jumpTimes;  
                }    
            }
            break;
            case 4: //slide telegraph
            {
                if telegraph
                {
                    imgIndex = 1
                    timer++
                    if timer &gt;= telegraphFrames
                    {
                        phase = 1;
                        timer = 0;
                    }
                }
                else
                {
                    phase = 1;
                }
            }
            break;
        }
        image_index = imgIndex;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

jumps = jumpTimesStart;
if prevContact != -1
{
    contactDamage = prevContact;
    prevContact = -1;
}
phase = 0;
slideSpeed = 3;
slideFrames = 35;
timer = 0;
delay = 0;
imgIndex = 0;
bullet = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (objHarmfulExplosion)
    instance_destroy();
with (objShadowShuriken)
{
    instance_create(x, y, objExplosion);
    instance_destroy();
}
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
