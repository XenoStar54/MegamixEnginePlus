<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPendulumSparkle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtEntity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

canHit = true;
canDamage = true;
contactDamage = 2;
isSolid = 1;
grav = 0;
visible = true;
blockCollision = false;
despawnRange = -1;
image_speed = 0.3;
image_alpha= 0.75;
respawn = false;

pull = 0;
initSpd = 0;
spd = 0;
maxSpd = 9;
angle = 270;
period = 15;
maxSwing = 90;

initAngle = 270;
radius = 64;

pushStrength = 1.5;
unphased = false;

pushesMe[0] = objMM1MetBullet;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(entityCanStep())
{
    pull = 2*(initAngle - angle)/(period*period);
    spd += pull;
    if(maxSpd &gt; 0)if(abs(spd) &gt; maxSpd)spd = sign(spd) * maxSpd;
    angle += spd;
    if(initAngle - angle &gt; 180)
    {
        angle += 360;
    }
    else if(initAngle - angle &lt; -180)
    {
        angle -= 360;
    }
    if(abs(angle - initAngle) &gt; maxSwing &amp;&amp; maxSwing &gt; 0)
    {
        angle = initAngle + maxSwing*sign(angle - initAngle);
        spd = 0;
    }
    
    if(isSolid)
    {
        var newSpd = spd;
        if(angle &gt; initAngle)newSpd-=pull;
        if(angle &lt; initAngle)newSpd+=pull;
        if(abs(newSpd) &gt; abs(maxSpd))newSpd = abs(maxSpd) * sign(newSpd);
        var newX = xstart + cos(degtorad(angle+newSpd))*radius;
        var newY = ystart - sin(degtorad(angle+newSpd))*radius;
        xspeed = newX - x;
        yspeed = newY - y;
    }
    else
    {
        x = xstart + cos(degtorad(angle))*radius;
        y = ystart - sin(degtorad(angle))*radius;
    }
    
    // take additional forms of push
    if(!unphased) for(var i = 0; i &lt; array_length_1d(pushesMe); i++)
    {
        with(pushesMe[i]) if(!dead) with(other)
        {
            if(place_meeting(x,y,other))
            {
                event_user(11);
                playSFX(sfxReflect);
                with(other)
                {
                    event_user(10);
                    if(visible) instance_create(bboxGetXCenter(),bboxGetYCenter(),objExplosion);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
angle = initAngle;
x = xstart + cos(degtorad(angle))*radius;
y = ystart - sin(degtorad(angle))*radius;
spd = initSpd;
if(abs(spd) &gt; maxSpd)maxSpd = abs(spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!unphased)
{
    if(other.xspeed != 0)
    {
        spd += pushStrength*sign(other.xspeed)*(1 + (other.object_index == objBusterShotCharged));
    }
    else
    {
        spd += pushStrength*sign(other.xspeed)*(1 + (other.object_index == objBusterShotCharged));
    }
}
other.guardCancel = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
