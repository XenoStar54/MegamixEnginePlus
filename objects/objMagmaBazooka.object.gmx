<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMagmaBazooka</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>prtPlayerProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

contactDamage = 1;
extraDamage = 0;

image_speed = 1/4;

xspeed = 0;
yspeed = 0;
grav = 0;
blockCollision = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var chargeTime = 30; // Set charge time for this weapon
var initChargeTime = 20;

var check = true;
if (instance_exists(objMagmaBazooka)){
    if (objMagmaBazooka.sprite_index != sprMagmaBazooka) check = false;
}

if (instance_number(objMagmaBazooka) &lt;= 3 &amp;&amp; check &amp;&amp; global.ammo[playerID, global.weapon[playerID]])
{
    if (global.keyShootPressed[playerID] &amp;&amp; !playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer == 0)
    {
        for (var i = -1; i &lt;= 1; i++){
            var angle = 180*(image_xscale &lt; 0) + 45*i;
            a = fireWeapon(16 + cos(degtorad(angle)), -sin(degtorad(angle)), objMagmaBazooka, 6, 0.5*(i==0), 1, 0);
            if (a)
            {
                a.xspeed = image_xscale * 3; // zoom
                a.yspeed = image_yscale * i*3;
                a.image_xscale = image_xscale;
                a.image_yscale = image_yscale;
                if (!audio_is_playing(sfxMagmaBazooka)){
                    audio_stop_sound(sfxMagmaBazooka);
                    playSFX(sfxMagmaBazooka);
                }
            }
        }
    }
    
    //////////////
    // Charging //
    //////////////
    
    if (global.enableCharge)
    {
        if ((global.keyShoot[playerID] || (isSlide &amp;&amp; chargeTimer &gt; 0))
            &amp;&amp; !playerIsLocked(PL_LOCK_CHARGE))
        {
            if (!isShoot)
            {
                isCharge = true;
                
                if (!isSlide)
                {
                    initChargeTimer += 1;
                }
                
                if (initChargeTimer &gt;= initChargeTime)
                {
                    if (!chargeTimer)
                    {
                        playSFX(sfxFireCharging2);
                    }
                    
                    chargeTimer++;
                    
                    if (chargeTimer &lt; chargeTime)
                    {
                        var chargeTimeDiv, chargeCol;
                        chargeTimeDiv = round(chargeTime / 3);
                        
                        if (chargeTimer &lt; chargeTimeDiv * 2)
                        {
                            chargeCol = global.nesPalette[31]; // Red (dark pink)
                        }
                        else
                        {
                            chargeCol = global.nesPalette[33]; // Light red (pink)
                        }
                        
                        if (chargeTimer mod 6 &gt;= 0 &amp;&amp; chargeTimer mod 6 &lt; 3)
                        {
                            global.outlineCol[playerID] = chargeCol;
                        }
                        else
                        {
                            global.outlineCol[playerID] = c_black;
                        }
                    }
                    else
                    {
                        if (chargeTimer == chargeTime)
                        {
                            audio_stop_sound(sfxFireCharging2);
                            playSFX(sfxFireCharging3);
                        }
                        if (!inked)
                        {
                            switch (floor(chargeTimer / 4 mod 4))
                            {
                                case 0:
                                case 2: // Light blue helmet, black shirt, blue outline 
                                    global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objMagmaBazooka]];
                                    global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objMagmaBazooka]];
                                    global.outlineCol[playerID] = c_black;
                                    break;
                                case 1: // Black helmet, blue shirt, light blue outline 
                                    global.primaryCol[playerID] = global.nesPalette[34];
                                    global.secondaryCol[playerID] = global.nesPalette[53];
                                    global.outlineCol[playerID] = global.nesPalette[44];
                                    break;
                                case 3: // Blue helmet, light blue shirt, blue outline 
                                    global.primaryCol[playerID] = global.weaponPrimaryColor[global.weaponID[? objMagmaBazooka]];
                                    global.secondaryCol[playerID] = global.weaponSecondaryColor[global.weaponID[? objMagmaBazooka]];
                                    global.outlineCol[playerID] = global.nesPalette[30];
                                    break;
                            }
                        }
                    }
                }
            }
        }
        else // Release the charge shot
        {
            if (!playerIsLocked(PL_LOCK_SHOOT) &amp;&amp; chargeTimer != 0 &amp;&amp; !isSlide)
            {
                /////////////////////
                // ACTUAL SHOOTING //
                /////////////////////
                
                if (chargeTimer &lt; chargeTime) // Half charge
                {
                    for (var i = -1; i &lt;= 1; i++){
                        var angle = 180*(image_xscale &lt; 0) + 45*i;
                        a = fireWeapon(16 + cos(degtorad(angle)), -sin(degtorad(angle)), objMagmaBazooka, 6, 0.5*(i==0), 1, 0);
                        if (a)
                        {
                            a.xspeed = image_xscale * 3; // zoom
                            a.yspeed = image_yscale * i*3;
                            a.image_xscale = image_xscale;
                            a.image_yscale = image_yscale;
                            if (!audio_is_playing(sfxMagmaBazooka)){
                                playSFX(sfxMagmaBazooka);
                            }
                        }
                    }
                }
                else // Full charge
                {
                    for (var i = -1; i &lt;= 1; i++){
                        var angle = 180*(image_xscale &lt; 0) + 45*i;
                        a = fireWeapon(16 + cos(degtorad(angle)), -sin(degtorad(angle)), objMagmaBazooka, 6, 2*(i==0), 1, 0);
                        if (a)
                        {
                            a.xspeed = image_xscale * 2.5; // zoom
                            a.yspeed = image_yscale * i*2.5;
                            a.sprite_index = sprMagmaBazookaCharged;
                            a.extraDamage = 2;
                            a.contactDamage += a.extraDamage;
                            a.image_xscale = image_xscale;
                            a.image_yscale = image_yscale;
                            if (!audio_is_playing(sfxMagmaBazooka)){
                                playSFX(sfxMagmaBazooka);
                            }
                        }
                    }
                }
                
                // Reset all charging stuff
                chargeTimer = 0;
                initChargeTimer = 0;
                audio_stop_sound(sfxFireCharging1);
                audio_stop_sound(sfxFireCharging2);
                audio_stop_sound(sfxFireCharging3);
                playerPalette(); // Reset the colors
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>weaponSetup("MAGMA BAZOOKA", global.nesPalette[19], global.nesPalette[33], sprWeaponIconsMagmaBazooka);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
